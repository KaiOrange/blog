<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>橙光笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.kai666666.top/"/>
  <updated>2020-07-30T06:29:51.019Z</updated>
  <id>https://www.kai666666.top/</id>
  
  <author>
    <name>Orange</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Canvas系列（14）：实战-小球碰撞</title>
    <link href="https://www.kai666666.top/2020/07/28/Canvas%E7%B3%BB%E5%88%97%EF%BC%8814%EF%BC%89%EF%BC%9A%E5%AE%9E%E6%88%98-%E5%B0%8F%E7%90%83%E7%A2%B0%E6%92%9E/"/>
    <id>https://www.kai666666.top/2020/07/28/Canvas%E7%B3%BB%E5%88%97%EF%BC%8814%EF%BC%89%EF%BC%9A%E5%AE%9E%E6%88%98-%E5%B0%8F%E7%90%83%E7%A2%B0%E6%92%9E/</id>
    <published>2020-07-28T06:00:50.000Z</published>
    <updated>2020-07-30T06:29:51.019Z</updated>
    
    <content type="html"><![CDATA[<p>两小球碰撞是Canvas非常经典的案例，他是一个很简单的需求，但做起来却非常复杂。</p><hr><h2 id="小球移动操作"><a href="#小球移动操作" class="headerlink" title="小球移动操作"></a>小球移动操作</h2><p>根据前面的学习，我们对小球的基本运动了如指掌，直接来一个小球的移动操作，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Canvas系列<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> &gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#canvas</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-id">#eeeeee</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000000</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span>  <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 获取元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 获取上下文</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> context = canvas.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="class"><span class="keyword">class</span> <span class="title">Ball</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">constructor</span>(context, options = &#123;&#125;)&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.context = context;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.x = options.x || <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.y = options.y || <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.radius = options.radius || <span class="number">20</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.color = options.color || <span class="string">'#000'</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.vx = options.vx || <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.vy = options.vy || <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.ax = options.ax || <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.ay = options.ay || <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      update() &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.vx += <span class="keyword">this</span>.ax;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.vy += <span class="keyword">this</span>.ay;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.x += <span class="keyword">this</span>.vx;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.y += <span class="keyword">this</span>.vy;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      draw() &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.context.beginPath();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.context.arc(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.radius, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">360</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.context.fillStyle = <span class="keyword">this</span>.color;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.context.closePath();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.context.fill();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> balls = []</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    balls.push(<span class="keyword">new</span> Ball(context,&#123;</span></span><br><span class="line"><span class="undefined">      x:20,</span></span><br><span class="line"><span class="undefined">      y:20,</span></span><br><span class="line"><span class="undefined">      vx:3,</span></span><br><span class="line"><span class="undefined">      vy:2,</span></span><br><span class="line"><span class="undefined">      ay:0.5,</span></span><br><span class="line"><span class="actionscript">      color:<span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">    &#125;));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    balls.push(<span class="keyword">new</span> Ball(context,&#123;</span></span><br><span class="line"><span class="undefined">      x:canvas.width - 20,</span></span><br><span class="line"><span class="undefined">      y:20,</span></span><br><span class="line"><span class="undefined">      vx:-3,</span></span><br><span class="line"><span class="undefined">      vy:2,</span></span><br><span class="line"><span class="undefined">      ay:0.5,</span></span><br><span class="line"><span class="actionscript">      color:<span class="string">'blue'</span>,</span></span><br><span class="line"><span class="undefined">    &#125;));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">checkWalls</span><span class="params">(ball)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 边界反弹</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (ball.x &lt; ball.radius) &#123;</span></span><br><span class="line"><span class="undefined">        ball.x = ball.radius;</span></span><br><span class="line"><span class="undefined">        ball.vx *= -1;</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ball.x &gt; canvas.width - ball.radius) &#123;</span></span><br><span class="line"><span class="undefined">        ball.x = canvas.width - ball.radius;</span></span><br><span class="line"><span class="undefined">        ball.vx *= -1;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (ball.y &lt; ball.radius) &#123;</span></span><br><span class="line"><span class="undefined">        ball.y = ball.radius;</span></span><br><span class="line"><span class="undefined">        ball.vy *= -1;</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ball.y &gt; canvas.height - ball.radius) &#123;</span></span><br><span class="line"><span class="undefined">        ball.y = canvas.height - ball.radius;</span></span><br><span class="line"><span class="actionscript">        ball.vy *= <span class="number">-0.95</span>; <span class="comment">// 假设能量损耗是0.05</span></span></span><br><span class="line"><span class="actionscript">        ball.vx *= <span class="number">0.99</span>; <span class="comment">// 摩擦力</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">draw</span><span class="params">(ball)</span></span>&#123;</span></span><br><span class="line"><span class="undefined">      ball.draw();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">animate</span> <span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="undefined">      requestAnimationFrame(animate);</span></span><br><span class="line"><span class="undefined">      context.clearRect(0, 0, canvas.width, canvas.height);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      balls.forEach(<span class="function"><span class="params">ball</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 更新小球的速度</span></span></span><br><span class="line"><span class="undefined">        ball.update();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 检测是否碰撞到边界</span></span></span><br><span class="line"><span class="undefined">        checkWalls(ball);</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 绘制</span></span></span><br><span class="line"><span class="undefined">      balls.forEach(draw);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    animate();</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2020/07/28/Canvas系列（14）：实战-小球碰撞/1.gif" alt="初始效果"></p><h2 id="单轴碰撞"><a href="#单轴碰撞" class="headerlink" title="单轴碰撞"></a>单轴碰撞</h2><p>上面我们可以看到，小球并没有发生碰撞，今天我们研究的课题就是小球碰撞以后是怎么运动的。为了研究方便，本章节并考虑重力的情况。我们先研究一下只有x轴碰撞的情况，如图：</p><p><img src="/2020/07/28/Canvas系列（14）：实战-小球碰撞/2.png" alt="单轴碰撞"></p><p>物理理论：</p><blockquote><p>1.小球在碰撞前后，系统总动量是相同的；<br>2.小球在碰撞前后，系统总动能是相同的。</p></blockquote><p>上面提到了动量和动能，动量等于质量乘以速度，动能等于1/2乘以质量乘以速度的平方。假设第一个小球质量是\(m_0\) ，碰撞前一刹那的瞬时速度是\(v_0\)，碰撞后一刹那的瞬时速度是\(v_{f0}\)；第二个小球质量是\(m_1\)，碰撞前一刹那的瞬时速度是\(v_1\)；碰撞后一刹那的瞬时速度是\(v_{f1}\)，则有公式：</p><p>$$<br>  m_0 v_0 + m_1 v_1 = m_0 v_{f0} + m_1 v_{f1} ① \\<br>  \frac{1}{2} m_0 v_0 ^ 2 + \frac{1}{2} m_1 v_1 ^ 2 = \frac{1}{2} m_0 v_{f0} ^ 2 + \frac{1}{2} m_1 v_{f1} ^ 2  ②<br>$$</p><p>上面第一个公式是<code>动量守恒定律</code>，第二个公式是<code>动能守恒定律</code>。求解\(v_{f0}\)和\(v_{f1}\)过程如下：</p><p>$$<br>由 ① 可得：m_0 ( v_0 - v_{f0} ) =  m_1 ( v_{f1} - v_1 ) ③ \\<br>由 ② 可得：m_0 ( v_0 ^ 2 - v_{f0} ^ 2 ) =  m_1 ( v_{f1} ^ 2 - v_1 ^ 2 ) ④ \\<br>④也就是：m_0 ( v_0 - v_{f0} )( v_0 + v_{f0} ) =  m_1 ( v_{f1} - v_1 )( v_{f1} + v_1 ) ⑤ \\<br>由 ③ 和 ⑤ 可得： v_0 + v_{f0} =  v_1 + v_{f1} ⑥ \\<br>⑥也就是：v_{f1} =  v_0 + v_{f0} - v_1 ⑦ \\<br>将 ⑦ 带入 ① 可得：v_{f0} = \frac{ (m_0 - m_1)v_0 + 2 m_1 v_1  }{ m_0 + m_1} \\<br>同理可得：v_{f1} = \frac{ (m_1 - m_0)v_1 + 2 m_0 v_0  }{ m_0 + m_1} \\<br>$$</p><p>上述解方程过程可以不看，但一定要看最后2行的结论。如果记不住结论也没关系，忘了的时候来这个博客再看看就是了。</p><p>这里有一点需要注意一下，上述十字可以看到当两相求的质量相同的时候，碰撞后的速度是碰撞前两速度的交换。</p><p>由于本章不考虑重力的情况，现在我们把上个例子中关于重力的部分去掉，然后把小球移动到y轴的中间位置，当两小球碰撞的时，使用上述公式计算新的速度，具体代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="comment">// 获取上下文</span></span><br><span class="line"><span class="keyword">let</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(context, options = &#123;&#125;)&#123;</span><br><span class="line">    <span class="keyword">this</span>.context = context;</span><br><span class="line">    <span class="keyword">this</span>.x = options.x || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.y = options.y || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.radius = options.radius || <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">this</span>.color = options.color || <span class="string">'#000'</span>;</span><br><span class="line">    <span class="keyword">this</span>.vx = options.vx || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.vy = options.vy || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.ax = options.ax || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.ay = options.ay || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.mass = options.mass || <span class="number">0</span>; <span class="comment">// 质量</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mass &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.mass = <span class="built_in">Math</span>.pow(<span class="keyword">this</span>.radius, <span class="number">3</span>) / <span class="built_in">Math</span>.pow(<span class="number">20</span>, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update() &#123;</span><br><span class="line">    <span class="keyword">this</span>.vx += <span class="keyword">this</span>.ax;</span><br><span class="line">    <span class="keyword">this</span>.vy += <span class="keyword">this</span>.ay;</span><br><span class="line">    <span class="keyword">this</span>.x += <span class="keyword">this</span>.vx;</span><br><span class="line">    <span class="keyword">this</span>.y += <span class="keyword">this</span>.vy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw() &#123;</span><br><span class="line">    <span class="keyword">this</span>.context.beginPath();</span><br><span class="line">    <span class="keyword">this</span>.context.arc(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.radius, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">360</span>);</span><br><span class="line">    <span class="keyword">this</span>.context.fillStyle = <span class="keyword">this</span>.color;</span><br><span class="line">    <span class="keyword">this</span>.context.closePath();</span><br><span class="line">    <span class="keyword">this</span>.context.fill();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> balls = []</span><br><span class="line"></span><br><span class="line">balls.push(<span class="keyword">new</span> Ball(context,&#123;</span><br><span class="line">  x:<span class="number">100</span>,</span><br><span class="line">  y:<span class="number">190</span>,</span><br><span class="line">  vx:<span class="number">4</span>,</span><br><span class="line">  <span class="comment">// vy:2,</span></span><br><span class="line">  <span class="comment">// ay:0.5,</span></span><br><span class="line">  color:<span class="string">'red'</span>,</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">balls.push(<span class="keyword">new</span> Ball(context,&#123;</span><br><span class="line">  x:canvas.width - <span class="number">100</span>,</span><br><span class="line">  y:<span class="number">190</span>,</span><br><span class="line">  vx:<span class="number">-3</span>,</span><br><span class="line">  <span class="comment">// vy:2,</span></span><br><span class="line">  <span class="comment">// ay:0.5,</span></span><br><span class="line">  color:<span class="string">'blue'</span>,</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkWalls</span>(<span class="params">ball</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 边界反弹</span></span><br><span class="line">  <span class="keyword">if</span> (ball.x &lt; ball.radius) &#123;</span><br><span class="line">    ball.x = ball.radius;</span><br><span class="line">    ball.vx *= <span class="number">-1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ball.x &gt; canvas.width - ball.radius) &#123;</span><br><span class="line">    ball.x = canvas.width - ball.radius;</span><br><span class="line">    ball.vx *= <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ball.y &lt; ball.radius) &#123;</span><br><span class="line">    ball.y = ball.radius;</span><br><span class="line">    ball.vy *= <span class="number">-1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ball.y &gt; canvas.height - ball.radius) &#123;</span><br><span class="line">    ball.y = canvas.height - ball.radius;</span><br><span class="line">    <span class="comment">// ball.vy *= -0.95; // 假设能量损耗是0.05</span></span><br><span class="line">    <span class="comment">// ball.vx *= 0.99; // 摩擦力</span></span><br><span class="line">    ball.vy *= <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">ball</span>)</span>&#123;</span><br><span class="line">  ball.draw();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCollision</span>(<span class="params">ball0,ball1</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dist = ball1.x - ball0.x;</span><br><span class="line">  <span class="comment">// 检测冲突</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(dist) &lt; ball0.radius + ball1.radius) &#123;</span><br><span class="line">    <span class="comment">// 这里为了保证计算vf1的时候 ball0的vx还是原来的 所以就用变量来定义了 而不是ball0.vx = xxx</span></span><br><span class="line">    <span class="keyword">let</span> vf0 = ((ball0.mass - ball1.mass) * ball0.vx + <span class="number">2</span> * ball1.mass * ball1.vx) /</span><br><span class="line">      (ball0.mass + ball1.mass);</span><br><span class="line">    <span class="keyword">let</span> vf1 = ((ball1.mass - ball0.mass) * ball1.vx + <span class="number">2</span> * ball0.mass * ball0.vx) /</span><br><span class="line">      (ball0.mass + ball1.mass);</span><br><span class="line"></span><br><span class="line">    ball0.vx = vf0;</span><br><span class="line">    ball1.vx = vf1;</span><br><span class="line"></span><br><span class="line">    ball0.x += ball0.vx;</span><br><span class="line">    ball1.x += ball1.vx;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  requestAnimationFrame(animate);</span><br><span class="line">  context.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line"></span><br><span class="line">  balls.forEach(<span class="function"><span class="params">ball</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 更新小球的速度</span></span><br><span class="line">    ball.update();</span><br><span class="line">    <span class="comment">// 检测是否碰撞到边界</span></span><br><span class="line">    checkWalls(ball);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; balls.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; balls.length; j++) &#123;</span><br><span class="line">      checkCollision(balls[i], balls[j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绘制</span></span><br><span class="line">  balls.forEach(draw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">animate();</span><br></pre></td></tr></table></figure><p>上述代码19行，如果没有传进来质量的话就默认是<code>this.mass = Math.pow(this.radius, 3) / Math.pow(20, 3);</code>，因为球体的体积公式和质量公式如下：</p><p>$$<br>  V = \frac{4}{3} π R ^ 3  \\<br>  m = ρ V<br>$$</p><p>这里我们令系统的密度\(ρ = \frac{3}{4π * 20 ^ 3}\)，这样就可以保证半径为20像素的小球，其质量是1。</p><p>上述方法<code>checkCollision</code>中代码<code>Math.abs(dist) &lt; ball0.radius + ball1.radius</code>用来检测小球是否发生碰撞，如果小球圆心之间的距离小于两个小球的半径之和那么两小球碰撞了，目前因为是单轴的所以就简单的使用距离来判断，后面双轴的时候我们必须使用<code>勾股定理</code>来计算，后面就不再重复了。总的来说上述代码并不难，这里还有一个小技巧，<code>vf1</code>计算的时候我们使用上面的计算速度的公式⑥可以极大的减少运算。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCollision</span>(<span class="params">ball0,ball1</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dist = ball1.x - ball0.x;</span><br><span class="line">  <span class="comment">// 检测冲突</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(dist) &lt; ball0.radius + ball1.radius) &#123;</span><br><span class="line">    <span class="comment">// 这里为了保证计算vf1的时候 ball0的vx还是原来的 所以就用变量来定义了 而不是ball0.vx = xxx</span></span><br><span class="line">    <span class="keyword">let</span> vf0 = ((ball0.mass - ball1.mass) * ball0.vx + <span class="number">2</span> * ball1.mass * ball1.vx) /</span><br><span class="line">      (ball0.mass + ball1.mass);</span><br><span class="line">    <span class="keyword">let</span> vf1 = ((ball1.mass - ball0.mass) * ball1.vx + <span class="number">2</span> * ball0.mass * ball0.vx) /</span><br><span class="line">      (ball0.mass + ball1.mass);</span><br><span class="line"></span><br><span class="line">    ball0.vx = vf0;</span><br><span class="line">    ball1.vx = vf1;</span><br><span class="line"></span><br><span class="line">    ball0.x += ball0.vx;</span><br><span class="line">    ball1.x += ball1.vx;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改为：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCollision</span>(<span class="params">ball0,ball1</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dist = ball1.x - ball0.x;</span><br><span class="line">  <span class="comment">// 检测冲突</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(dist) &lt; ball0.radius + ball1.radius) &#123;</span><br><span class="line">    <span class="keyword">let</span> vxTotal = ball0.vx - ball1.vx;</span><br><span class="line">    ball0.vx = ((ball0.mass - ball1.mass) * ball0.vx + <span class="number">2</span> * ball1.mass * ball1.vx) /</span><br><span class="line">      (ball0.mass + ball1.mass);</span><br><span class="line">    ball1.vx = vxTotal + ball0.vx;</span><br><span class="line"></span><br><span class="line">    ball0.x += ball0.vx;</span><br><span class="line">    ball1.x += ball1.vx;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现效果是一样的，但我们的计算量减小了好多：</p><p><img src="/2020/07/28/Canvas系列（14）：实战-小球碰撞/3.gif" alt="单轴碰撞"></p><h2 id="双轴碰撞理论基础"><a href="#双轴碰撞理论基础" class="headerlink" title="双轴碰撞理论基础"></a>双轴碰撞理论基础</h2><p>上面单轴碰撞是否已经完全掌握了？一定要多看几遍上面的代码，双轴碰撞比单轴碰撞难多了。大多数情况下，小球的碰撞是没有固定方向的，如图：</p><p><img src="/2020/07/28/Canvas系列（14）：实战-小球碰撞/4.png" alt="没有固定方向的运动"></p><p>对于这种情况我们可以把双轴碰撞转换为单轴碰撞。首先旋转坐标系，这里为了方便查看我把圆心之间画了一条红色的线。</p><p><img src="/2020/07/28/Canvas系列（14）：实战-小球碰撞/5.png" alt="旋转坐标系"></p><p>这种情况下，就可以把速度分解在旋转后的坐标系上，绿色部分，如图：</p><p><img src="/2020/07/28/Canvas系列（14）：实战-小球碰撞/6.png" alt="速度的分解"></p><p>由上，我们在新的坐标系中，水平x轴上相当于是单轴碰撞，而y轴上的速度是垂直于x轴的，对x轴上的速度并不影响。当我们计算出x轴上碰撞后速度后，再跟y轴就可以算出新的合速度，如图所示，其中粉色的是单轴碰撞后计算的速度。</p><p><img src="/2020/07/28/Canvas系列（14）：实战-小球碰撞/7.png" alt="单轴碰撞后的速度"></p><p>计算合速度（紫色箭头），如下：</p><p><img src="/2020/07/28/Canvas系列（14）：实战-小球碰撞/8.png" alt="碰撞后的合速度"></p><p>当然我们上面的坐标系都是旋转后的，现在我们再把坐标系旋转回去，新的紫色箭头就是最终的原始坐标系碰撞后的合速度。</p><p><img src="/2020/07/28/Canvas系列（14）：实战-小球碰撞/9.png" alt="碰撞后的合速度"></p><p>计算双轴碰撞的整体步骤就是上面这几步，是不是还挺复杂的？<strong>主要思路就是把双轴碰撞通过旋跟速度的分解转化为单轴碰撞，然后计算出单轴运动后的速度，再进行运动的合成，算出合速度后再把坐标系旋转回去。</strong></p><h2 id="双轴碰撞的代码实现"><a href="#双轴碰撞的代码实现" class="headerlink" title="双轴碰撞的代码实现"></a>双轴碰撞的代码实现</h2><p>首先需要计算旋转的角度，只要三行代码，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dx = ball1.x - ball0.x;</span><br><span class="line"><span class="keyword">let</span> dy = ball1.y - ball0.y;</span><br><span class="line"><span class="keyword">let</span> angle = <span class="built_in">Math</span>.atan2(dy, dx);</span><br></pre></td></tr></table></figure><p>这里用到了一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2" target="_blank" rel="noopener">Math.atan2</a>的函数，这个是Canvas中常用的一种计算角度的方法，如图dy与dx使用<code>Math.atan2</code>后的结果就是红色线与x轴的夹角。</p><p><img src="/2020/07/28/Canvas系列（14）：实战-小球碰撞/10.png" alt="旋转夹角计算"></p><p>接下来就是计算旋转了，为了方便计算，我们假设左边小球（这里假设左边小球是ball0，右边的是ball1）的圆心坐标是(0,0)，等我们把一切都计算完后，在把各个位置的坐标加上原来小球的圆心位置坐标就可以了。我们先计算以左侧圆心为(0，0)时，旋转后的圆心坐标，如图：</p><p><img src="/2020/07/28/Canvas系列（14）：实战-小球碰撞/11.png" alt="旋转后"></p><p>左侧圆就是(0,0)，右侧圆可以根据三角函数来计算：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sin = <span class="built_in">Math</span>.sin(angle);</span><br><span class="line"><span class="keyword">let</span> cos = <span class="built_in">Math</span>.cos(angle);</span><br><span class="line"><span class="comment">// 左侧小球旋转后小球的位置</span></span><br><span class="line"><span class="keyword">let</span> x0 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> y0 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 右侧小球旋转后小球的位置</span></span><br><span class="line"><span class="keyword">let</span> x1 = dx * cos + dy * sin;</span><br><span class="line"><span class="keyword">let</span> y1 = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>未旋转前，各小球的速度vx和vy如下图蓝色部分：</p><p><img src="/2020/07/28/Canvas系列（14）：实战-小球碰撞/12.png" alt="未旋转前的速度分量"></p><p>旋转以后，为了方便查看我添加了两条垂直于x轴的红线，如图，现在需要通过角度和原来的vx月vy，计算出旋转后的速度分量。</p><p><img src="/2020/07/28/Canvas系列（14）：实战-小球碰撞/13.png" alt="旋转后的速度分量"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 旋转后小球0的速度分量</span></span><br><span class="line"><span class="keyword">let</span> vx0 = ball0.vx * cos + ball0.vy * sin;</span><br><span class="line"><span class="keyword">let</span> vy0 = ball0.vy * cos - ball0.vx * sin;</span><br><span class="line"><span class="comment">// 旋转后小球1的速度分量</span></span><br><span class="line"><span class="keyword">let</span> vx1 = ball1.vx * cos + ball1.vy * sin;</span><br><span class="line"><span class="keyword">let</span> vy1 = ball1.vy * cos - ball1.vx * sin;</span><br></pre></td></tr></table></figure><p>一定要注意上述代码中符号的问题，我们拿左边的小球（ball0）速度来说，蓝色的两个速度可以分解到新的坐标系中，如下图，紫色的箭头表示分解后的速度，理论上<code>ball0.vx * cos</code>为图中v1的速度，<code>ball0.vy * sin</code>为图中v2的速度，两个速度的合速度的大小是左边速度（v1）的大小减去右边速度（v2）的大小，但是由于Canvas中y轴是向下的，所以图中的情况<code>ball0.vy</code>是朝上的，也就是<code>ball0.vy</code>是一个负数，所以他算出来的右边的速度（v2）也是一个负数，所以两个直接相加就是最终的合速度了。同样的vy的合速度也是一样的。</p><p><img src="/2020/07/28/Canvas系列（14）：实战-小球碰撞/14.png" alt="计算公式加减号问题"></p><p>从上面代码中，我们可以看到计算x轴的分量和y轴的分量其实都是一个模式，这个后面我们可以抽取一个方法。同样的你会发现上面的x1也是遵循这样的公式，y1我们没有计算直接写的0，其实y1也是符合<code>y1 = dy * cos - dx * sin;</code>的，由图我们可以很直观的看到<code>dy * cos</code>和<code>dx * sin</code>是相同的。其实对于Canvas来说，几乎所有的坐标旋转都是这个套路，一定要牢记。</p><p>接下来就是激动人心的时刻了，我们需要对旋转后x轴进行单轴碰撞了，代码和上面的单轴碰撞的公式几乎是一致的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vxTotal = vx0 - vx1;</span><br><span class="line">vx0 = ((ball0.mass - ball1.mass) * vx0 + <span class="number">2</span> * ball1.mass * vx1) /</span><br><span class="line">      (ball0.mass + ball1.mass);</span><br><span class="line">vx1 = vxTotal + vx0;</span><br><span class="line"><span class="comment">// 两小球的x坐标加上速度 计算出新的x坐标</span></span><br><span class="line">x0 += vx0;</span><br><span class="line">x1 += vx1;</span><br></pre></td></tr></table></figure><p>现在我们碰撞完了，需要对坐标系进行旋转回去，上面旋转了<code>angle</code>角度，旋转回去相当于旋转了<code>-angle</code>，现在是时候展示三角函数的两个等式了：</p><p>$$<br>  sin{-\theta} = -sin \theta \\<br>  cos{-\theta} = cos \theta<br>$$</p><p>如果公式忘了，下面这个图会更直观：</p><p><img src="/2020/07/28/Canvas系列（14）：实战-小球碰撞/15.png" alt="三角函数图像"></p><p>现在我们只要把负的角度代入上面的函数就好了，所以有如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相对于ball0原点为圆心时 旋转回去的坐标</span></span><br><span class="line"><span class="keyword">let</span> x0Final = x0 * cos - y0 * sin;</span><br><span class="line"><span class="keyword">let</span> y0Final = y0 * cos + x0 * sin;</span><br><span class="line"><span class="keyword">let</span> x1Final = x1 * cos - y1 * sin;</span><br><span class="line"><span class="keyword">let</span> y1Final = y1 * cos + x1 * sin;</span><br><span class="line"><span class="comment">// 相对于 原来的坐标</span></span><br><span class="line">ball1.x = ball0.x + x1Final;</span><br><span class="line">ball1.y = ball0.y + y1Final;</span><br><span class="line">ball0.x = ball0.x + x0Final;</span><br><span class="line">ball0.y = ball0.y + y0Final;</span><br></pre></td></tr></table></figure><p>同样的，我们也需要对速度进行旋转：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 速度旋转回去</span></span><br><span class="line">ball0.vx = vx0 * cos - vy0 * sin;</span><br><span class="line">ball0.vy = vy0 * cos + vx0 * sin;</span><br><span class="line">ball1.vx = vx1 * cos - vy1 * sin;</span><br><span class="line">ball1.vy = vy1 * cos + vx1 * sin;</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCollision</span>(<span class="params">ball0,ball1</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dx = ball1.x - ball0.x;</span><br><span class="line">  <span class="keyword">let</span> dy = ball1.y - ball0.y;</span><br><span class="line">  <span class="keyword">let</span> dist = <span class="built_in">Math</span>.sqrt(dx * dx + dy * dy);</span><br><span class="line">  <span class="comment">// 检测冲突</span></span><br><span class="line">  <span class="keyword">if</span> (dist &lt; ball0.radius + ball1.radius) &#123;</span><br><span class="line">    <span class="keyword">let</span> angle = <span class="built_in">Math</span>.atan2(dy, dx);</span><br><span class="line">    <span class="keyword">let</span> sin = <span class="built_in">Math</span>.sin(angle);</span><br><span class="line">    <span class="keyword">let</span> cos = <span class="built_in">Math</span>.cos(angle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左侧小球旋转后小球的位置</span></span><br><span class="line">    <span class="keyword">let</span> x0 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> y0 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 右侧小球旋转后小球的位置</span></span><br><span class="line">    <span class="keyword">let</span> x1 = dx * cos + dy * sin;</span><br><span class="line">    <span class="keyword">let</span> y1 = <span class="number">0</span>; <span class="comment">// 或者 y1 = dy * cos - dx * sin;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 旋转后小球0的速度分量</span></span><br><span class="line">    <span class="keyword">let</span> vx0 = ball0.vx * cos + ball0.vy * sin;</span><br><span class="line">    <span class="keyword">let</span> vy0 = ball0.vy * cos - ball0.vx * sin;</span><br><span class="line">    <span class="comment">// 旋转后小球1的速度分量</span></span><br><span class="line">    <span class="keyword">let</span> vx1 = ball1.vx * cos + ball1.vy * sin;</span><br><span class="line">    <span class="keyword">let</span> vy1 = ball1.vy * cos - ball1.vx * sin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> vxTotal = vx0 - vx1;</span><br><span class="line">    vx0 = ((ball0.mass - ball1.mass) * vx0 + <span class="number">2</span> * ball1.mass * vx1) /</span><br><span class="line">          (ball0.mass + ball1.mass);</span><br><span class="line">    vx1 = vxTotal + vx0;</span><br><span class="line">    <span class="comment">// 两小球的x坐标加上速度 计算出新的x坐标</span></span><br><span class="line">    x0 += vx0;</span><br><span class="line">    x1 += vx1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相对于ball0原点为圆心时 旋转回去的坐标</span></span><br><span class="line">    <span class="keyword">let</span> x0Final = x0 * cos - y0 * sin;</span><br><span class="line">    <span class="keyword">let</span> y0Final = y0 * cos + x0 * sin;</span><br><span class="line">    <span class="keyword">let</span> x1Final = x1 * cos - y1 * sin;</span><br><span class="line">    <span class="keyword">let</span> y1Final = y1 * cos + x1 * sin;</span><br><span class="line">    <span class="comment">// 相对于 原来的坐标</span></span><br><span class="line">    ball1.x = ball0.x + x1Final;</span><br><span class="line">    ball1.y = ball0.y + y1Final;</span><br><span class="line">    ball0.x = ball0.x + x0Final;</span><br><span class="line">    ball0.y = ball0.y + y0Final;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 速度旋转回去</span></span><br><span class="line">    ball0.vx = vx0 * cos - vy0 * sin;</span><br><span class="line">    ball0.vy = vy0 * cos + vx0 * sin;</span><br><span class="line">    ball1.vx = vx1 * cos - vy1 * sin;</span><br><span class="line">    ball1.vy = vy1 * cos + vx1 * sin;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时把两小球y方向上的速断放开：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">balls.push(<span class="keyword">new</span> Ball(context,&#123;</span><br><span class="line">  x:<span class="number">100</span>,</span><br><span class="line">  y:<span class="number">190</span>,</span><br><span class="line">  vx:<span class="number">4</span>,</span><br><span class="line">  vy:<span class="number">2</span>,</span><br><span class="line">  <span class="comment">// ay:0.5,</span></span><br><span class="line">  color:<span class="string">'red'</span>,</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">balls.push(<span class="keyword">new</span> Ball(context,&#123;</span><br><span class="line">  x:canvas.width - <span class="number">100</span>,</span><br><span class="line">  y:<span class="number">190</span>,</span><br><span class="line">  vx:<span class="number">-3</span>,</span><br><span class="line">  vy:<span class="number">2</span>,</span><br><span class="line">  <span class="comment">// ay:0.5,</span></span><br><span class="line">  color:<span class="string">'blue'</span>,</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>此时的效果如下：</p><p><img src="/2020/07/28/Canvas系列（14）：实战-小球碰撞/16.gif" alt="小球碰撞"></p><p>我们在计算小球旋转的时候有大量相同的代码，现在我们可以抽出一个方法，来优化一下上面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rotate</span> (<span class="params">x, y, sin, cos, reverse</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    x: (reverse) ? (x * cos + y * sin) : (x * cos - y * sin),</span><br><span class="line">    y: (reverse) ? (y * cos - x * sin) : (y * cos + x * sin)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkCollision</span>(<span class="params">ball0,ball1</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dx = ball1.x - ball0.x;</span><br><span class="line">  <span class="keyword">let</span> dy = ball1.y - ball0.y;</span><br><span class="line">  <span class="keyword">let</span> dist = <span class="built_in">Math</span>.sqrt(dx * dx + dy * dy);</span><br><span class="line">  <span class="comment">// 检测冲突</span></span><br><span class="line">  <span class="keyword">if</span> (dist &lt; ball0.radius + ball1.radius) &#123;</span><br><span class="line">    <span class="keyword">let</span> angle = <span class="built_in">Math</span>.atan2(dy, dx);</span><br><span class="line">    <span class="keyword">let</span> sin = <span class="built_in">Math</span>.sin(angle);</span><br><span class="line">    <span class="keyword">let</span> cos = <span class="built_in">Math</span>.cos(angle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// boll0旋转后小球的位置</span></span><br><span class="line">    <span class="keyword">let</span> pos0 = &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">// boll1旋转后小球的位置</span></span><br><span class="line">    <span class="keyword">let</span> pos1 = rotate(dx, dy, sin, cos, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// ball0旋转后的速度</span></span><br><span class="line">    <span class="keyword">let</span> vel0 = rotate(ball0.vx, ball0.vy, sin, cos, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// ball1旋转后的速度</span></span><br><span class="line">    <span class="keyword">let</span> vel1 = rotate(ball1.vx, ball1.vy, sin, cos, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> vxTotal = vel0.x - vel1.x;</span><br><span class="line">    vel0.x = ((ball0.mass - ball1.mass) * vel0.x + <span class="number">2</span> * ball1.mass * vel1.x) /</span><br><span class="line">              (ball0.mass + ball1.mass);</span><br><span class="line">    vel1.x = vxTotal + vel0.x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 两小球的x坐标加上速度 计算出新的x坐标</span></span><br><span class="line">    pos0.x += vel0.x;</span><br><span class="line">    pos1.x += vel1.x;</span><br><span class="line">    <span class="comment">// 相对于ball0原点为圆心时 旋转回去的坐标</span></span><br><span class="line">    <span class="keyword">let</span> pos0F = rotate(pos0.x, pos0.y, sin, cos, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">let</span> pos1F = rotate(pos1.x, pos1.y, sin, cos, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 相对于 原来的坐标</span></span><br><span class="line">    ball1.x = ball0.x + pos1F.x;</span><br><span class="line">    ball1.y = ball0.y + pos1F.y;</span><br><span class="line">    ball0.x = ball0.x + pos0F.x;</span><br><span class="line">    ball0.y = ball0.y + pos0F.y;</span><br><span class="line">    <span class="comment">// 速度旋转回去</span></span><br><span class="line">    <span class="keyword">let</span> vel0F = rotate(vel0.x, vel0.y, sin, cos, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">let</span> vel1F = rotate(vel1.x, vel1.y, sin, cos, <span class="literal">false</span>);</span><br><span class="line">    ball0.vx = vel0F.x;</span><br><span class="line">    ball0.vy = vel0F.y;</span><br><span class="line">    ball1.vx = vel1F.x;</span><br><span class="line">    ball1.vy = vel1F.y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码基本上可以使用了，但是还是有点问题。在多个小球的情况下，当两个小球相撞的时候，上述33行和34行代码中因为加了速度，如果加的速度过大的话，就可以能会导致与其他地方的小球碰撞，为了规避这种问题的产生，碰撞后，碰撞的两个小球的位置刚好移动到没有碰上，也就是两小球刚好相切（外切）。修改上述方法33行和34代码改成下面这个样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 速度的绝对值</span></span><br><span class="line"><span class="keyword">var</span> absV = <span class="built_in">Math</span>.abs(vel0.x) + <span class="built_in">Math</span>.abs(vel1.x);</span><br><span class="line"><span class="comment">// 小球重叠的距离 也就是两个小球最终总共需要移开的距离才能保证两球刚好相切（外切）</span></span><br><span class="line"><span class="comment">// 由于这里只走了一帧 所以这个距离也就是实际的速度之和</span></span><br><span class="line"><span class="keyword">let</span> overlap = (ball0.radius + ball1.radius) - <span class="built_in">Math</span>.abs(pos0.x - pos1.x);</span><br><span class="line"><span class="comment">// 速度 除以 absV 就是速度所占的比例 再乘以 overlap 是当前小球这一帧需要走的距离</span></span><br><span class="line"><span class="comment">// 两小球总过走的距离是 overlap</span></span><br><span class="line">pos0.x += vel0.x / absV * overlap;</span><br><span class="line">pos1.x += vel1.x / absV * overlap;</span><br></pre></td></tr></table></figure><p>最后把小球变成多个就可以了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> balls = [];</span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">'red'</span>,<span class="string">'blue'</span>,<span class="string">'yellow'</span>,<span class="string">'green'</span>,<span class="string">'orange'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  balls.push(<span class="keyword">new</span> Ball(context,&#123;</span><br><span class="line">    x: (i + <span class="number">1</span>) * <span class="number">50</span>,</span><br><span class="line">    y: <span class="number">190</span>,</span><br><span class="line">    radius: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">15</span>),</span><br><span class="line">    vx: <span class="built_in">Math</span>.random() * <span class="number">6</span> - <span class="number">3</span>,</span><br><span class="line">    vy: <span class="built_in">Math</span>.random() * <span class="number">6</span> - <span class="number">3</span>,</span><br><span class="line">    color: colors[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * colors.length)],</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2020/07/28/Canvas系列（14）：实战-小球碰撞/17.gif" alt="完整效果"></p><p>完整代码请点击<a href="https://github.com/KaiOrange/canvas-demo/blob/master/14/05.html" target="_blank" rel="noopener">这里</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;两小球碰撞是Canvas非常经典的案例，他是一个很简单的需求，但做起来却非常复杂。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;小球移动操作&quot;&gt;&lt;a href=&quot;#小球移动操作&quot; class=&quot;headerlink&quot; title=&quot;小球移动操作&quot;&gt;&lt;/a&gt;小球移动操作&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="Canvas" scheme="https://www.kai666666.top/categories/Canvas/"/>
    
    
      <category term="Canvas" scheme="https://www.kai666666.top/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>Keep APP技术研究</title>
    <link href="https://www.kai666666.top/2020/07/14/Keep-APP%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    <id>https://www.kai666666.top/2020/07/14/Keep-APP%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/</id>
    <published>2020-07-14T02:03:23.000Z</published>
    <updated>2020-07-14T09:47:26.320Z</updated>
    
    <content type="html"><![CDATA[<p>最近在研究运动软件<a href="https://www.gotokeep.com/" target="_blank" rel="noopener">Keep</a>，就是那个<code>自律给我自由</code>的Keep。主要方法是使用<a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">Charles</a>来抓包，然后查看接口。由于<code>Charles</code>是一款Mac的应用，所以<code>Windows</code>系统，可能不能实践了。另外安卓手机限制不能抓包HTTPS的协议，所以也不能实践了。</p><p>现在分享一下我的研究成果，本文可能触及到Keep软件的一些特殊操作，大家谨慎使用，本文仅供学习和交流使用，如果侵犯到Keep的相关利益，请联系我。</p><hr><p>Keep是典型的混合式开发，也就是<code>前端H5 + 后端 + 移动端（安卓和iOS）</code>，大多界面都是使用了前端技术开发的，主要前端框架是基于VUE来做的。</p><h2 id="主要域名"><a href="#主要域名" class="headerlink" title="主要域名"></a>主要域名</h2><blockquote><p>后端服务域名：<a href="https://api.gotokeep.com" target="_blank" rel="noopener">https://api.gotokeep.com</a><br>主站H5：<a href="https://show.gotokeep.com" target="_blank" rel="noopener">https://show.gotokeep.com</a><br>活动等H5：<a href="https://m.gotokeep.com" target="_blank" rel="noopener">https://m.gotokeep.com</a><br>静态资源CDN：<a href="https://static1.keepcdn.com" target="_blank" rel="noopener">https://static1.keepcdn.com</a><br>监控：<a href="https://apm.gotokeep.com" target="_blank" rel="noopener">https://apm.gotokeep.com</a><br>智能设备：<a href="https://kit.gotokeep.com" target="_blank" rel="noopener">https://kit.gotokeep.com</a></p></blockquote><h2 id="userAgent"><a href="#userAgent" class="headerlink" title="userAgent"></a>userAgent</h2><p><code>userAgent</code>是混合开发中，H5用来识别APP内部与外部的重要依据。前端可以通过<code>JavaScript</code>代码<code>window.navigator.userAgent</code>来获取，<code>Keep</code>的userAgent`如下：</p><blockquote><p>Mozilla/5.0 (iPhone; CPU iPhone OS 13_5_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148;Keep/6.43.0 (iPhone; iOS 13.5.1; Scale/2.00);Keep/6.43.0 (iPhone; iOS 13.5.1; Scale/2.00)</p></blockquote><p>当然不同系统是不一样的，其中最重要的是最后<code>Keep/版本号(其他信息)</code>这一段，至于为什么要写2遍，我也不清楚，难道客户端植入的时候多写了一遍？</p><h2 id="调试页面"><a href="#调试页面" class="headerlink" title="调试页面"></a>调试页面</h2><p>Keep线上的页面都是线上环境，调试线上环境的其实也没有多大的意义。由于我们拿不到Keep的源代码，所以只能通过线上代码简单地看看Keep页面的结构。</p><p>Keep使用了<code>vue + vue-router + vuex</code>这样的框架组合，它的页面链接的最后一级是用户的userId，我们以“我的等级”页面为例，如：<code>https://show.gotokeep.com/experience/grades/xxxxxxxxxxxxxxxxxxxxxxxx?kg=16</code>其中<code>xxxxxxxxxxxxxxxxxxxxxxxx</code>就是userId，由于用户的userId是隐私数据，所以我就那x来代替了（下面所有有userId的地方，我都会用<code>xxxxxxxxxxxxxxxxxxxxxxxx</code>来代替）。</p><p>浏览器直接打开这个页面，发现报错了，仔细一看，你会发现是接口<code>https://api.gotokeep.com/diamond/v1/users/xxxxxxxxxxxxxxxxxxxxxxxx/privilegeWall/levels</code>返回了<code>401</code>，接口<code>401</code>说明没有授权。为了让页面实现在Keep中同样的效果，可以做下面的几步：</p><ol><li><p>让H5页面识别浏览器为Keep站内。</p><p> 要识别站内就是使用上面的<code>userAgent</code>，打开开发者工具，然后选择<code>Network conditions</code>面板，去掉<code>Select automatically</code>的勾选，然后把上面的<code>userAgent</code>粘贴到下面的输入框中，如下，然后刷新一下<code>userAgent</code>就生效了。</p><p> <img src="/2020/07/14/Keep-APP技术研究/1.png" alt="修改userAgent"></p></li><li><p>获取cookie。</p><p> Keep接口认证是基于<code>JWT</code>来实现的。我们使用<code>Charles</code>来查看任一接口的<code>cookie</code>，会发现有一个<code>authorization</code>的字段，这个就是<code>JWT</code>的关键，如下：</p><p> <img src="/2020/07/14/Keep-APP技术研究/2.png" alt="查看cookie"></p></li><li><p>设置cookie。</p><p> 为了页面能正常运行，我们把所有的<code>cookie</code>信息，都设置进去。打开浏览器的开发者工具，然后依次把<code>cookie</code>粘贴进去，如下：</p><p> <img src="/2020/07/14/Keep-APP技术研究/3.png" alt="设置cookie"></p></li></ol><p>此时刷新页面，可以看到页面已经可以正常运行了，如下：</p><p><img src="/2020/07/14/Keep-APP技术研究/4.png" alt="运行的页面"></p><h2 id="客户端事件"><a href="#客户端事件" class="headerlink" title="客户端事件"></a>客户端事件</h2><p>客户端事件是H5和客户端（这里只有移动端）交互的指令，其实就是一个特定协议的字符串，前端使用<code>location.href = 客户端事件字符串</code>来执行客户端事件，在Keep中为了方便调试，也可以扫码来执行这些事件。举个例子，打开webview的事件是<code>keep://webview/</code>后面跟着encode的URI就可以实现跳转页面了，比如要使用Keep来跳转本博客，就可以如下：<code>keep://webview/https%3a%2f%2fwww.kai666666.top%2f</code>，你可以使用<a href="http://tool.chinaz.com/tools/urlencode.aspx" target="_blank" rel="noopener">这个工具</a>来encode，把刚才的事件，转换为二维码，如下：</p><p><img src="/2020/07/14/Keep-APP技术研究/5.png" alt="二维码"></p><p>现在打开Keep扫一扫，上面的二维码，你就可以用Keep进入本博客网站了。要把字符串转换为二维码可以使用<a href="https://cli.im/text" target="_blank" rel="noopener">草料二维码</a>。</p><p>在<code>https://api.gotokeep.com/config/v2/basic?refresh=true</code>接口中定义了更多的事件：</p><table><thead><tr><th style="text-align:center">描述</th><th style="text-align:left">事件</th></tr></thead><tbody><tr><td style="text-align:center">精选</td><td style="text-align:left">keep://discover_web</td></tr><tr><td style="text-align:center">训练</td><td style="text-align:left">keep://discover_course</td></tr><tr><td style="text-align:center">饮食</td><td style="text-align:left">keep://discover_food</td></tr><tr><td style="text-align:center">商城</td><td style="text-align:left">keep://discover_store</td></tr><tr><td style="text-align:center">精选</td><td style="text-align:left">keep://discovery/explore</td></tr><tr><td style="text-align:center">训练</td><td style="text-align:left">keep://discovery/course</td></tr><tr><td style="text-align:center">攻略</td><td style="text-align:left">keep://discovery/guide</td></tr><tr><td style="text-align:center">饮食</td><td style="text-align:left">keep://discovery/diet</td></tr><tr><td style="text-align:center">商城</td><td style="text-align:left">keep://discovery/product</td></tr><tr><td style="text-align:center">推荐</td><td style="text-align:left">keep://hottabs/hot</td></tr><tr><td style="text-align:center">热门视频</td><td style="text-align:left">keep://hottabs/video</td></tr><tr><td style="text-align:center">运动时刻</td><td style="text-align:left">keep://hottabs/story</td></tr><tr><td style="text-align:center">training_训练课程</td><td style="text-align:left">keep://discover_course/</td></tr><tr><td style="text-align:center">activity_热门活动</td><td style="text-align:left">keep://hot_activities</td></tr><tr><td style="text-align:center">hashtag_话题讨论</td><td style="text-align:left">keep://hashtags_index</td></tr><tr><td style="text-align:center">group_小组推荐</td><td style="text-align:left">keep://groups_index/</td></tr><tr><td style="text-align:center">kol_达人推荐</td><td style="text-align:left">keep://recommend_keepers/</td></tr><tr><td style="text-align:center">article_精选文章</td><td style="text-align:left">keep://selections</td></tr><tr><td style="text-align:center">热门</td><td style="text-align:left">keep://timeline/hot</td></tr><tr><td style="text-align:center">关注</td><td style="text-align:left">keep://timeline/follow</td></tr><tr><td style="text-align:center">逛逛</td><td style="text-align:left">keep://timeline/wander</td></tr><tr><td style="text-align:center">训练</td><td style="text-align:left">keep://homepage/content?tabId=ZnVsbENvbnRlbnQ=</td></tr><tr><td style="text-align:center">跑步</td><td style="text-align:left">keep://homepage/running?tabId=cnVubmluZw==</td></tr><tr><td style="text-align:center">瑜伽</td><td style="text-align:left">keep://homepage/yoga?tabId=eW9nYQ==</td></tr><tr><td style="text-align:center">行走</td><td style="text-align:left">keep://homepage/hiking?tabId=aGlraW5n</td></tr><tr><td style="text-align:center">骑行</td><td style="text-align:left">keep://homepage/cycling?tabId=Y3ljbGluZw==</td></tr><tr><td style="text-align:center">Kit</td><td style="text-align:left">keep://homepage/keloton?tabId=a2Vsb3Rvbg==</td></tr><tr><td style="text-align:center">数据中心</td><td style="text-align:left">keep://datacenter?type=all&amp;period=day</td></tr><tr><td style="text-align:center">跑步历史记录</td><td style="text-align:left">keep://datacenter?type=running&amp;period=day</td></tr><tr><td style="text-align:center">每周目标</td><td style="text-align:left">keep://weeklypurpose</td></tr><tr><td style="text-align:center">身体档案</td><td style="text-align:left">keep://bodydata</td></tr><tr><td style="text-align:center">运动能力</td><td style="text-align:left">keep://physical_test_list</td></tr><tr><td style="text-align:center">运动概况</td><td style="text-align:left">keep://physical_summary</td></tr><tr><td style="text-align:center">运动日记</td><td style="text-align:left"><a href="https://show.gotokeep.com/usersfulldiary" target="_blank" rel="noopener">https://show.gotokeep.com/usersfulldiary</a></td></tr><tr><td style="text-align:center">步数记录</td><td style="text-align:left">keep://steps_dashboard</td></tr><tr><td style="text-align:center">连接应用和设备</td><td style="text-align:left">keep://oauth/list</td></tr><tr><td style="text-align:center">我的收藏</td><td style="text-align:left">keep://my_favorites</td></tr><tr><td style="text-align:center">我的活动</td><td style="text-align:left">keep://activities</td></tr><tr><td style="text-align:center">训练营历史</td><td style="text-align:left">keep://bootcamp/history</td></tr><tr><td style="text-align:center">我的路线</td><td style="text-align:left">keep://my_running_routes</td></tr><tr><td style="text-align:center">我的运动小队</td><td style="text-align:left"><a href="https://show.gotokeep.com/outdoor/groups/list" target="_blank" rel="noopener">https://show.gotokeep.com/outdoor/groups/list</a></td></tr><tr><td style="text-align:center">我的最佳成绩</td><td style="text-align:left">keep://running/best_records</td></tr><tr><td style="text-align:center">我的 Class</td><td style="text-align:left">keep://classes/mine</td></tr><tr><td style="text-align:center">购物车</td><td style="text-align:left">keep://shopping_cart</td></tr><tr><td style="text-align:center">我的钱包</td><td style="text-align:left"><a href="https://show.gotokeep.com/wallet" target="_blank" rel="noopener">https://show.gotokeep.com/wallet</a></td></tr><tr><td style="text-align:center">优惠券</td><td style="text-align:left">keep://store_coupons</td></tr><tr><td style="text-align:center">购买记录</td><td style="text-align:left">keep://purchase_history</td></tr><tr><td style="text-align:center">Keepland 课程</td><td style="text-align:left"><a href="https://keepland.gotokeep.com/my_course?pulldownrefresh=true" target="_blank" rel="noopener">https://keepland.gotokeep.com/my_course?pulldownrefresh=true</a></td></tr></tbody></table><p>从上面可以看到很多<code>https://show.gotokeep.com</code>开头的地址用Keep扫码也是可以直接进入的，但是我们自己的<code>https</code>网站却不能，可见Keep对自己的白名单内的域名做了特殊处理（相当于其他页面使用了<code>keep://webview/</code>事件）。</p><h2 id="小应用"><a href="#小应用" class="headerlink" title="小应用"></a>小应用</h2><p>Keep并没有提供一种查看自己跑了多少个全马，或者跑了多少个半马这样的功能。现在我们写个脚本把自己的跑步数据存入我们自己的数据库中，并通过SQL查询出我们跑了多少个半马。</p><p>这里假设你已经安装了<code>MySQL</code>，并且已经建立了一个名叫<code>keep_running</code>的数据库。</p><p>建表脚本如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> running_data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> running_data (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  statsType <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  trainingCourseType <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">subtype</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  statsName <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  doneDate <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  icon <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  statsSchema <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  workoutFinishTimes <span class="built_in">INT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">duration</span> <span class="built_in">INT</span> <span class="literal">NULL</span>,</span><br><span class="line">  distance <span class="built_in">INT</span> <span class="literal">NULL</span>,</span><br><span class="line">  steps <span class="built_in">INT</span> <span class="literal">NULL</span>,</span><br><span class="line">  kmDistance <span class="keyword">DOUBLE</span> <span class="literal">NULL</span>,</span><br><span class="line">  calorie <span class="built_in">INT</span> <span class="literal">NULL</span>,</span><br><span class="line">  averagePace <span class="keyword">DOUBLE</span> <span class="literal">NULL</span>,</span><br><span class="line">  averageSpeed <span class="keyword">DOUBLE</span> <span class="literal">NULL</span>,</span><br><span class="line">  exerciseInfo <span class="built_in">VARCHAR</span>(<span class="number">500</span>) <span class="literal">NULL</span>,</span><br><span class="line">  statsStatus <span class="built_in">INT</span> <span class="literal">NULL</span>,</span><br><span class="line">  trackWaterMark <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  workoutId <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  vendorSource <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  vendorManufacturer <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  vendorGenre <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  vendorDeviceModel <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  vendorRecordId <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  heartRates <span class="built_in">TEXT</span> <span class="literal">NULL</span>,</span><br><span class="line">  averageHeartRate <span class="keyword">DOUBLE</span> <span class="literal">NULL</span>,</span><br><span class="line">  maxHeartRate <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  isDoubtful <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  logsType <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  statsDate <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  calorieSum <span class="built_in">INT</span> <span class="literal">NULL</span>,</span><br><span class="line">  durationSum <span class="built_in">INT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>要得到自己的跑步数据，可以调用<code>https://api.gotokeep.com/pd/v3/stats/detail</code>接口来获取，由于浏览器端会有跨域的问题，所以我们就直接跑一个node脚本就行了。</p><p>这里需要用到额外的两个库，一个是<a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a>，用来发送http请求的；另一个库就是<a href="https://github.com/mysqljs/mysql" target="_blank" rel="noopener">mysql</a>，用来把数据存到数据库的。大家自己运行npm install一下。</p><p>脚本大致如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>).default</span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host     : <span class="string">"localhost"</span>,</span><br><span class="line">  user     : <span class="string">"root"</span>,</span><br><span class="line">  password : <span class="string">"自己的数据库密码"</span>,</span><br><span class="line">  database : <span class="string">"keep_running"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line">queryAndInsert(connection);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> globalIndex = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryAndInsert</span>(<span class="params">connection,lastDate</span>)</span>&#123;</span><br><span class="line">  axios.get(<span class="string">'https://api.gotokeep.com/pd/v3/stats/detail'</span>, &#123;</span><br><span class="line">    params: &#123; <span class="attr">dateUnit</span>: <span class="string">'all'</span>,<span class="attr">type</span>:<span class="string">'running'</span>,lastDate &#125;,</span><br><span class="line">    withCredentials: <span class="literal">true</span>,</span><br><span class="line">    headers:&#123;</span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span>这里是headers的数据，需要使用你自己的 不然查询会失败的</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sql =</span><br><span class="line">    <span class="string">`INSERT INTO running_data (</span></span><br><span class="line"><span class="string">      id, statsType, trainingCourseType, subtype, statsName,</span></span><br><span class="line"><span class="string">      doneDate, icon, statsSchema, workoutFinishTimes, duration,</span></span><br><span class="line"><span class="string">      distance, steps, kmDistance, calorie, averagePace,</span></span><br><span class="line"><span class="string">      averageSpeed, exerciseInfo, statsStatus, trackWaterMark, workoutId,</span></span><br><span class="line"><span class="string">      vendorSource, vendorManufacturer, vendorGenre, vendorDeviceModel, vendorRecordId,</span></span><br><span class="line"><span class="string">      heartRates, averageHeartRate, maxHeartRate, isDoubtful, logsType,</span></span><br><span class="line"><span class="string">      statsDate, calorieSum, durationSum)</span></span><br><span class="line"><span class="string">      VALUES(?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?, ?,?,?,?,?, ?,?,?);`</span></span><br><span class="line">    <span class="keyword">let</span> data = res.data.data</span><br><span class="line">    <span class="keyword">let</span> lastTimestamp = data.lastTimestamp</span><br><span class="line">    <span class="keyword">if</span> (lastTimestamp === <span class="number">0</span> || !data.records || data.records.length === <span class="number">0</span>) &#123;</span><br><span class="line">      connection.end();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> posts = []</span><br><span class="line">      data.records.forEach(<span class="function"><span class="params">record</span>=&gt;</span>&#123;</span><br><span class="line">        (record.logs||[]).forEach(<span class="function"><span class="params">log</span>=&gt;</span>&#123;</span><br><span class="line">          <span class="keyword">let</span> stats = log.stats</span><br><span class="line">          <span class="keyword">if</span> (stats) &#123;</span><br><span class="line">            stats.vendor = stats.vendor || &#123;&#125;</span><br><span class="line">            stats.heartRate = stats.heartRate || &#123;&#125;</span><br><span class="line">            posts.push([</span><br><span class="line">              stats.id, stats.type, stats.trainingCourseType, stats.subtype, stats.name,</span><br><span class="line">              stats.doneDate, stats.icon, stats.schema, stats.workoutFinishTimes, stats.duration,</span><br><span class="line">              stats.distance, stats.steps, stats.kmDistance, stats.calorie, stats.averagePace,</span><br><span class="line">              stats.averageSpeed, stats.exerciseInfo, stats.status, stats.trackWaterMark, stats.workoutId,</span><br><span class="line">              stats.vendor.source, stats.vendor.manufacturer, stats.vendor.genre, stats.vendor.deviceModel, stats.vendor.vendorRecordId,</span><br><span class="line">              stats.heartRate.heartRates, stats.heartRate.averageHeartRate, stats.heartRate.maxHeartRate, stats.isDoubtful, log.type,</span><br><span class="line">              record.date,  record.calorieSum,  record.durationSum</span><br><span class="line">            ])</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      posts.forEach(<span class="function"><span class="params">post</span>=&gt;</span>&#123;</span><br><span class="line">        connection.query(sql, post, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'成功插入了一条数据：'</span> + globalIndex);</span><br><span class="line">          globalIndex++;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      queryAndInsert(connection,lastTimestamp)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上面<code>headers</code>处，需要换成自己数据的键值对形式，在<code>Charles</code>中获取方式如下：</p><p><img src="/2020/07/14/Keep-APP技术研究/6.png" alt="获取headers数据"></p><p>最后你就可以通过SQL语句查询数据了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全马</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> running_data <span class="keyword">WHERE</span> distance &gt; <span class="number">42195</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> distance <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 半马</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> running_data <span class="keyword">WHERE</span> distance &gt;= <span class="number">21097.5</span> <span class="keyword">and</span>  distance &lt; <span class="number">42195</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> distance <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10公里</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> running_data <span class="keyword">WHERE</span> distance &gt;= <span class="number">10000</span> <span class="keyword">and</span>  distance &lt; <span class="number">21097.5</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> distance <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5公里</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> running_data <span class="keyword">WHERE</span> distance &gt;= <span class="number">5000</span> <span class="keyword">and</span>  distance &lt; <span class="number">10000</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> distance <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>通过数据查询可以看出我自己跑了10个半马了😀。</p><p><img src="/2020/07/14/Keep-APP技术研究/7.png" alt="我的成绩"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在研究运动软件&lt;a href=&quot;https://www.gotokeep.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Keep&lt;/a&gt;，就是那个&lt;code&gt;自律给我自由&lt;/code&gt;的Keep。主要方法是使用&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="运动与健身" scheme="https://www.kai666666.top/categories/%E8%BF%90%E5%8A%A8%E4%B8%8E%E5%81%A5%E8%BA%AB/"/>
    
    
      <category term="Keep" scheme="https://www.kai666666.top/tags/Keep/"/>
    
  </entry>
  
  <entry>
    <title>《33个理财窍门》读书笔记</title>
    <link href="https://www.kai666666.top/2020/06/20/%E3%80%8A33%E4%B8%AA%E7%90%86%E8%B4%A2%E7%AA%8D%E9%97%A8%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.kai666666.top/2020/06/20/%E3%80%8A33%E4%B8%AA%E7%90%86%E8%B4%A2%E7%AA%8D%E9%97%A8%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-06-20T02:29:14.000Z</published>
    <updated>2020-06-20T10:45:47.448Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了一本名叫《33个理财窍门和一份人生理财计划书》的书，由于名字太长，标题就截取了其中一部分。本章记录我觉得有意义的内容。</p><p><img src="/2020/06/20/《33个理财窍门》读书笔记/1.jpg" alt="《33个理财窍门》"></p><hr><h3 id="没有计划，就没有自由"><a href="#没有计划，就没有自由" class="headerlink" title="没有计划，就没有自由"></a>没有计划，就没有自由</h3><p>一个人能不能创造巨富的转折点，往往就在于能否摆脱“依附心态”，奔向“自由”之路。</p><p>其实对于很多人来说，以依附心态过日子反而比较轻松。这是因为只要跟着制定好的规范走，遵从外来的指示、命令，就可以完全不用自己思索，安然度过一生。</p><p>凡是都要自己决定，其实是超乎想象的苦差事，但是这却是造就有钱人和穷人最大不同的地方。</p><p>人不应该只是想“逃避自由”，而应该努力“摆脱依附思维”，从影响我们一生的父母、老师、规划、上司、老板、社会中走出来，建立真正属于自己的人生，然后再飞跃到完全“自由”的人生境地，进而走向与现在财富格局完全不同的人生。</p><h3 id="投入不起眼的工作"><a href="#投入不起眼的工作" class="headerlink" title="投入不起眼的工作"></a>投入不起眼的工作</h3><p>最重要的是，必须先分析这些拥有巨富的人，其脑中的算盘（对欲望的态度）到底和一般人有什么不同，才能找出答案，迈向巨富之路。</p><h3 id="不从众，做出自己的选择"><a href="#不从众，做出自己的选择" class="headerlink" title="不从众，做出自己的选择"></a>不从众，做出自己的选择</h3><p>人类则是在满足了生理需求和安全需求之后，才能踏出人生的第一步。因此，人类的独立非常晚，甚至是动物中最晚的。人类至少要在一年左右的时间才能用自己的双脚站立，而且在这个阶段，仍然称不上独立自主，衣食住行都必须依赖父母。初中毕业就外出工作，是属于早熟型的人。所以，一般说来人生的前十五年，多半还是凡事都得依赖父母才能生活。何况现在有不少人过了20岁，依然继续过着依靠父母的生活，甚至有人念到大学毕业后，还是一直留在家里，衣食住行全部都仰赖父母。</p><p>父母在教育孩子时如果方法错误，就会使孩子脱离不了“依附思维”，使孩子长大后无法成为独立自主的人，将来教育下一代时，同样也会把他养成一个有跟从心态的人，结果世世代代都成了跟从者。所以，在塑造一个人的开创性上，可以说父母的责任重大，必须尽早教育孩子独立自主。</p><h3 id="从喜欢的事做起"><a href="#从喜欢的事做起" class="headerlink" title="从喜欢的事做起"></a>从喜欢的事做起</h3><p>人生中做过最开心，最快乐的事是什么？往往是自己选择（xi huan）的事。</p><p>父母应该从小就多给孩子一些选择的机会，让他好好挣扎迷惘一番，借此培养他的思考能力，并让他从自己的选择中获得肯定。然而，对父母那一代人而言，这样的教育方式不仅令人不安，而且也过于冒险。毕竟在泡沫经济之前的日本（作者是日本人，中国的行情也差不多），只要听从父母的安排，人生就能一帆风顺。然而，这正是有钱人与穷人走上截然不同的人生的开始。</p><h3 id="看清时局，不怕中场转行"><a href="#看清时局，不怕中场转行" class="headerlink" title="看清时局，不怕中场转行"></a>看清时局，不怕中场转行</h3><p>过去，他（指的是大隅彻，书中人物，缺乏自己选择的能力，事业失败者。对不起了，大兄弟，只能这样评价你了🙃）连一次“选择”的机会也没有，但是，现在出现在他眼前的选项却多到令他彷徨，但他必须做出选择，必须自己决定自己何去何从。</p><p>在竞争越来越激烈的时代里，如果不能从小培养孩子的自己选择的能力，恐怕社会上只会出现越来越多的大隅彻。</p><h3 id="反复练习基本功"><a href="#反复练习基本功" class="headerlink" title="反复练习基本功"></a>反复练习基本功</h3><p>每一个成就卓越的人，都是基有恒心和毅力，擅长“反复演练”的人。爱迪生曾经说过：“天才是99%的汗水（努力），加上1%的天分（灵感）。”唯有不断努力加上坚强的意志，才能让1%的天分成功发挥出来。</p><p>聪明的父母深知绝对不能以强硬的手段逼迫孩子，所以常会运用诱导的方式让孩子做出对自己负责的决定。</p><h3 id="从选择中积累经验和锻炼意志力"><a href="#从选择中积累经验和锻炼意志力" class="headerlink" title="从选择中积累经验和锻炼意志力"></a>从选择中积累经验和锻炼意志力</h3><p>当搭便车时，当你心想“好想坐下来”时，如果车厢里只有一个空位，你就只能坐在那个位置上，不管愿不愿意，至少在选择上很轻松简单，不会有犹豫不决的情况。同样的，就算车厢里有五六个空位，只要有谁下一道指令：“坐这里吧！”也不用自己动脑经去想。然而，面对车厢里五六个空位，如果有人对孩子说：“随便坐哪里都好，选一个最喜欢的位置坐下来吧！”别说是小孩子，即使是大人也会犹豫该以什么标准、坐在哪个位置比较好。</p><p>要找到一个标准、做出决定，其实并不是件容易的事，但也因为如此，才显得选择有多么重要。选择，不仅可以训练一个人的思考能力，也能让人发挥想象力，并且还可以从宏观的角度，形成自成一格的独特选择标准。</p><p>优秀的经营者具备宏观的眼光，将自己从各种狭隘的观念中解放出来。他们的想法与行动往往出人意料、不按常理出牌，而且他们也不在乎别人认为自己特立独行，总是坚持走自己的路。</p><h3 id="再忙也要广泛阅读"><a href="#再忙也要广泛阅读" class="headerlink" title="再忙也要广泛阅读"></a>再忙也要广泛阅读</h3><p>不带任何偏见，对任何事情都抱着“放手一试”的态度，能增加许多新的体验。如此一来，就能在各种不同的体验中，发现引起自己好奇心与欲望的事物。而好奇心正是“生存欲望的来源”。若是舍弃了这种欲望，自然无法创造大财富。</p><h3 id="以投资观点取代预算思维"><a href="#以投资观点取代预算思维" class="headerlink" title="以投资观点取代预算思维"></a>以投资观点取代预算思维</h3><p>不管怎么说，一般的上班族想要拥有600万元的年收入，可以说是相当困难，通常只有自己创业，当个企业家才有可能创造这样的财富格局。</p><p>有钱人打的算盘和一般人不一样，他们的所得并不是全部在储蓄和生活费上，绝大部分都是用在投资上，而这就是我所说的投资型思维。</p><p>“预算思考型”绝对无法创造更高的财富格局，以“投资思考型”的方式运用资产才可能创造巨富。</p><h3 id="定期放下工作，沉淀自己"><a href="#定期放下工作，沉淀自己" class="headerlink" title="定期放下工作，沉淀自己"></a>定期放下工作，沉淀自己</h3><p>不回顾、反省过去的人，也无法分析自己目前所处的现况，更无法剖析自我，了解“自己”到底是什么样的人。一个不了解自己的人，又如何善用自身优势，创造财富呢？</p><p>人生在世，如果没有企图心或欲望，自然不会涌生强烈的赚钱动机。“企图心”是一个人能否成功的最大关键，缺乏企图心就像缺少一个勇往直前的引擎。这样的人往往不结婚，不生小孩，不借钱，也不挑战，一生保持“不求有功，但求无过”的消极态度，自然也就与财富无缘（这不是在说我嘛…）。</p><h3 id="把枯燥的工作转换成理财的工具"><a href="#把枯燥的工作转换成理财的工具" class="headerlink" title="把枯燥的工作转换成理财的工具"></a>把枯燥的工作转换成理财的工具</h3><p>如果纯粹只想赚钱，就可以选择进入前景好的明星企业，挑选有潜力的企业去积累财富。</p><p>不论是自由工作者，或是想自行创业的人，若是没有经过审慎的调查、研究就贸然辞职，脱离上班族行列，往往会以失败收场。所以，如果想成功脱离上班族自行创业，建议先从“模仿”做起，如此才能充分掌握业界状况，逐渐走出自己的路。</p><p>那些事业成功的有钱人往往会在事前进行详尽的调查和评估，因此他们做事的成功概率比一般人高，而这也是有钱人默默在做的事：“掌握人生的契机”。</p><p>如果想要增加收入，就必须同时接受工作中“无趣”和“不开心”的事。</p><h3 id="跟在大师身边磨炼专业技能"><a href="#跟在大师身边磨炼专业技能" class="headerlink" title="跟在大师身边磨炼专业技能"></a>跟在大师身边磨炼专业技能</h3><p>应该先想办法跟在顶尖教练，或一流设计师身边工作学习，而不是一开始眼高手低地把自己放在顶尖人物的位置。而且，一旦有机会跟在顶尖人物身边工作，随待在侧，就要抓住机会努力学习。只要愿意努力学习，努力工作，一定可以从这些大师的身上习得想要的技术，而且还可以为你创建个人品牌创造条件。</p><p>模仿成功了才有可能突破，脱离，达到独树一格的境界。因此，进入某个专业领域时，一开始不妨大量模仿，尽情学习。</p><p>想要成为有钱人，就要寻找理财大师或者富豪并加以模仿学习，有意成为经营人才，就要跟在一流的企业家身边学习，即使是替他提公文包，都能从小事中学习大智慧。总而言之，在做任何决定之前都要先分析自己的优缺点，想办法让自己更上一层楼。</p><h3 id="不廉价出售自己的专业"><a href="#不廉价出售自己的专业" class="headerlink" title="不廉价出售自己的专业"></a>不廉价出售自己的专业</h3><p>人生在世，如果不能放宽心胸，便无法打开财富格局，即使赚取万贯财富也没有意义。</p><p>我们一旦贱价求售专业，就容易沦为客户的“奴隶”，唯有摆脱让人操控的思维，不受他人掌控，才能自己掌控时间和人生。</p><p>让自己暂时抛开忙乱的生活，在“孤独”的环境中，才能顿悟工作的意义及财富的追求之道。因此，想要开拓财务格局，跳脱贫困思维，就必须要暂时放下工作，给自己一段独处的时间，好好检视自己的过去、现在和未来。</p><h3 id="发现“能做的事”和“想做的事”"><a href="#发现“能做的事”和“想做的事”" class="headerlink" title="发现“能做的事”和“想做的事”"></a>发现“能做的事”和“想做的事”</h3><p>工作能力强的人，通常会有两个头脑。一个头脑显示出自己强势的一面，另一个头脑则是用来检视那个自信的自己。只要找出自己的武器是什么，就能发现自己“能做的事”以及“想做的事”。</p><h3 id="找到你的人生导师"><a href="#找到你的人生导师" class="headerlink" title="找到你的人生导师"></a>找到你的人生导师</h3><p>一旦养成这种思考问题的习惯，自己的观察力，分析力和思考力就会逐渐提升到人生导师相同的境界。当然，我们这一生可能永远无法到达人生导师的境界，毕竟又些人是天才与一代宗师，所以不妨先从能够学习的对象开始训练自己。</p><p>人生导师并不一定是人，也可以是书本，也有人醉心于某位作家或哲学家，以他们的观点看待人生，将他们的思维与行动当做人生准则。</p><p>技术方面的导师比较容易寻找，可以从他们的丰功伟业中选择自己希望达成的目标或境界。人生导师除了必须是经验丰富，在某一方有杰出贡献的师父，还必须是与你有相同价值观、能愉快相处的人。</p><h3 id="当专才，不当全才"><a href="#当专才，不当全才" class="headerlink" title="当专才，不当全才"></a>当专才，不当全才</h3><p>如果你无法成为别人眼中无可取代的人，也就是如果不能成为“非你不可”的角色，便很难开创巨大的财富格局。若要达到这个目标，就必须在过去学到的“成功模式”上加上自己独特的色彩。</p><h3 id="将金钱与时间投资于自己擅长的领域"><a href="#将金钱与时间投资于自己擅长的领域" class="headerlink" title="将金钱与时间投资于自己擅长的领域"></a>将金钱与时间投资于自己擅长的领域</h3><p>要达到目的，最重要的就是坚持到底。</p><p>我认为实实在在专注于自己的强项，打造专属自己的“成功方程式”，才是成功挣大钱的快捷方式。</p><h3 id="有钱人不迷信证书"><a href="#有钱人不迷信证书" class="headerlink" title="有钱人不迷信证书"></a>有钱人不迷信证书</h3><p>对他们来说，耗费大量金钱与时间才拿到的证书，是辛酸血泪的结晶，在他们眼里，这张证书有如散发着耀眼光芒的“金字招牌”。也因为对证书寄予了厚望，所以才会对辛苦得来的证书如此眷恋与执着。通常耗费的成本与心血越高，就越难以割舍。如果投注的成本能在实际工作中收回，那也值得，然而，大部分的情况是难以如愿，经济学把这种无法收回的成本称为沉没成本（sunk costs）。</p><p>考证书挣大钱早已是过去式，因为专业证书的资格是永久的，取得后，除了犯罪，否则一辈子不会被注销，也就是说，取得证书的人数只会有增无减。</p><p>一辈子只靠一张证书，那是本末倒置了，证书只是增加自己附加价值的工具，让自己更具竞争力，若成了证书的奴隶，完全是误解“目的与结果”的关系。这样的人不仅不懂得实时检视自己的竞争优势与业界的变化，而且难以跳脱“国家证书等于致富”的思维框架。如果一味被一般社会认定的标准牵着走，不开动脑筋思索如何创造财富，最终将被淘汰出局。</p><h3 id="结交有影响力的朋友"><a href="#结交有影响力的朋友" class="headerlink" title="结交有影响力的朋友"></a>结交有影响力的朋友</h3><p>无法赚大钱的人误以为只要提升自己的工作能力与专业技术，在工作中力求表现，就能不断创造财富。然而，如果没有遇到赏识你的人，很难有机会更上一层楼，获得巨富，这是完全不了解“人脉带来财富”的原因。财富，始终脱离不了人情义理，这是千古不变的道理。</p><p>能否认识各个领域的有为人士或实力强大的企业经营者，是让财富更上一层楼的关键点，光凭自己的力量绝对无法做大事业，成功的事业需要他人的一臂之力，特别是有影响力的人。如何认识这些人，并且让他们肯定你、认定你有前途，愿意提携你，是能否创造大财富格局的关键。</p><h3 id="找问题不找借口"><a href="#找问题不找借口" class="headerlink" title="找问题不找借口"></a>找问题不找借口</h3><p>人如果不遭受痛楚，就不会有危机意识，也就无法学到真正重要的事。事实上，许多企业家都是在经历挫折后脱胎换骨，这也是他们为什么那么重视一个人如何在困境中自处的原因。</p><p>一般入面对挫折，大致会有两种反应，一种是“自责”，另一种是“他责”，自责的人会把问题当成自己的责任，他贵的人会一味怪罪别人。根据我的观察，多数人都是用“他责”的态度看问题。然而，责怪他人只会使怨恨的情绪高涨，对于解决问题根本没有任何帮助。我认为与其如此，不如一肩扛起责任，不再找借口，做好反击准备，反而能迈出解决问题的第一步。这样的做法不仅较为理性，也有助于保持身心健康。</p><h3 id="将困境视为磨炼自己的机会"><a href="#将困境视为磨炼自己的机会" class="headerlink" title="将困境视为磨炼自己的机会"></a>将困境视为磨炼自己的机会</h3><p>遇到挫折时，如果能克服困境，就有可能看到柳暗花明后的美景；有时即使努力咬牙撑下去，仍然无法渡过难关，无奈面对破产的命运，但人生难免会有失败，这是人生必经之路。</p><p>重要的是，失败后的应对态度和行动力，这才是决定日后能否东山再起的关键。因为处理失败的态度将影响别人对你和评价。遭遇破产，不是先想到自己，而是将公司的钱优先支付给员工，这样的经营者才有东山冉起的机会。相反，把公司剩下的资产挪为已有，卷款潜逃，这种经营者绝对不会有卷土重来的机会。</p><p>相信只要规规矩矩地还款，机会一定会再次降临， 甚至遇到改变一生的贵人。一个人金钱可以破产，但人格绝对不能破产，希望大家要谨记于心。</p><h3 id="独占不如把饼做大"><a href="#独占不如把饼做大" class="headerlink" title="独占不如把饼做大"></a>独占不如把饼做大</h3><p>把知识或技术分享给为自己带来财富的人，往往会带来更多财富，形成螺旋式的良性循环。连锁美容院的董事长，很大气地向同行公开自己所有的专业知识和经营心得，不仅乐于和他人分享自己的经验，而且从最基本的美容知识与专业美容技术到各项经营诀窍，他都大方地用实例指导同行。</p><p>如果你乐于分享，就能构筑如同蜘蛛网般的人脉网落，轻易网罗有用的情报信息。</p><h3 id="从“侧面”了解对方"><a href="#从“侧面”了解对方" class="headerlink" title="从“侧面”了解对方"></a>从“侧面”了解对方</h3><p>与其为了眼前的小利采取各个击破的强迫推销手段，还不如通过人脉产生联结综合效应来掌握庞大的商机。从某个角度来看，这正是基于分享精神、扩大市场规模的最佳策略。</p><h3 id="真诚待人，贵人处处"><a href="#真诚待人，贵人处处" class="headerlink" title="真诚待人，贵人处处"></a>真诚待人，贵人处处</h3><p>想让带来财富的贵人赏识你，只有时时保持“个人品牌”和“真诚待人”两个轴心的平衡才行。</p><h3 id="不会搞错“论语”和“算盘”的顺序"><a href="#不会搞错“论语”和“算盘”的顺序" class="headerlink" title="不会搞错“论语”和“算盘”的顺序"></a>不会搞错“论语”和“算盘”的顺序</h3><p>贫穷思维者却会冠冕堂皇地说：“即使赚不到钱，还是想回馈社会。”成功拥有巨富的人一开始就不会这么想，他们会在赚取足够的利润之后，才把财富分享给他人，这种做法既符合人情义理，也达到了共享的目的。贫穷思维者往往错置先后顺序。</p><p>事实上，我在借钱给别人时也会慎重思考，尤其是对有过失败经历的人，更是谨慎，因为有些人总是一再重蹈覆辙，接二连三犯同样的错、遭遇相同的失败。明明过去曾因为预算超支而亏损，借到钱之后还是不知节制，完全没有得到教训。我认为不应该借钱给这样的人。</p><h3 id="不花去向不明的冤枉钱"><a href="#不花去向不明的冤枉钱" class="headerlink" title="不花去向不明的冤枉钱"></a>不花去向不明的冤枉钱</h3><p>想要挣到大钱，不能全盘接收别人的做法或想法，一定要有自己的坚持与信念，如果不能悟出成功人士致富的真理，便很容易在人生路上失去方向。</p><h3 id="花钱得来的才能使你成长"><a href="#花钱得来的才能使你成长" class="headerlink" title="花钱得来的才能使你成长"></a>花钱得来的才能使你成长</h3><p>有的时候“花钱得来的”才能使你成长，不是自己的，往往得不到教训。</p><h3 id="认真对待赚到的每一分钱"><a href="#认真对待赚到的每一分钱" class="headerlink" title="认真对待赚到的每一分钱"></a>认真对待赚到的每一分钱</h3><p>财富不会从天上掉下来，每分钱都必须脚踏实地努力耕耘，靠着长期累积而来的良好人际关系才能得到。</p><h3 id="珍惜捡来的100元"><a href="#珍惜捡来的100元" class="headerlink" title="珍惜捡来的100元"></a>珍惜捡来的100元</h3><p>会赚钱的人或是事业有成的人，不会把100元当作小钱看待。不论是100元，还是100万元、1亿元或10亿元，在他们眼里都是一样有价值，他们都会把它用来强化自己的优势。</p><h3 id="把自己当成品牌来经营"><a href="#把自己当成品牌来经营" class="headerlink" title="把自己当成品牌来经营"></a>把自己当成品牌来经营</h3><p>能让他们在竞争中脱颗而出的，是他们不受环境变化影响的实力，以及打造出来的个人品牌。始终如一的理念与核心竞争力，才是在时代潮流中屹立不倒的关键，因为唯有不受潮流影响的理念才会逐渐转化成一种普世价值。</p><h3 id="将“投资”看成“借贷”"><a href="#将“投资”看成“借贷”" class="headerlink" title="将“投资”看成“借贷”"></a>将“投资”看成“借贷”</h3><p>成功的反义词不是失败，而是放弃。只要不放弃，就有机会成功。</p><h3 id="建立多重收入渠道，分散危机"><a href="#建立多重收入渠道，分散危机" class="headerlink" title="建立多重收入渠道，分散危机"></a>建立多重收入渠道，分散危机</h3><p>建立多重收入渠道，是危机管理的铁则。</p><h3 id="永远记得你是谁"><a href="#永远记得你是谁" class="headerlink" title="永远记得你是谁"></a>永远记得你是谁</h3><p>以爱培养人才，即使最后遭到背叛也不埋怨对方，企业经营者要有这样的器量，才能得到员工的忠诚。因为以爱待人，别人才会以爱回报，公司上下一心，组织力就会跟着提升。</p><p>事实上，人生中让人能够真心感谢的机会并不多，所以要不断提醒自己记得感谢。</p><p>一个人由衷感谢的时刻有两个：一个是失去重要的东西时；另一个是功成名就之时。</p><p>当我们在致富的路上前进时，千万不能忘记怀着感谢之心，不骄矜自大，始终保持谦卑，才是事业永续经营的秘诀，个人品牌也才能持续发光发热。</p><blockquote><p>人应该在追求自由的同时，或是得到自由与财富之余，通过爱与创造性的工作和外界联结在一起，借此填补孤独空虛，这也是一个人的人生规划的终极目标。</p><p>懂得分享的人才是真正的有钱人。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近看了一本名叫《33个理财窍门和一份人生理财计划书》的书，由于名字太长，标题就截取了其中一部分。本章记录我觉得有意义的内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/06/20/《33个理财窍门》读书笔记/1.jpg&quot; alt=&quot;《33个理财窍门》&quot;&gt;&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://www.kai666666.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="理财" scheme="https://www.kai666666.top/tags/%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Three.js教程（7）：材质</title>
    <link href="https://www.kai666666.top/2020/05/27/Three.js%E6%95%99%E7%A8%8B%EF%BC%887%EF%BC%89%EF%BC%9A%E6%9D%90%E8%B4%A8/"/>
    <id>https://www.kai666666.top/2020/05/27/Three.js%E6%95%99%E7%A8%8B%EF%BC%887%EF%BC%89%EF%BC%9A%E6%9D%90%E8%B4%A8/</id>
    <published>2020-05-27T04:00:00.000Z</published>
    <updated>2020-06-10T09:51:06.145Z</updated>
    
    <content type="html"><![CDATA[<p>之前说过<code>网格（Mesh） = 几何体（Geometry） + 材质（Material）</code>，也就是一个物体是有它的形状和材质来决定。几何体（Geometry）类似于前端的HTML而材质（Material）类似于前端的CSS，今天我们看一下材质相关的内容。</p><hr><h2 id="Material"><a href="#Material" class="headerlink" title="Material"></a>Material</h2><p><a href="https://threejs.org/docs/index.html#api/en/materials/Material" target="_blank" rel="noopener">Material</a>是所有材质的父类，它内部定义了好多通用的属性和方法，你可以看看它的API，这里就不再重复了，现在我们看看他的子类。</p><h2 id="MeshBasicMaterial"><a href="#MeshBasicMaterial" class="headerlink" title="MeshBasicMaterial"></a>MeshBasicMaterial</h2><p>听名字就知道<a href="https://threejs.org/docs/index.html#api/en/materials/MeshBasicMaterial" target="_blank" rel="noopener">MeshBasicMaterial</a>是最基本的材质，我们之前见过他好几次了，现在再来重温一下它的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 添加一个正方体</span></span><br><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.BoxGeometry(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>,<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;</span><br><span class="line">  color: <span class="string">'#ff0000'</span>,</span><br><span class="line">  wireframe: <span class="literal">true</span>,</span><br><span class="line">  opacity: <span class="number">1</span></span><br><span class="line">  transparent: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">mesh = <span class="keyword">new</span> THREE.Mesh(geometry, material);</span><br><span class="line">scene.add(mesh);</span><br></pre></td></tr></table></figure><p><code>MeshBasicMaterial</code>只有一个参数，即配置项，我们这里设置了4个参数。这里需要注意的是，要使<code>opacity</code>生效那么<code>transparent</code>的值一定要设置成<code>true</code>，此时的效果如下：</p><p><img src="/2020/05/27/Three.js教程（7）：材质/1.png" alt="MeshBasicMaterial"></p><h2 id="MeshDepthMaterial"><a href="#MeshDepthMaterial" class="headerlink" title="MeshDepthMaterial"></a>MeshDepthMaterial</h2><p><a href="https://threejs.org/docs/index.html#api/en/materials/MeshDepthMaterial" target="_blank" rel="noopener">MeshDepthMaterial</a>是一种可以根据距离摄像机的远近而展示不同效果的材质。跟<code>MeshBasicMaterial</code>一样也是有一个参数，即设置项，但是这个材质不能设置颜色。例子中给出的代码跟上面的几乎一模一样。这里需要注意的地方是<code>MeshDepthMaterial</code>材质跟摄像机的远近有着非常重要的联系，所以你需要设置摄像机的<code>near</code>和<code>far</code>来表示到底有多近以及有多远。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第三个参数是near 第四个参数是far</span></span><br><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera( <span class="number">50</span>, <span class="built_in">window</span>.innerWidth / <span class="built_in">window</span>.innerHeight, <span class="number">24</span>, <span class="number">100</span> );</span><br><span class="line"><span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.BoxGeometry(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>,<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshDepthMaterial();</span><br><span class="line">mesh = <span class="keyword">new</span> THREE.Mesh(geometry, material);</span><br><span class="line">scene.add(mesh);</span><br></pre></td></tr></table></figure><p>这一部分最好自己运行一下代码，在代码中可以修改near和far以更直观的体会<code>MeshDepthMaterial</code>的用法。</p><p><img src="/2020/05/27/Three.js教程（7）：材质/2.png" alt="MeshDepthMaterial"></p><h2 id="联合材质"><a href="#联合材质" class="headerlink" title="联合材质"></a>联合材质</h2><p>上面的<code>MeshDepthMaterial</code>材质是一种由摄像机距离来确定的样式的材质，它不能设置颜色，但是大多数的时候我们需要设置一个颜色，那怎么做呢？由上面我们知道<code>MeshBasicMaterial</code>是可以设置颜色的，只要把两种材质联合起来就可以了，这里说的联合材质并不是一种材质，而是把多个材质混合起来的一种办法，要使用联合材质首先需要引入<code>SceneUtils.js</code>文件，该文件必须在<code>three.js</code>的下方引入，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../node_modules/three/examples/js/utils/SceneUtils.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入上面的JS文件后，会多出一个<code>THREE.SceneUtils</code>的类，该类的对象有一个<code>createMultiMaterialObject</code>方法，可以创建多种混合材质的网格（Mesh），具体代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.BoxGeometry(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>,<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> depthMaterial = <span class="keyword">new</span> THREE.MeshDepthMaterial();</span><br><span class="line"><span class="keyword">var</span> colorMaterial = <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;</span><br><span class="line">    color: <span class="string">'#ff0000'</span>,</span><br><span class="line">    transparent: <span class="literal">true</span>,</span><br><span class="line">    blending: THREE.MultiplyBlending</span><br><span class="line">&#125;);</span><br><span class="line">mesh = <span class="keyword">new</span> THREE.SceneUtils.createMultiMaterialObject(geometry, [depthMaterial, colorMaterial]);</span><br><span class="line">scene.add(mesh);</span><br></pre></td></tr></table></figure><p>注意这里的Mesh不再是通过<code>new THREE.Mesh(geometry, material);</code>这样来创建的。此时效果如下：</p><p><img src="/2020/05/27/Three.js教程（7）：材质/3.png" alt="联合材质"></p><h2 id="MeshNormalMaterial"><a href="#MeshNormalMaterial" class="headerlink" title="MeshNormalMaterial"></a>MeshNormalMaterial</h2><p><a href="https://threejs.org/docs/index.html#api/en/materials/MeshNormalMaterial" target="_blank" rel="noopener">MeshNormalMaterial</a>是一种五彩缤纷的材质，它的每一个面的颜色由法向量来决定，用法和<code>MeshBasicMaterial</code>一模一样。示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.BoxGeometry(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>,<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshNormalMaterial(&#123;</span><br><span class="line">  color: <span class="string">'#ff0000'</span>,</span><br><span class="line">&#125;);</span><br><span class="line">mesh = <span class="keyword">new</span> THREE.Mesh(geometry, material);</span><br><span class="line">scene.add(mesh);</span><br></pre></td></tr></table></figure><p>上面虽然设置了颜色，但是可以看到它的颜色并不是由color属性来决定的，运行结果如下：</p><p><img src="/2020/05/27/Three.js教程（7）：材质/4.png" alt="MeshNormalMaterial"></p><h2 id="不同面使用不同的材质"><a href="#不同面使用不同的材质" class="headerlink" title="不同面使用不同的材质"></a>不同面使用不同的材质</h2><p>不同面使用不同的材质很简单，只要把材质传一个数组就可以了，与联合材质不同的是，联合材质是多种材质混合使用，这里是每一个面用了一种材质。在老版本的three.js中有一个名叫<code>MeshFaceMaterial</code>的材质可以让不同面拥有不同的材质，这里就不简绍已经废弃的<code>MeshFaceMaterial</code>了。示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.BoxGeometry(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> mats = [];</span><br><span class="line">mats.push(<span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;<span class="attr">color</span>: <span class="number">0xff0000</span>&#125;));</span><br><span class="line">mats.push(<span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;<span class="attr">color</span>: <span class="number">0x00ff00</span>&#125;));</span><br><span class="line">mats.push(<span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;<span class="attr">color</span>: <span class="number">0x0000ff</span>&#125;));</span><br><span class="line">mats.push(<span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;<span class="attr">color</span>: <span class="string">'orange'</span>&#125;));</span><br><span class="line">mats.push(<span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;<span class="attr">color</span>: <span class="string">'yellow'</span>&#125;));</span><br><span class="line">mats.push(<span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;<span class="attr">color</span>: <span class="string">'grey'</span>&#125;));</span><br><span class="line"></span><br><span class="line">mesh = <span class="keyword">new</span> THREE.Mesh(geometry, mats);</span><br><span class="line">scene.add(mesh);</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2020/05/27/Three.js教程（7）：材质/5.png" alt="不同面使用不同的材质"></p><h2 id="MeshLambertMaterial"><a href="#MeshLambertMaterial" class="headerlink" title="MeshLambertMaterial"></a>MeshLambertMaterial</h2><p><a href="https://threejs.org/docs/index.html#api/en/materials/MeshLambertMaterial" target="_blank" rel="noopener">MeshLambertMaterial</a>是一种感光的材质。我们之前在光源那一张已经展示过，就直接把之前的例子拿过来了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加正方体</span></span><br><span class="line"><span class="keyword">var</span> cubeGeometry = <span class="keyword">new</span> THREE.BoxGeometry(<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> cubeMaterial = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;<span class="attr">color</span>: <span class="number">0xff0000</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> cube = <span class="keyword">new</span> THREE.Mesh(cubeGeometry, cubeMaterial);</span><br><span class="line"><span class="comment">// 正方体位置</span></span><br><span class="line">cube.position.x = <span class="number">-6</span>;</span><br><span class="line">cube.position.y = <span class="number">-6</span>;</span><br><span class="line">cube.position.z = <span class="number">0</span>;</span><br><span class="line">cube.castShadow = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 把正方体添加到场景中</span></span><br><span class="line">scene.add(cube);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加小球</span></span><br><span class="line"><span class="keyword">var</span> sphereGeometry = <span class="keyword">new</span> THREE.SphereGeometry(<span class="number">2</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> sphereMaterial = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;<span class="attr">color</span>: <span class="number">0x00ff00</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> sphere = <span class="keyword">new</span> THREE.Mesh(sphereGeometry, sphereMaterial);</span><br><span class="line"><span class="comment">// 小球位置</span></span><br><span class="line">sphere.position.x = <span class="number">6</span>;</span><br><span class="line">sphere.position.y = <span class="number">-6</span>;</span><br><span class="line">sphere.position.z = <span class="number">0</span>;</span><br><span class="line">sphere.castShadow = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 把小球添加到场景中</span></span><br><span class="line">scene.add(sphere);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一片平地</span></span><br><span class="line"><span class="keyword">var</span> planeGeometry = <span class="keyword">new</span> THREE.PlaneGeometry(<span class="number">30</span>, <span class="number">30</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> planeMaterial = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;<span class="attr">color</span>: <span class="number">0xdddddd</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> plane = <span class="keyword">new</span> THREE.Mesh(planeGeometry, planeMaterial);</span><br><span class="line"><span class="comment">// 由于平地添加后默认是在正前方 所以需要旋转一下</span></span><br><span class="line">plane.rotation.x = <span class="number">-0.5</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">plane.position.y = <span class="number">-10</span>;</span><br><span class="line">plane.receiveShadow = <span class="literal">true</span>;</span><br><span class="line">scene.add(plane);</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2020/05/27/Three.js教程（7）：材质/6.png" alt="MeshLambertMaterial"></p><h2 id="MeshPhongMaterial"><a href="#MeshPhongMaterial" class="headerlink" title="MeshPhongMaterial"></a>MeshPhongMaterial</h2><p><a href="https://threejs.org/docs/index.html#api/en/materials/MeshPhongMaterial" target="_blank" rel="noopener">MeshPhongMaterial</a>也是一种感光材质，使用方法和<code>MeshLambertMaterial</code>完全一样。其效果也差不多，唯一的区别是<code>MeshPhongMaterial</code>材质的效果会更加亮一些，它带的反光感会更加明显，主要用于玻璃等明亮的物体。同样的，我们只要把上面例子中的<code>MeshLambertMaterial</code>材质改成<code>MeshPhongMaterial</code>看一下效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加正方体</span></span><br><span class="line"><span class="keyword">var</span> cubeGeometry = <span class="keyword">new</span> THREE.BoxGeometry(<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> cubeMaterial = <span class="keyword">new</span> THREE.MeshPhongMaterial(&#123;<span class="attr">color</span>: <span class="number">0xff0000</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> cube = <span class="keyword">new</span> THREE.Mesh(cubeGeometry, cubeMaterial);</span><br><span class="line"><span class="comment">// 正方体位置</span></span><br><span class="line">cube.position.x = <span class="number">-6</span>;</span><br><span class="line">cube.position.y = <span class="number">-6</span>;</span><br><span class="line">cube.position.z = <span class="number">0</span>;</span><br><span class="line">cube.castShadow = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 把正方体添加到场景中</span></span><br><span class="line">scene.add(cube);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加小球</span></span><br><span class="line"><span class="keyword">var</span> sphereGeometry = <span class="keyword">new</span> THREE.SphereGeometry(<span class="number">2</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> sphereMaterial = <span class="keyword">new</span> THREE.MeshPhongMaterial(&#123;<span class="attr">color</span>: <span class="number">0x00ff00</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> sphere = <span class="keyword">new</span> THREE.Mesh(sphereGeometry, sphereMaterial);</span><br><span class="line"><span class="comment">// 小球位置</span></span><br><span class="line">sphere.position.x = <span class="number">6</span>;</span><br><span class="line">sphere.position.y = <span class="number">-6</span>;</span><br><span class="line">sphere.position.z = <span class="number">0</span>;</span><br><span class="line">sphere.castShadow = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 把小球添加到场景中</span></span><br><span class="line">scene.add(sphere);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一片平地</span></span><br><span class="line"><span class="keyword">var</span> planeGeometry = <span class="keyword">new</span> THREE.PlaneGeometry(<span class="number">30</span>, <span class="number">30</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> planeMaterial = <span class="keyword">new</span> THREE.MeshPhongMaterial(&#123;<span class="attr">color</span>: <span class="number">0xdddddd</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> plane = <span class="keyword">new</span> THREE.Mesh(planeGeometry, planeMaterial);</span><br><span class="line"><span class="comment">// 由于平地添加后默认是在正前方 所以需要旋转一下</span></span><br><span class="line">plane.rotation.x = <span class="number">-0.5</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">plane.position.y = <span class="number">-10</span>;</span><br><span class="line">plane.receiveShadow = <span class="literal">true</span>;</span><br><span class="line">scene.add(plane);</span><br></pre></td></tr></table></figure><p>你会看到小球会更亮一些，运行结果如下：</p><p><img src="/2020/05/27/Three.js教程（7）：材质/7.png" alt="MeshPhongMaterial"></p><h2 id="线段相关的材质"><a href="#线段相关的材质" class="headerlink" title="线段相关的材质"></a>线段相关的材质</h2><p><a href="https://threejs.org/docs/index.html#api/en/materials/LineBasicMaterial" target="_blank" rel="noopener">LineBasicMaterial</a>和<a href="https://threejs.org/docs/index.html#api/en/materials/LineDashedMaterial" target="_blank" rel="noopener">LineDashedMaterial</a>都是线段特有的材质，其中前者是后者的父类。两者的区别是后者是虚线前者是实线。所以<code>LineDashedMaterial</code>拥有<code>dashSize</code>（虚线中，线段部分长度，默认值是3）、<code>gapSize</code>（虚线中，线段与线段的间距，默认值是1）和<code>scale</code>（缩放大小，默认值是1，可以在不改变虚线总长的时候来设置虚线中线段与间距的大小）三个用来控制虚线的属性。先来看一个<code>LineBasicMaterial</code>的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.Geometry();</span><br><span class="line">geometry.vertices.push(<span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  geometry.vertices.push(<span class="keyword">new</span> THREE.Vector3(i, i - <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">  geometry.vertices.push(<span class="keyword">new</span> THREE.Vector3(i, -i , <span class="number">0</span>));</span><br><span class="line">  geometry.vertices.push(<span class="keyword">new</span> THREE.Vector3(-i, -i, <span class="number">0</span>));</span><br><span class="line">  geometry.vertices.push(<span class="keyword">new</span> THREE.Vector3(-i, i, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> material = <span class="keyword">new</span> THREE.LineBasicMaterial(&#123;</span><br><span class="line">  color: <span class="string">'#ffffff'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> line = <span class="keyword">new</span> THREE.Line(geometry, material);</span><br><span class="line">scene.add(line);</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2020/05/27/Three.js教程（7）：材质/8.png" alt="LineBasicMaterial"></p><p>我们稍加改动，改成<code>LineDashedMaterial</code>的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.Geometry();</span><br><span class="line">geometry.vertices.push(<span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  geometry.vertices.push(<span class="keyword">new</span> THREE.Vector3(i, i - <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">  geometry.vertices.push(<span class="keyword">new</span> THREE.Vector3(i, -i , <span class="number">0</span>));</span><br><span class="line">  geometry.vertices.push(<span class="keyword">new</span> THREE.Vector3(-i, -i, <span class="number">0</span>));</span><br><span class="line">  geometry.vertices.push(<span class="keyword">new</span> THREE.Vector3(-i, i, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> material = <span class="keyword">new</span> THREE.LineDashedMaterial(&#123;</span><br><span class="line">  color: <span class="string">'#ffffff'</span>,</span><br><span class="line">  scale: <span class="number">1</span>,</span><br><span class="line">  dashSize: <span class="number">3</span>,</span><br><span class="line">  gapSize: <span class="number">1</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> line = <span class="keyword">new</span> THREE.Line(geometry, material);</span><br><span class="line">line.computeLineDistances();</span><br><span class="line">scene.add(line);</span><br></pre></td></tr></table></figure><p>需要注意的是<strong>要使虚线生效必须调用一下line.computeLineDistances()</strong>，此时效果如下：</p><p><img src="/2020/05/27/Three.js教程（7）：材质/9.png" alt="LineDashedMaterial"></p><hr><p>至此，<code>three.js</code>的基本概念我们已经讲完了，大家是不是收获满满？<code>three.js</code>看似东西多，其实基本套路都是一样的，就比如基本上所有的设置材质的方法都是类似的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前说过&lt;code&gt;网格（Mesh） = 几何体（Geometry） + 材质（Material）&lt;/code&gt;，也就是一个物体是有它的形状和材质来决定。几何体（Geometry）类似于前端的HTML而材质（Material）类似于前端的CSS，今天我们看一下材质相关的内容
      
    
    </summary>
    
    
      <category term="Three.js" scheme="https://www.kai666666.top/categories/Three-js/"/>
    
    
      <category term="Three.js" scheme="https://www.kai666666.top/tags/Three-js/"/>
    
  </entry>
  
  <entry>
    <title>Three.js教程（6）：几何体</title>
    <link href="https://www.kai666666.top/2020/02/01/Three.js%E6%95%99%E7%A8%8B%EF%BC%886%EF%BC%89%EF%BC%9A%E5%87%A0%E4%BD%95%E4%BD%93/"/>
    <id>https://www.kai666666.top/2020/02/01/Three.js%E6%95%99%E7%A8%8B%EF%BC%886%EF%BC%89%EF%BC%9A%E5%87%A0%E4%BD%95%E4%BD%93/</id>
    <published>2020-02-01T01:18:14.000Z</published>
    <updated>2020-02-03T05:27:58.512Z</updated>
    
    <content type="html"><![CDATA[<p>之前的章节中我们使用了平地、方块、球体等几何体（Geometry），今天我们探讨更多的<a href="https://threejs.org/docs/index.html#api/en/core/Geometry" target="_blank" rel="noopener">几何体</a>。<br>先说一个事实，在WebGL中只能绘制3种东西，分别是<strong>点、线和三角形</strong>。什么？我们之前做的方块和球体，明明就不是三角形呢？其实他们确实是由三角形组成的。多个小的三角形就是可以组成包括球体以内的几乎任何几何体。我们先从简单的例子开始今天的课程吧。</p><hr><h2 id="PlaneGeometry"><a href="#PlaneGeometry" class="headerlink" title="PlaneGeometry"></a>PlaneGeometry</h2><p><a href="https://threejs.org/docs/index.html#api/en/geometries/PlaneGeometry" target="_blank" rel="noopener">PlaneGeometry</a>就是一个平地，我们直接看例子吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.PlaneGeometry(<span class="number">30</span>, <span class="number">30</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123; <span class="attr">color</span>:<span class="string">'#ff0000'</span>&#125;);</span><br><span class="line">material.wireframe = <span class="literal">true</span>;</span><br><span class="line">mesh = <span class="keyword">new</span> THREE.Mesh(geometry, material);</span><br><span class="line"><span class="comment">// 由于平地添加后默认是在正前方 所以需要旋转一下</span></span><br><span class="line">mesh.rotation.x = <span class="number">-0.5</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">mesh.position.y = <span class="number">-10</span>;</span><br><span class="line">scene.add(mesh);</span><br></pre></td></tr></table></figure><p><code>PlaneGeometry</code>的构造函数有四个参数，分别是长、宽、长的段数和宽的段数；这里长分成了10段，宽也分成了10段。另外我们这里使用了材质<code>MeshBasicMaterial</code>，其中<code>wireframe</code>为<code>false</code>表示只显示空的框架。<code>MeshBasicMaterial</code>的更多细节将在下章讨论。此时的效果如下，我们可以很清楚的看到平地是由三角形构成的。</p><p><img src="/2020/02/01/Three.js教程（6）：几何体/1.jpeg" alt="PlaneGeometry_1"></p><p>由于平地添加后默认和电脑屏幕是一个平面，我们这里需要在下方，所以需要走旋转：<code>mesh.rotation.x = -0.5 * Math.PI;</code>。</p><p>我们上面的代码添加了一块平地，但是不利于调试，现在我们调整代码，使用<code>gui</code>来管理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> step = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMesh</span>(<span class="params">geometry</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> material = <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;</span><br><span class="line">    color:<span class="string">'#ff0000'</span></span><br><span class="line">  &#125;);</span><br><span class="line">  material.wireframe = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">var</span> mesh = <span class="keyword">new</span> THREE.Mesh(geometry, material);</span><br><span class="line">  <span class="keyword">return</span> mesh;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  width: <span class="number">30</span>,</span><br><span class="line">  height: <span class="number">30</span>,</span><br><span class="line">  widthSegments: <span class="number">10</span>,</span><br><span class="line">  heightSegments: <span class="number">10</span>,</span><br><span class="line">  getGeometry ()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> THREE.PlaneGeometry(<span class="keyword">this</span>.width, <span class="keyword">this</span>.height, <span class="keyword">this</span>.widthSegments, <span class="keyword">this</span>.heightSegments);</span><br><span class="line">  &#125;,</span><br><span class="line">  update () &#123;</span><br><span class="line">    <span class="keyword">if</span> (mesh) &#123;</span><br><span class="line">      <span class="comment">// 先删除</span></span><br><span class="line">      scene.remove(mesh);</span><br><span class="line">      <span class="comment">// 后创建一个新的</span></span><br><span class="line">      mesh = createMesh(<span class="keyword">this</span>.getGeometry());</span><br><span class="line">      <span class="comment">// 再添加到场景中</span></span><br><span class="line">      scene.add(mesh);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一片平地</span></span><br><span class="line">mesh = createMesh(obj.getGeometry());</span><br><span class="line">scene.add(mesh);</span><br><span class="line"></span><br><span class="line">gui.add(obj, <span class="string">'width'</span>, <span class="number">0</span>, <span class="number">40</span>).onChange(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  obj.update();</span><br><span class="line">&#125;);</span><br><span class="line">gui.add(obj, <span class="string">'height'</span>, <span class="number">0</span>, <span class="number">40</span>).onChange(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  obj.update();</span><br><span class="line">&#125;);</span><br><span class="line">gui.add(obj, <span class="string">'widthSegments'</span>, <span class="number">0</span>, <span class="number">20</span>).onChange(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  obj.update();</span><br><span class="line">&#125;);</span><br><span class="line">gui.add(obj, <span class="string">'heightSegments'</span>, <span class="number">0</span>, <span class="number">20</span>).onChange(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  obj.update();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  stats.update();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加了一行控制旋转的代码</span></span><br><span class="line">  mesh.rotation.y = step += <span class="number">0.01</span>;</span><br><span class="line"></span><br><span class="line">  requestAnimationFrame( animate );</span><br><span class="line"></span><br><span class="line">  renderer.render( scene, camera );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述<code>createMesh</code>用来创建一个mesh；<code>obj</code>对象是gui的控制器对象，其中<code>getGeometry</code>方法是用来获取<code>Geometry</code>对象，<code>update</code>函数用来更新几何体；最后在<code>animate</code>添加代码，用来控制mesh旋转。此时的效果如下，你可以修改参数来更新mesh：</p><p><img src="/2020/02/01/Three.js教程（6）：几何体/2.jpeg" alt="PlaneGeometry_2"></p><h2 id="CircleGeometry"><a href="#CircleGeometry" class="headerlink" title="CircleGeometry"></a>CircleGeometry</h2><p><a href="https://threejs.org/docs/index.html#api/en/geometries/CircleGeometry" target="_blank" rel="noopener">CircleGeometry</a>是一种圆形的平面几何体。<code>CircleGeometry</code>构造方法的参数有四个，分别是<code>radius</code>，表示圆形的半径；<code>segments</code>，表示分为几段，默认是8段；<code>thetaStart</code>表示起始的弧度，默认是0；<code>thetaLength</code>表示总共的弧度，默认是<code>2 * Math.PI</code>也就是一个圆，我们先来看个例子，这个例子就是在上一个例子中修改<code>obj</code>对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">  radius: <span class="number">10</span>,</span><br><span class="line">  segments: <span class="number">8</span>,</span><br><span class="line">  thetaStart: <span class="number">0</span>,</span><br><span class="line">  thetaLength: <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="number">3</span> / <span class="number">4</span>,</span><br><span class="line">  getGeometry ()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> THREE.CircleGeometry(<span class="keyword">this</span>.radius, <span class="keyword">this</span>.segments, <span class="keyword">this</span>.thetaStart, <span class="keyword">this</span>.thetaLength);</span><br><span class="line">  &#125;,</span><br><span class="line">  update () &#123;</span><br><span class="line">    <span class="keyword">if</span> (mesh) &#123;</span><br><span class="line">      <span class="comment">// 先删除</span></span><br><span class="line">      scene.remove(mesh);</span><br><span class="line">      <span class="comment">// 后创建一个新的</span></span><br><span class="line">      mesh = createMesh(<span class="keyword">this</span>.getGeometry());</span><br><span class="line">      <span class="comment">// 再添加到场景中</span></span><br><span class="line">      scene.add(mesh);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里我们画了一个3/4圆，你可以设置<code>segments</code>，你会发现当小于3的时候也会按照3个来绘制的，如果是小数，<code>Three.js</code>也会转化为整数（向下取整）来处理，<strong>但是最好还是传入的就是整数，因为有的几何体传入小数的段数会报错</strong>。效果如下：</p><p><img src="/2020/02/01/Three.js教程（6）：几何体/3.jpeg" alt="CircleGeometry"></p><h2 id="RingGeometry"><a href="#RingGeometry" class="headerlink" title="RingGeometry"></a>RingGeometry</h2><p><a href="https://threejs.org/docs/index.html#api/en/geometries/RingGeometry" target="_blank" rel="noopener">RingGeometry</a>是一种环状的平面几何体。<code>RingGeometry</code>的构造方法有6个参数，分别是<code>innerRadius</code>，表示内圆半径；<code>outerRadius</code>，表示外圆半径；<code>thetaSegments</code>，表示分成几个三角形，默认是8个，最小3个，与上面是一样的；<code>phiSegments</code>表示半径方向分为多少个三角形，最小是1个，默认也是8个；后两个是<code>thetaStart</code>和<code>thetaLength</code>、跟上面是一样的。我们再修改一下<code>obj</code>对象，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  innerRadius: <span class="number">5</span>,</span><br><span class="line">  outerRadius: <span class="number">10</span>,</span><br><span class="line">  thetaSegments: <span class="number">8</span>,</span><br><span class="line">  phiSegments: <span class="number">8</span>,</span><br><span class="line">  thetaStart: <span class="number">0</span>,</span><br><span class="line">  thetaLength: <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="number">3</span> / <span class="number">4</span>,</span><br><span class="line">  getGeometry ()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> THREE.RingGeometry(</span><br><span class="line">        <span class="keyword">this</span>.innerRadius,</span><br><span class="line">        <span class="keyword">this</span>.outerRadius,</span><br><span class="line">        <span class="built_in">Math</span>.round(<span class="keyword">this</span>.thetaSegments),</span><br><span class="line">        <span class="built_in">Math</span>.round(<span class="keyword">this</span>.phiSegments),</span><br><span class="line">        <span class="keyword">this</span>.thetaStart,</span><br><span class="line">        <span class="keyword">this</span>.thetaLength</span><br><span class="line">      );</span><br><span class="line">  &#125;,</span><br><span class="line">  update () &#123;</span><br><span class="line">    <span class="keyword">if</span> (mesh) &#123;</span><br><span class="line">      <span class="comment">// 先删除</span></span><br><span class="line">      scene.remove(mesh);</span><br><span class="line">      <span class="comment">// 后创建一个新的</span></span><br><span class="line">      mesh = createMesh(<span class="keyword">this</span>.getGeometry());</span><br><span class="line">      <span class="comment">// 再添加到场景中</span></span><br><span class="line">      scene.add(mesh);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/01/Three.js教程（6）：几何体/4.jpeg" alt="RingGeometry"></p><h2 id="BoxGeometry"><a href="#BoxGeometry" class="headerlink" title="BoxGeometry"></a>BoxGeometry</h2><p>上面我们说的都是平面几何体，现在看看三维几何体，首先来看的是<a href="https://threejs.org/docs/index.html#api/en/geometries/BoxGeometry" target="_blank" rel="noopener">BoxGeometry</a>，这个几何体我们前面见得挺多的，就是一个长方体。他的构造方法有6个参数，分别是长宽高，和长宽高的段数，默认值都是1。示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  width: <span class="number">10</span>,</span><br><span class="line">  height: <span class="number">10</span>,</span><br><span class="line">  depth: <span class="number">10</span>,</span><br><span class="line">  widthSegments: <span class="number">1</span>,</span><br><span class="line">  heightSegments: <span class="number">1</span>,</span><br><span class="line">  depthSegments: <span class="number">1</span>,</span><br><span class="line">  getGeometry ()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> THREE.BoxGeometry(</span><br><span class="line">        <span class="keyword">this</span>.width,</span><br><span class="line">        <span class="keyword">this</span>.height,</span><br><span class="line">        <span class="keyword">this</span>.depth,</span><br><span class="line">        <span class="built_in">Math</span>.round(<span class="keyword">this</span>.widthSegments),</span><br><span class="line">        <span class="built_in">Math</span>.round(<span class="keyword">this</span>.heightSegments),</span><br><span class="line">        <span class="built_in">Math</span>.round(<span class="keyword">this</span>.depthSegments),</span><br><span class="line">      );</span><br><span class="line">  &#125;,</span><br><span class="line">  update () &#123;</span><br><span class="line">    <span class="keyword">if</span> (mesh) &#123;</span><br><span class="line">      <span class="comment">// 先删除</span></span><br><span class="line">      scene.remove(mesh);</span><br><span class="line">      <span class="comment">// 后创建一个新的</span></span><br><span class="line">      mesh = createMesh(<span class="keyword">this</span>.getGeometry());</span><br><span class="line">      <span class="comment">// 再添加到场景中</span></span><br><span class="line">      scene.add(mesh);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2020/02/01/Three.js教程（6）：几何体/5.jpeg" alt="BoxGeometry"></p><h2 id="SphereGeometry"><a href="#SphereGeometry" class="headerlink" title="SphereGeometry"></a>SphereGeometry</h2><p><a href="https://threejs.org/docs/index.html#api/en/geometries/SphereGeometry" target="_blank" rel="noopener">SphereGeometry</a>是一个球体几何体。构造方法参数分别是：<code>radius</code>表示半径；<code>widthSegments</code>表示水平方向段数；<code>heightSegments</code>表示垂直方向的段数；<code>phiStart</code>表示水平方向的起始弧度，默认<code>0</code>；<code>phiLength</code>表示水平方向的总弧度，默认<code>Math.PI * 2</code>；<code>thetaStart</code>表示垂直方向的起始弧度，默认<code>0</code>；<code>thetaLength</code>表示垂直方向的总弧度，默认<code>Math.PI</code>。示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  radius: <span class="number">10</span>,</span><br><span class="line">  widthSegments:<span class="number">8</span>,</span><br><span class="line">  heightSegments: <span class="number">8</span>,</span><br><span class="line">  phiStart: <span class="number">0</span>,</span><br><span class="line">  phiLength: <span class="number">2</span> * <span class="built_in">Math</span>.PI,</span><br><span class="line">  thetaStart: <span class="number">0</span>,</span><br><span class="line">  thetaLength: <span class="built_in">Math</span>.PI,</span><br><span class="line">  getGeometry ()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> THREE.SphereGeometry(</span><br><span class="line">        <span class="keyword">this</span>.radius,</span><br><span class="line">        <span class="built_in">Math</span>.round(<span class="keyword">this</span>.widthSegments),</span><br><span class="line">        <span class="built_in">Math</span>.round(<span class="keyword">this</span>.heightSegments),</span><br><span class="line">        <span class="keyword">this</span>.phiStart,</span><br><span class="line">        <span class="keyword">this</span>.phiLength,</span><br><span class="line">        <span class="keyword">this</span>.thetaStart,</span><br><span class="line">        <span class="keyword">this</span>.thetaLength,</span><br><span class="line">      );</span><br><span class="line">  &#125;,</span><br><span class="line">  update () &#123;</span><br><span class="line">    <span class="keyword">if</span> (mesh) &#123;</span><br><span class="line">      <span class="comment">// 先删除</span></span><br><span class="line">      scene.remove(mesh);</span><br><span class="line">      <span class="comment">// 后创建一个新的</span></span><br><span class="line">      mesh = createMesh(<span class="keyword">this</span>.getGeometry());</span><br><span class="line">      <span class="comment">// 再添加到场景中</span></span><br><span class="line">      scene.add(mesh);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2020/02/01/Three.js教程（6）：几何体/6.jpeg" alt="SphereGeometry"></p><h2 id="更多几何体"><a href="#更多几何体" class="headerlink" title="更多几何体"></a>更多几何体</h2><p>我们上面讲了5种几何体，估计你也知道了创建几何体的套路了，其他几何体的创建方式和上面的基本一致，这里就不做更多的叙述了。<code>Three.js</code>还提供的几何体有：<a href="https://threejs.org/docs/index.html#api/en/geometries/ConeGeometry" target="_blank" rel="noopener">ConeGeometry</a>、<a href="https://threejs.org/docs/index.html#api/en/geometries/CylinderGeometry" target="_blank" rel="noopener">CylinderGeometry</a>、<a href="https://threejs.org/docs/index.html#api/en/geometries/DodecahedronGeometry" target="_blank" rel="noopener">DodecahedronGeometry</a>、<a href="https://threejs.org/docs/index.html#api/en/geometries/ExtrudeGeometry" target="_blank" rel="noopener">ExtrudeGeometry</a>、<a href="https://threejs.org/docs/index.html#api/en/geometries/IcosahedronGeometry" target="_blank" rel="noopener">IcosahedronGeometry</a>、<a href="https://threejs.org/docs/index.html#api/en/geometries/LatheGeometry" target="_blank" rel="noopener">LatheGeometry</a>、<a href="https://threejs.org/docs/index.html#api/en/geometries/OctahedronGeometry" target="_blank" rel="noopener">OctahedronGeometry</a>、<a href="https://threejs.org/docs/index.html#api/en/geometries/ParametricGeometry" target="_blank" rel="noopener">ParametricGeometry</a>、<a href="https://threejs.org/docs/index.html#api/en/geometries/PolyhedronGeometry" target="_blank" rel="noopener">PolyhedronGeometry</a>、<a href="https://threejs.org/docs/index.html#api/en/geometries/ShapeGeometry" target="_blank" rel="noopener">ShapeGeometry</a>、<a href="https://threejs.org/docs/index.html#api/en/geometries/TextGeometry" target="_blank" rel="noopener">TextGeometry</a>、<a href="https://threejs.org/docs/index.html#api/en/geometries/TetrahedronGeometry" target="_blank" rel="noopener">TetrahedronGeometry</a>、<a href="https://threejs.org/docs/index.html#api/en/geometries/TorusGeometry" target="_blank" rel="noopener">TorusGeometry</a>、<a href="https://threejs.org/docs/index.html#api/en/geometries/TorusKnotGeometry" target="_blank" rel="noopener">TorusKnotGeometry</a>、<a href="https://threejs.org/docs/index.html#api/en/geometries/TubeGeometry" target="_blank" rel="noopener">TubeGeometry</a>等。由于篇幅有限就不一一展开说了。当然<code>Three.js</code>不仅仅可以使用给出的几何体，甚至还可以自定义几何体，最重要的是还可以导入其他建模软件做出来的模型，这一点是非常厉害的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前的章节中我们使用了平地、方块、球体等几何体（Geometry），今天我们探讨更多的&lt;a href=&quot;https://threejs.org/docs/index.html#api/en/core/Geometry&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
    
      <category term="Three.js" scheme="https://www.kai666666.top/categories/Three-js/"/>
    
    
      <category term="Three.js" scheme="https://www.kai666666.top/tags/Three-js/"/>
    
  </entry>
  
  <entry>
    <title>Three.js教程（5）：光源</title>
    <link href="https://www.kai666666.top/2020/01/30/Three.js%E6%95%99%E7%A8%8B%EF%BC%885%EF%BC%89%EF%BC%9A%E5%85%89%E6%BA%90/"/>
    <id>https://www.kai666666.top/2020/01/30/Three.js%E6%95%99%E7%A8%8B%EF%BC%885%EF%BC%89%EF%BC%9A%E5%85%89%E6%BA%90/</id>
    <published>2020-01-30T05:09:37.000Z</published>
    <updated>2020-01-31T11:51:48.129Z</updated>
    
    <content type="html"><![CDATA[<p><code>Three.js</code>的作用就是做3D效果，一说到3D就绕不过一个话题，那就是阴影。而要出现阴影的效果，那么就要涉及光源。本章介绍<code>Three.js</code>中光源相关的知识。</p><hr><h2 id="光源简介"><a href="#光源简介" class="headerlink" title="光源简介"></a>光源简介</h2><p>光源是<a href="https://threejs.org/docs/index.html#api/en/lights/Light" target="_blank" rel="noopener">THREE.Light</a>类的子类。所有光源都有2个属性，一个是<code>color</code>，是一个<code>THREE.Color</code>类型的值，表示光源的颜色；另一个是<code>intensity</code>，一个浮点型的值，表示光照强度。本章所有的光源都有这2个值，你可以在本章配套代码中随意修改这2个值。<br>这章我们围绕一个例子来展开，基本的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加正方体</span></span><br><span class="line"><span class="keyword">var</span> cubeGeometry = <span class="keyword">new</span> THREE.BoxGeometry(<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> cubeMaterial = <span class="keyword">new</span> THREE.MeshNormalMaterial();</span><br><span class="line"><span class="keyword">var</span> cube = <span class="keyword">new</span> THREE.Mesh(cubeGeometry, cubeMaterial);</span><br><span class="line"><span class="comment">// 正方体位置</span></span><br><span class="line">cube.position.x = <span class="number">-6</span>;</span><br><span class="line">cube.position.y = <span class="number">-6</span>;</span><br><span class="line">cube.position.z = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 把正方体添加到场景中</span></span><br><span class="line">scene.add(cube);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加小球</span></span><br><span class="line"><span class="keyword">var</span> sphereGeometry = <span class="keyword">new</span> THREE.SphereGeometry(<span class="number">2</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> sphereMaterial = <span class="keyword">new</span> THREE.MeshNormalMaterial();</span><br><span class="line"><span class="keyword">var</span> sphere = <span class="keyword">new</span> THREE.Mesh(sphereGeometry, sphereMaterial);</span><br><span class="line"><span class="comment">// 小球位置</span></span><br><span class="line">sphere.position.x = <span class="number">6</span>;</span><br><span class="line">sphere.position.y = <span class="number">-6</span>;</span><br><span class="line">sphere.position.z = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 把小球添加到场景中</span></span><br><span class="line">scene.add(sphere);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一片平地</span></span><br><span class="line"><span class="keyword">var</span> planeGeometry = <span class="keyword">new</span> THREE.PlaneGeometry(<span class="number">30</span>, <span class="number">30</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> planeMaterial = <span class="keyword">new</span> THREE.MeshNormalMaterial();</span><br><span class="line"><span class="comment">// var planeMaterial = new THREE.MeshLambertMaterial(&#123;color: 0xff0000&#125;);</span></span><br><span class="line"><span class="keyword">var</span> plane = <span class="keyword">new</span> THREE.Mesh(planeGeometry, planeMaterial);</span><br><span class="line"><span class="comment">// 由于平地添加后默认是在正前方 所以需要旋转一下</span></span><br><span class="line">plane.rotation.x = <span class="number">-0.5</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">plane.position.y = <span class="number">-10</span>;</span><br><span class="line">scene.add(plane);</span><br></pre></td></tr></table></figure><p>上面添加了一个正方形（BoxGeometry），一个球形（SphereGeometry），一个平地（PlaneGeometry）。这三个<code>Geometry</code>你可能不熟悉，我们会在下个章节来专门讲，现在不熟悉无所谓，此时的效果如下：</p><p><img src="/2020/01/30/Three.js教程（5）：光源/1.png" alt="基本场景"></p><h2 id="SpotLight"><a href="#SpotLight" class="headerlink" title="SpotLight"></a>SpotLight</h2><p><a href="https://threejs.org/docs/#api/en/lights/SpotLight" target="_blank" rel="noopener">SpotLight</a>是一种圆锥形的光源（聚光灯光源），类似于手电筒或者路灯这样的光源，<strong>SpotLight具有方向，并且可以产生阴影</strong>。现在我们给上面的场景中添加阴影。要想让场景中有一下4个步骤：</p><p>1.添加光源并设置可以传播阴影：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加光源</span></span><br><span class="line"><span class="keyword">var</span> spotLight = <span class="keyword">new</span> THREE.SpotLight(<span class="number">0xffffff</span>);</span><br><span class="line">spotLight.position.set(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">spotLight.castShadow = <span class="literal">true</span>;</span><br><span class="line">scene.add(spotLight);</span><br></pre></td></tr></table></figure><p>  <code>Three.js</code>出于性能考虑，默认<code>castShadow</code>是<code>false</code>，也就是默认不会产生阴影的。</p><p>2.使用可以感光的材质。<br>  我们上述使用的材质<code>MeshNormalMaterial</code>是不会对光源有反应的材质，我们需要一种对光源产出反应的材质，常用的感光材质有：<a href="https://threejs.org/docs/index.html#api/en/materials/MeshLambertMaterial" target="_blank" rel="noopener">MeshLambertMaterial</a>和<a href="https://threejs.org/docs/index.html#api/en/materials/MeshPhongMaterial" target="_blank" rel="noopener">MeshPhongMaterial</a>。我们这里就使用<code>MeshLambertMaterial</code>材质来替换上面的<code>MeshNormalMaterial</code>吧，材质相关的知识将会在下下章节中讲。</p>  <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// ... 其他代码</span><br><span class="line"><span class="deletion">- var cubeMaterial = new THREE.MeshNormalMaterial();</span></span><br><span class="line"><span class="addition">+ var cubeMaterial = new THREE.MeshLambertMaterial(&#123;color: 0xff0000&#125;);</span></span><br><span class="line">// ... 其他代码</span><br><span class="line"><span class="deletion">- var sphereMaterial = new THREE.MeshNormalMaterial();</span></span><br><span class="line"><span class="addition">+ var sphereMaterial = new THREE.MeshLambertMaterial(&#123;color: 0x00ff00&#125;);</span></span><br><span class="line">// ... 其他代码</span><br><span class="line"><span class="deletion">- var planeMaterial = new THREE.MeshNormalMaterial();</span></span><br><span class="line"><span class="addition">+ var planeMaterial = new THREE.MeshLambertMaterial(&#123;color: 0xdddddd&#125;);</span></span><br><span class="line">// ... 其他代码</span><br></pre></td></tr></table></figure><p>  这里需要注意的是，如果把材质换成感光材质而没有引入光源，是看不到物体的，跟我们在黑暗中看东西是一样的。</p><p>3.设置物体传播（产生）阴影或接收阴影：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cube.castShadow = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// ... 其他代码</span></span><br><span class="line">sphere.castShadow = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// ... 其他代码</span></span><br><span class="line">plane.receiveShadow = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>4.渲染器开启阴影映射：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">renderer.shadowMapEnabled = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>此时的效果如下：</p><p><img src="/2020/01/30/Three.js教程（5）：光源/2.png" alt="SpotLight"></p><h2 id="PointLight"><a href="#PointLight" class="headerlink" title="PointLight"></a>PointLight</h2><p><a href="https://threejs.org/docs/index.html#api/en/lights/PointLight" target="_blank" rel="noopener">PointLight</a>是点光源，听名字就知道了，它是一个点向四面八方发射光线的光源，<strong>点光源不能产生阴影</strong>。</p><p>我们在上一个例子中的添加一个点光源：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pointLight = <span class="keyword">new</span> THREE.PointLight(<span class="string">"#ffd200"</span>);</span><br><span class="line">scene.add(pointLight);</span><br></pre></td></tr></table></figure><p>修改聚光灯光源的角度，运行后大概如下：</p><p><img src="/2020/01/30/Three.js教程（5）：光源/3.png" alt="PointLight"></p><p>这里的阴影是上一个聚光灯光源产生的效果，可以使用下面代码把聚光灯光源去掉，那么就只有点光源的效果了。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spotLight.visible = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>此时的效果大概如下：</p><p><img src="/2020/01/30/Three.js教程（5）：光源/4.png" alt="只有PointLight"></p><p>这一块建议运行一下代码，代码中可以更好的测试各个参数。</p><h2 id="DirectionalLight"><a href="#DirectionalLight" class="headerlink" title="DirectionalLight"></a>DirectionalLight</h2><p><a href="https://threejs.org/docs/index.html#api/en/lights/DirectionalLight" target="_blank" rel="noopener">DirectionalLight</a>顾名思义是一种平行的直线光源（平行光光源）。<strong>平行光光源的光线是平行的，可以产生阴影，所有光的强度都一样。</strong>它有一个<code>target</code>属性表示照射到哪个位置上，另外可以使用<code>directionalLight.shadow.camera.left</code>或者<code>directionalLight.shadowCameraLeft</code>来设置阴影的左边距，同样的也可以设置右边、上边、下边等边距，这样就可以确定一个阴影的范围（阴影越大性能会越差，所以平行光需要设置阴影范围）。</p><p>我们把第一个例子中的聚光灯光源换成平行光光源，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加光源</span></span><br><span class="line"><span class="keyword">var</span> directionalLight = <span class="keyword">new</span> THREE.DirectionalLight(<span class="string">'#ffffff'</span>);</span><br><span class="line">directionalLight.position.set(<span class="number">0</span>, obj.y, <span class="number">0</span>);</span><br><span class="line">directionalLight.castShadow = <span class="literal">true</span>;</span><br><span class="line">directionalLight.shadow.mapSize.width = <span class="number">512</span>;  <span class="comment">// default</span></span><br><span class="line">directionalLight.shadow.mapSize.height = <span class="number">512</span>; <span class="comment">// default</span></span><br><span class="line">directionalLight.shadow.camera.near = <span class="number">0.5</span>;</span><br><span class="line">directionalLight.shadow.camera.far = <span class="number">1000</span>;</span><br><span class="line">directionalLight.shadow.camera.left = <span class="number">-15</span>;</span><br><span class="line">directionalLight.shadow.camera.right = <span class="number">15</span>;</span><br><span class="line">directionalLight.shadow.camera.top = <span class="number">15</span>;</span><br><span class="line">directionalLight.shadow.camera.bottom = <span class="number">-15</span>;</span><br><span class="line">scene.add(directionalLight);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 光照指向平地</span></span><br><span class="line">directionalLight.target = plane;</span><br></pre></td></tr></table></figure><p>此时的效果大概如下：</p><p><img src="/2020/01/30/Three.js教程（5）：光源/5.png" alt="DirectionalLight"></p><h2 id="AmbientLight"><a href="#AmbientLight" class="headerlink" title="AmbientLight"></a>AmbientLight</h2><p><a href="https://threejs.org/docs/index.html#api/en/lights/AmbientLight" target="_blank" rel="noopener">AmbientLight</a>的<strong>作用是给场景添加一种全局的颜色</strong>。该光源<strong>没有方向，也不产生阴影</strong>。如果你需要给场景中添加一种额外的统一的颜色，那么可以考虑使用<code>AmbientLight</code>，比如在上一个例子中添加一种紫色来烘托氛围，那么就可以使用该光源。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ambientLight = <span class="keyword">new</span> THREE.AmbientLight(<span class="string">'#9370DB'</span>);</span><br><span class="line">scene.add(ambientLight);</span><br></pre></td></tr></table></figure><p>上述效果如下：</p><p><img src="/2020/01/30/Three.js教程（5）：光源/6.png" alt="AmbientLight"></p><h2 id="HemisphereLight"><a href="#HemisphereLight" class="headerlink" title="HemisphereLight"></a>HemisphereLight</h2><p>上述<code>AmbientLight</code>主要的作用就是给环境中添加一种颜色，还有一种给环境中添加颜色的光源，就是<a href="https://threejs.org/docs/index.html#api/en/lights/HemisphereLight" target="_blank" rel="noopener">HemisphereLight</a>。<code>HemisphereLight</code>是一种更加贴近自然的光源，它的第一个参数表示天空的颜色，第二个参数表示地面（或者环境）的颜色，第三个参数是<code>intensity</code>表示强度。我们把上个例子中的<code>AmbientLight</code>替换为<code>HemisphereLight</code>，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hemisphereLight = <span class="keyword">new</span> THREE.HemisphereLight(<span class="string">'#87ceeb'</span>, <span class="string">'#f5deb3'</span>, <span class="number">0.4</span>);</span><br><span class="line">scene.add(hemisphereLight);</span><br></pre></td></tr></table></figure><p>上述效果如下：</p><p><img src="/2020/01/30/Three.js教程（5）：光源/7.png" alt="HemisphereLight"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Three.js&lt;/code&gt;的作用就是做3D效果，一说到3D就绕不过一个话题，那就是阴影。而要出现阴影的效果，那么就要涉及光源。本章介绍&lt;code&gt;Three.js&lt;/code&gt;中光源相关的知识。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;光源简介&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="Three.js" scheme="https://www.kai666666.top/categories/Three-js/"/>
    
    
      <category term="Three.js" scheme="https://www.kai666666.top/tags/Three-js/"/>
    
  </entry>
  
  <entry>
    <title>Chrome的小恐龙游戏自动躲避障碍物</title>
    <link href="https://www.kai666666.top/2020/01/07/Chrome%E7%9A%84%E5%B0%8F%E6%81%90%E9%BE%99%E6%B8%B8%E6%88%8F%E8%87%AA%E5%8A%A8%E8%BA%B2%E9%81%BF%E9%9A%9C%E7%A2%8D%E7%89%A9/"/>
    <id>https://www.kai666666.top/2020/01/07/Chrome%E7%9A%84%E5%B0%8F%E6%81%90%E9%BE%99%E6%B8%B8%E6%88%8F%E8%87%AA%E5%8A%A8%E8%BA%B2%E9%81%BF%E9%9A%9C%E7%A2%8D%E7%89%A9/</id>
    <published>2020-01-07T05:48:00.000Z</published>
    <updated>2020-07-17T09:39:55.062Z</updated>
    
    <content type="html"><![CDATA[<p>年初一篇名叫<a href="https://juejin.im/post/5e0f3bb75188253a7f15b22e" target="_blank" rel="noopener">《Chrome 的小恐龙游戏，被我破解了…》</a>的文章在掘金上火了一把，文章中说的是如果在控制台输入<code>Runner.instance_.setSpeed(100)</code>就可以改变小恐龙的速度；如果在控制台输入<code>Runner.prototype.gameOver=()=&gt;{}</code>，小恐龙就可以不用死了，就这样小恐龙可以快速移动且不死，那分当然是刷刷刷地涨起来了！这篇文章还是挺有意思的，我们先来研究一下这个游戏吧。</p><hr><h2 id="小恐龙游戏玩法"><a href="#小恐龙游戏玩法" class="headerlink" title="小恐龙游戏玩法"></a>小恐龙游戏玩法</h2><p><code>Chrome</code>在离线状态（拔网线、断开WIFI等）下打开任意网页就会出现小恐龙（实际上是霸王龙）的游戏。游戏中可以使用空格（或者上键）控制小恐龙跳跃，下键控制小恐龙匍匐前行，其实这个游戏只要用空格键就可以躲避所有的障碍物，本博客也不考虑使用下键的情况。游戏的规则很简单，就是尽可能地躲避更多的障碍物，从而达到更高的分数。由于这完全是一个单机的<code>canvas</code>游戏，你可以直接修改距离，比如控制台输入<code>Runner.instance_.distanceRan = 999999</code>，距离就变了，分数也跟着变了。当然这样得高分就没意思了，我们还是希望让小恐龙自己去跳跃，靠小恐龙自己的努力来得高分。</p><p><img src="/2020/01/07/Chrome的小恐龙游戏自动躲避障碍物/1.png" alt="小恐龙游戏"></p><h2 id="JS触发键盘事件"><a href="#JS触发键盘事件" class="headerlink" title="JS触发键盘事件"></a>JS触发键盘事件</h2><p>要想让小恐龙自动跳跃，肯定需要用JS来模拟按空格键，当然直接调用小恐龙的跳跃方法也是可以的。由于使用空格键后不仅仅是跳跃，还有播放声音等其他逻辑，所以我们就使用JS来模拟按空格键的事件来让小恐龙去跳跃。<br>JS模拟键盘按下事件很简单，可以直接使用<code>KeyboardEvent</code>对象，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 模拟触发按下空格事件</span></span><br><span class="line"><span class="keyword">var</span> event =  <span class="keyword">new</span> KeyboardEvent(<span class="string">'keydown'</span>,&#123; <span class="attr">code</span>:<span class="string">'Space'</span>, <span class="attr">keyCode</span>:<span class="number">32</span>, <span class="attr">key</span>: <span class="string">" "</span> &#125;);</span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(event);</span><br></pre></td></tr></table></figure><p><code>KeyboardEvent</code>的更多内容请看<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent" target="_blank" rel="noopener">这里</a>。</p><h2 id="实现小恐龙自己跳跃躲避障碍物"><a href="#实现小恐龙自己跳跃躲避障碍物" class="headerlink" title="实现小恐龙自己跳跃躲避障碍物"></a>实现小恐龙自己跳跃躲避障碍物</h2><p>小恐龙的源码在<code>head</code>标签的最后一个<code>script</code>里面；你也可以在控制台输入<code>Runner</code>回车后双击内容，也可以看浏览器的Source标签弹出了小恐龙的代码。如果Source标签不方便的话，你也可以把内容拷贝到一个js文件中查看。</p><p><img src="/2020/01/07/Chrome的小恐龙游戏自动躲避障碍物/2.png" alt="代码"></p><p>通过源码分析我们可以知道：</p><blockquote><p>游戏控制器函数（游戏控制器类）：Runner<br>游戏控制器对象（使用了单例模式）：Runner.instance_<br>障碍物：Runner.instance_.horizon.obstacles<br>小恐龙：Runner.instance_.tRex<br>当前水平速度：Runner.instance_.currentSpeed<br>每一帧的更新函数：Runner.prototype.update</p></blockquote><p>总的来说，游戏会调用<code>requestAnimationFrame</code>来绘制和更新，其中绘制和更新游戏的逻辑在<code>Runner.prototype.update</code>中。我们只要修改<code>Runner.prototype.update</code>函数，当恐龙距离它前面障碍物除以当前小恐龙的速度刚好等于小恐龙跳到最好处所需要的时间时，就模拟按下空格键。总的来说就是一招移魂大法重写<code>Runner.prototype.update</code>函数就可以了，具体如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> __update = Runner.prototype.update;</span><br><span class="line">  <span class="keyword">var</span> JUMPMINTIME = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 跳跃</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">jump</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event =  <span class="keyword">new</span> KeyboardEvent(<span class="string">'keydown'</span>,&#123; <span class="attr">code</span>:<span class="string">'Space'</span>, <span class="attr">keyCode</span>:<span class="number">32</span>, <span class="attr">key</span>: <span class="string">" "</span> &#125;);</span><br><span class="line">    <span class="built_in">document</span>.dispatchEvent(event);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Runner.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 没有起跳的时候才去判断是否触发跳跃</span></span><br><span class="line">    <span class="keyword">var</span> tRex = Runner.instance_.tRex;</span><br><span class="line">    <span class="keyword">if</span>(!tRex.jumping) &#123;</span><br><span class="line">      <span class="keyword">var</span> obstacles =  Runner.instance_.horizon.obstacles;</span><br><span class="line">      <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(index &lt; obstacles.length)&#123;</span><br><span class="line">        <span class="keyword">var</span> xDistance = obstacles[index].xPos - tRex.xPos;</span><br><span class="line">        <span class="comment">// 找到小恐龙前面的障碍物</span></span><br><span class="line">        <span class="keyword">if</span>(xDistance &gt; <span class="number">0</span>)&#123;</span><br><span class="line">          <span class="comment">// 当小恐龙可以跳过去的时候</span></span><br><span class="line">          <span class="keyword">if</span> (xDistance / Runner.instance_.currentSpeed &lt; JUMPMINTIME) &#123;</span><br><span class="line">           jump();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          index ++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    __update.call(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始游戏</span></span><br><span class="line">  jump();</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>为了避免污染全局变量，上述代码中使用了自执行函数。变量<code>JUMPMINTIME</code>的值<code>18</code>完全是一个经验值，试了几次这个值还是比较准确的，当然可能不是最优的，理论上需要计算小恐龙到最高处所需要的时间，然后还得处理单位，由于计算过程比较复杂，我就直接试这调了下，发现这个值还是比较靠谱的，就没有再去计算了。</p><p>上述代码还有一个问题就是当两个障碍物很近的时候，小恐龙还是可能会撞到后面的障碍物，这种情况就得提前触发起跳了，由于这种状况并不多，所以这里我们就不考虑了。</p><p>现在拷贝上述代码到浏览器控制台并按回车键开始游戏吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;年初一篇名叫&lt;a href=&quot;https://juejin.im/post/5e0f3bb75188253a7f15b22e&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Chrome 的小恐龙游戏，被我破解了…》&lt;/a&gt;的文章在掘金上火了一把，文章中说
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.kai666666.top/categories/JavaScript/"/>
    
    
      <category term="小技巧" scheme="https://www.kai666666.top/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Nuxt项目给script标签添加crossorigin属性</title>
    <link href="https://www.kai666666.top/2020/01/06/Nuxt%E9%A1%B9%E7%9B%AE%E7%BB%99script%E6%A0%87%E7%AD%BE%E6%B7%BB%E5%8A%A0crossorigin%E5%B1%9E%E6%80%A7/"/>
    <id>https://www.kai666666.top/2020/01/06/Nuxt%E9%A1%B9%E7%9B%AE%E7%BB%99script%E6%A0%87%E7%AD%BE%E6%B7%BB%E5%8A%A0crossorigin%E5%B1%9E%E6%80%A7/</id>
    <published>2020-01-06T08:01:03.000Z</published>
    <updated>2020-01-16T03:50:08.487Z</updated>
    
    <content type="html"><![CDATA[<p>最近给项目添加一个错误日志上报的功能，由于使用的是第三方的服务，导致上报的错误信息都是<code>Script error.</code>。<a href="https://help.aliyun.com/knowledge_detail/88579.html?spm=5176.13394938.0.0.4ef27294Z7EriM" target="_blank" rel="noopener">文档</a>上写的很清楚，要处理这个问题只需要两步：<code>添加“crossorigin=&quot;anonymous&quot; 属性</code>和<code>添加跨域 HTTP 响应头</code>。那么Nuxt项目该如何添加<code>crossorigin</code>呢？</p><hr><h2 id="给单页应用添加crossorigin"><a href="#给单页应用添加crossorigin" class="headerlink" title="给单页应用添加crossorigin"></a>给单页应用添加crossorigin</h2><p>单页应用意味着<code>nuxt.config.js</code>中<code>mode</code>的值是<code>spa</code>。spa添加<code>crossorigin</code>很简单，官方文档上也有<a href="https://zh.nuxtjs.org/api/configuration-build/#crossorigin" target="_blank" rel="noopener">说明</a>，只要在<code>nuxt.config.js</code>文件中的build属性下添加<code>crossorigin: &#39;anonymous&#39;</code>就可以了。你可以运行<code>npm run build</code>，然后查看项目根目录下的<code>.nuxt/dist/server/index.spa.html</code>文件，其中script标签是有<code>crossorigin</code>属性的。</p><h2 id="给同构应用添加crossorigin"><a href="#给同构应用添加crossorigin" class="headerlink" title="给同构应用添加crossorigin"></a>给同构应用添加crossorigin</h2><p>同构应用（即使用了服务端渲染）意味着<code>nuxt.config.js</code>中<code>mode</code>的值是<code>universal</code>。此时再用上面的方法发现上述的<code>.nuxt/dist/server/index.spa.html</code>文件是加了<code>crossorigin</code>属性的，但是服务端渲染的文件<code>.nuxt/dist/server/index.ssr.html</code>却没有，其内容大概如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> &#123;&#123; <span class="attr">html_attrs</span> &#125;&#125;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 省略部分内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> &#123;&#123; <span class="attr">body_attrs</span> &#125;&#125;&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  &#123;&#123; APP &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际运行的时候<code>script</code>标签是服务端渲染时动态在上述APP变量处生成的，这个时候我们就需要对渲染的HTML模板APP处进行修改，可以直接使用<code>Nuxt</code>的钩子函数，在<code>nuxt.config.js</code>文件，导出的json中添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hooks: &#123;</span><br><span class="line">  <span class="string">'vue-renderer'</span>: &#123;</span><br><span class="line">    ssr: &#123;</span><br><span class="line">      templateParams(templateParams) &#123;</span><br><span class="line">        templateParams.APP = templateParams.APP.replace(</span><br><span class="line">          /<span class="xml"><span class="tag">&lt;<span class="name">script</span>/<span class="attr">gi</span>,</span></span></span><br><span class="line">          '&lt;script crossorigin'</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Nuxt</code>更多hooks相关内容可以看<a href="https://zh.nuxtjs.org/api/configuration-hooks/#hooks-%E5%B1%9E%E6%80%A7" target="_blank" rel="noopener">这里</a>。</p><h2 id="编译时添加crossorigin"><a href="#编译时添加crossorigin" class="headerlink" title="编译时添加crossorigin"></a>编译时添加crossorigin</h2><p>还有一种情况就是类似于<code>动态import</code>，他生成script标签的时候是受babel来控制的。这时就需要修改webpack打包时候的配置了，好在<code>Nuxt</code>是支持修改配置的，再修改<code>nuxt.config.js</code>文件如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">build:&#123;</span><br><span class="line">  <span class="comment">// ... 其他配置</span></span><br><span class="line">  extend(config) &#123;</span><br><span class="line">    config.output.crossOriginLoading = <span class="string">'anonymous'</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack配置<code>crossOriginLoading</code>可以看<a href="https://www.webpackjs.com/configuration/output/#output-crossoriginloading" target="_blank" rel="noopener">这里</a>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上，需要在<code>nuxt.config.js</code>文件中添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  build:&#123;</span><br><span class="line">    <span class="comment">// ... 其他配置</span></span><br><span class="line"></span><br><span class="line">    extend(config) &#123;</span><br><span class="line">      config.output.crossOriginLoading = <span class="string">'anonymous'</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  hooks: &#123;</span><br><span class="line">    <span class="string">'vue-renderer'</span>: &#123;</span><br><span class="line">      ssr: &#123;</span><br><span class="line">        templateParams(templateParams) &#123;</span><br><span class="line">          templateParams.APP = templateParams.APP.replace(</span><br><span class="line">            /<span class="xml"><span class="tag">&lt;<span class="name">script</span>/<span class="attr">gi</span>,</span></span></span><br><span class="line">            '&lt;script crossorigin'</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近给项目添加一个错误日志上报的功能，由于使用的是第三方的服务，导致上报的错误信息都是&lt;code&gt;Script error.&lt;/code&gt;。&lt;a href=&quot;https://help.aliyun.com/knowledge_detail/88579.html?spm=51
      
    
    </summary>
    
    
      <category term="配置" scheme="https://www.kai666666.top/categories/%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="Nuxt" scheme="https://www.kai666666.top/tags/Nuxt/"/>
    
  </entry>
  
  <entry>
    <title>使用GithubActions自动部署应用到自己的服务器（ECS）</title>
    <link href="https://www.kai666666.top/2020/01/04/%E4%BD%BF%E7%94%A8GithubActions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88ECS%EF%BC%89/"/>
    <id>https://www.kai666666.top/2020/01/04/%E4%BD%BF%E7%94%A8GithubActions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88ECS%EF%BC%89/</id>
    <published>2020-01-04T08:08:40.000Z</published>
    <updated>2020-01-04T11:31:08.716Z</updated>
    
    <content type="html"><![CDATA[<p>最近折腾了一段时间的<a href="https://github.com/marketplace?type=actions" target="_blank" rel="noopener">Github Actions</a>，踩了不少坑，最后成功实现了自动部署到自己的服务器上。<strong>Github Actions</strong>是Github上一个类似于持续集成的功能，它允许你在一些节点上（如提交代码，特定时间等）触发一些操作。我们这里就利用它来实现自动部署应用到自己的服务器。</p><hr><h2 id="自动部署个人博客到服务器"><a href="#自动部署个人博客到服务器" class="headerlink" title="自动部署个人博客到服务器"></a>自动部署个人博客到服务器</h2><p>我的个人博客是使用<a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">Hexo</a>构建的，所以这里就以Hexo为例。</p><p>如果没有<strong>Github Actions</strong>我们部署自己的博客需要下面这么几步：</p><ol><li>运行<code>hexo clean</code>（或者<code>hexo c</code>）命令，清空缓存；</li><li>运行<code>hexo generate</code>（或者<code>hexo g</code>）命令，生成编译后的html文件；</li><li>运行<code>hexo deploy</code>（或者<code>hexo d</code>）命令，部署到github的某个分支上；</li><li>如果使用自己的服务器，那么还需要在自己服务器把代码拉下来。</li></ol><p>现在使用<strong>Github Actions</strong>的话只需要把master分支上的代码提交了，就可以了。具体做法如下：</p><ol><li><p>去Github点击Actions，然后在下面随便选择一个，就比如第一个<code>Set up this workflow</code>；</p><p><img src="/2020/01/04/使用GithubActions自动部署应用到自己的服务器（ECS）/1.png" alt="新建Github Actions"></p></li><li><p>把下面的<code>workflow</code>粘贴到编辑区；</p><p><img src="/2020/01/04/使用GithubActions自动部署应用到自己的服务器（ECS）/2.png" alt="修改workflow内容"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># deploy.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">deploy</span> <span class="string">blog</span> <span class="string">to</span> <span class="string">aliyun</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line"><span class="attr">    branches:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line">      <span class="comment"># 切换分支</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Checkout</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line">      <span class="comment"># 下载 git submodule</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">srt32/git-actions@v0.0.3</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          args:</span> <span class="string">git</span> <span class="string">submodule</span> <span class="string">update</span> <span class="bullet">--init</span> <span class="bullet">--recursive</span></span><br><span class="line">      <span class="comment"># 使用 node:10</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">use</span> <span class="string">Node.js</span> <span class="number">10</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          node-version:</span> <span class="number">10</span></span><br><span class="line">      <span class="comment"># npm install</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install -g hexo-cli</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          CI:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># build</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">hexo</span> <span class="string">build</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo generate</span></span><br><span class="line"><span class="string"></span><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          CI:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Deploy</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Deploy</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">easingthemes/ssh-deploy@v2.0.7</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          ARGS:</span> <span class="string">"-avz --delete"</span></span><br><span class="line"><span class="attr">          SOURCE:</span> <span class="string">"public/"</span></span><br><span class="line"><span class="attr">          REMOTE_HOST:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.REMOTE_HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          REMOTE_USER:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.REMOTE_USER</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          TARGET:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.TARGET</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>此时<strong>先别急着点提交</strong>，我们先看看我们的内容。文件中<code>#</code>后面的表示是注释，我们不用管。<code>name</code>相当于起了一个名字，这个名字可以在部署的时候看的到；只要能看出部署到了哪一步就可以。<code>on</code>表示触发条件，这里是<code>master</code>分支，<code>push</code>的时候会触发，也就是我们推送代码的时候触发这个<code>workflow</code>。我们再往下看，<code>jobs</code>表示执行的任务，一个<code>workflow</code>可以有多个任务。再下面<code>runs-on</code>表示运行环境，这里用的是最新的<code>ubuntu</code>系统（Linux系统的一种发行版）。<code>steps</code>是任务中具体的步骤，里面的每一个<code>-</code>代表了一个<code>action</code>，其中<code>action</code>也可以有自己的<code>name</code>，也可以使用<code>uses</code>使用别人写好的<code>action</code>。那怎么看有哪些<code>actions</code>呢？可以看<a href="https://github.com/marketplace?type=actions" target="_blank" rel="noopener">这里</a>，使用别人的<code>action</code>的格式是<code>uses: 用户名/action名称@版本号</code>。<br>此时我们可以看到我们的actions中有一些<code>切换分支</code>、<code>下载 git submodule</code>、<code>使用 node:10</code>、<code>npm install</code>等，相信你基本上都可以看得懂，最重要的就是最后一个<code>action</code>，他的目的就是把构建好的代码拷贝到自己的服务器的某个目录下。这里的值有些是字符串，有些值是<code>${ { secrets.XXX } }</code>这种格式，表示使用变量，使用的目的当然是为了安全，比如我们这里的<code>secrets.ACCESS_TOKEN</code>就是一个服务器的私钥，这种东西当然不能公开。现在我们现在设置这些值，所以开头的时候说<strong>先别急着点提交</strong>，因为此时提交了也会报错，下一步就先设置这些值。</p></li><li><p>在<code>secrets</code>下设置需要保密的值。</p><p>浏览器新增一个窗口，打开现在的这个项目的网页，然后点项目后面的<code>Settings</code>，然后点击<code>Secrets</code>中的<code>Add a new secret</code>按钮。</p><p><img src="/2020/01/04/使用GithubActions自动部署应用到自己的服务器（ECS）/3.png" alt="修改workflow内容"></p><p>首先添加的是<code>ACCESS_TOKEN</code>（名字与第二步的<code>workflow</code>中名字相同就可以了），这个值<strong>并不是你服务器的密码</strong>。那么这个值是什么呢？首先去你服务器的<code>~/.ssh</code>目录，此时目录下应该有4个文件，分别是<code>authorized_keys</code>、<code>id_rsa</code>、<code>id_rsa.pub</code>、<code>known_hosts</code>。如果没有<code>id_rsa</code>和<code>id_rsa.pub</code>的，可以使用<code>ssh-keygen</code>来生成，这两个文件就是安装Git时需要生成的私钥和公钥。这个时候你看看<code>authorized_keys</code>里面有没有内容，如果有内容说明你之前设置过，<code>ACCESS_TOKEN</code>的值就是<code>authorized_keys</code>所对应的私钥。如果没有内容的话，你可以直接设置为公钥<code>id_rsa.pub</code>的内容，如执行命令<code>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code>，此时就会把<code>id_rsa.pub</code>的内容写入<code>authorized_keys</code>中，然后把<code>ACCESS_TOKEN</code>的值设置为私钥<code>id_rsa</code>中的内容，你可以运行命令<code>cat ~/.ssh/id_rsa</code> 然后把内容复制一份到<code>ACCESS_TOKEN</code>中，如下：</p><p><img src="/2020/01/04/使用GithubActions自动部署应用到自己的服务器（ECS）/4.png" alt="设置ACCESS_TOKEN的值"></p><p>设置<code>ACCESS_TOKEN</code>值的<strong>目的是为了远程不使用密码来连接服务器</strong>，当<code>ACCESS_TOKEN</code>的值设置好了，接下来就容易了。依次设置<code>REMOTE_HOST</code>、<code>REMOTE_USER</code>、<code>TARGET</code>的值，比如<code>47.111.177.111</code>、<code>root</code>、<code>/home/blog</code>等，具体的根据自己的ECS来设置。</p></li><li><p>提交<code>workflow</code>文件。</p><p>浏览器的标签切换到刚才的那个页面，然后提交<code>workflow</code>。当提交后可以看到代码的根目录下多了一个<code>.github/workflows/deploy.yml</code>文件（文件名叫什么无所谓），然后点击Actions标签看有一个<code>workflow</code>在运行，等待一会，如果显示如下，说明就好了：</p><p><img src="/2020/01/04/使用GithubActions自动部署应用到自己的服务器（ECS）/5.png" alt="设置成功"></p><p>如果你老老实实按照上面的步骤来做的话，基本上不会有什么问题，如果你执行后报错如下，说明失败了：</p><p><img src="/2020/01/04/使用GithubActions自动部署应用到自己的服务器（ECS）/6.png" alt="设置失败"></p><p>上面这个错非常典型，主要原因有两种一个就是没有连上你的主机，你可以检查一下你的私钥什么的看有没有配置错误。另外有可能你是的目录配置的有问题。通常首次在云服务上部署的时候，云服务器运营商会发短信或者邮件告诉你登录异常，如果出现这个的时候说明已经登录上去了，那就很可能是目录等配置的有问题。</p></li></ol><p>通过上述设置后只要往master推送，就可以自动构建了，非常方便。</p><h2 id="自动部署前端应用到服务器"><a href="#自动部署前端应用到服务器" class="headerlink" title="自动部署前端应用到服务器"></a>自动部署前端应用到服务器</h2><p>前端应用往往都是静态的页面，大多数都会基于<code>vue-cli</code>或者<code>create-react-app</code>等脚手架来开发的。这些脚手架构造的应用往往运行<code>npm run build</code>命令，然后生成<code>dist</code>目录，再通过<code>nginx</code>等服务器来启动。我们这里也使用这样的场景。</p><p>上面我们使用的是Github自带的创建方式，现在我们直接在代码的根目录创建<code>.github/workflows/deploy.yml</code>文件。然后在项目的<code>Settings</code>下的<code>Secrets</code>里面添加上面的内容，最后复制如下代码到<code>.github/workflows/deploy.yml</code>文件中：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># deploy.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">deploy</span> <span class="string">to</span> <span class="string">aliyun</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line"><span class="attr">    branches:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line">      <span class="comment"># 切换分支</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Checkout</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line">      <span class="comment"># 下载 git submodule</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">srt32/git-actions@v0.0.3</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          args:</span> <span class="string">git</span> <span class="string">submodule</span> <span class="string">update</span> <span class="bullet">--init</span> <span class="bullet">--recursive</span></span><br><span class="line">      <span class="comment"># 使用 node:10</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">use</span> <span class="string">Node.js</span> <span class="number">10</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          node-version:</span> <span class="number">10</span></span><br><span class="line">      <span class="comment"># npm install</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">and</span> <span class="string">build</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string">          npm run build</span></span><br><span class="line"><span class="string"></span><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          CI:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># Deploy</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Deploy</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">easingthemes/ssh-deploy@v2.0.7</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          ARGS:</span> <span class="string">"-avz --delete"</span></span><br><span class="line"><span class="attr">          SOURCE:</span> <span class="string">"dist/"</span></span><br><span class="line"><span class="attr">          REMOTE_HOST:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.REMOTE_HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          REMOTE_USER:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.REMOTE_USER</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">          TARGET:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.TARGET</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到步骤和之前的基本上如出一辙。</p><h2 id="题外话：使用ACCESS-TOKEN是否安全"><a href="#题外话：使用ACCESS-TOKEN是否安全" class="headerlink" title="题外话：使用ACCESS_TOKEN是否安全"></a>题外话：使用ACCESS_TOKEN是否安全</h2><p>是否安全呢？首先需要告诉你的是，如果有人知道<code>ACCESS_TOKEN</code>与你的服务器的地址那么就可以不用密码登录到你的服务器。但是Github作为一个有责任的、受社会监督的公司，是绝对不会泄露和使用你的这些数据的。但是你需要确保你添加<code>Secrets</code>时的网络环境是否安全。总的来说，<strong>安全是相对的</strong>，使用Github Actions提交的安全隐患是有的，不过大多数情况下还是认为可以信赖的。</p><p>参考文档：</p><blockquote><p><a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener">GitHub Actions 入门教程 - 阮一峰</a><br><a href="http://www.ruanyifeng.com/blog/2019/12/github_actions.html" target="_blank" rel="noopener">GitHub Actions 教程：定时发送天气邮件 - 阮一峰</a><br><a href="https://didiheng.com/front/2019-12-11.html" target="_blank" rel="noopener">真香！GitHub Action一键部署 - Yopai</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近折腾了一段时间的&lt;a href=&quot;https://github.com/marketplace?type=actions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Actions&lt;/a&gt;，踩了不少坑，最后成功实现了自动部署到自己的服务
      
    
    </summary>
    
    
      <category term="Node" scheme="https://www.kai666666.top/categories/Node/"/>
    
    
      <category term="Github Actiona" scheme="https://www.kai666666.top/tags/Github-Actiona/"/>
    
  </entry>
  
  <entry>
    <title>Three.js教程（4）：相机</title>
    <link href="https://www.kai666666.top/2019/12/23/Three.js%E6%95%99%E7%A8%8B%EF%BC%884%EF%BC%89%EF%BC%9A%E7%9B%B8%E6%9C%BA/"/>
    <id>https://www.kai666666.top/2019/12/23/Three.js%E6%95%99%E7%A8%8B%EF%BC%884%EF%BC%89%EF%BC%9A%E7%9B%B8%E6%9C%BA/</id>
    <published>2019-12-23T07:12:47.000Z</published>
    <updated>2019-12-23T08:20:46.253Z</updated>
    
    <content type="html"><![CDATA[<p>相机这部分的内容并不是很多，Three.js主要支持两种相机，一种是<code>PerspectiveCamera</code>即<code>透视投影摄像机</code>，另一种是<code>OrthographicCamera</code>即<code>正交投影摄像机</code>。两种相机都是继承自<code>Camera</code>对象，<code>Camera</code>对象又是继承自<code>Object3D</code>。</p><hr><h2 id="透视投影摄像机"><a href="#透视投影摄像机" class="headerlink" title="透视投影摄像机"></a>透视投影摄像机</h2><p>透视投影摄像机（PerspectiveCamera）是最常用的摄像机，他跟我们的眼睛类似，<strong>越近的物体看到的越大，越远的物体看到的越小</strong>。<br>PerspectiveCamera的构造方法有4个参数，分别是<strong>视场、长宽比、近处距离、远处距离</strong>，其中视场表示眼睛看到的度数，比如人类可以看到前面一半左右，所以人类的视场就是180°，而火影忍者中，日向一族有一种技能叫白眼，使用该技能后其视场可以接近360°，该值默认值是50°。第二个参数长宽比一般设置为<code>canvas.width/canvas.height</code>，对于长等于屏幕的长，宽等于屏幕的宽时一般是<code>window.innerWidth/window.innerHeight</code>。最后两个近处的距离和远处的距离通常视情况而定，往往近处距离是<code>0.1</code>远处距离是<code>1000</code>。</p><p>我们先来看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> camera, scene, renderer;</span><br><span class="line"><span class="keyword">var</span> geometry, material, mesh;</span><br><span class="line"><span class="keyword">var</span> stats = <span class="keyword">new</span> Stats();</span><br><span class="line"><span class="keyword">var</span> gui = <span class="keyword">new</span> dat.GUI();</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x : <span class="number">0</span>,</span><br><span class="line">  y : <span class="number">2</span>,</span><br><span class="line">  z : <span class="number">50</span>,</span><br><span class="line">  rotateX : <span class="number">0</span>,</span><br><span class="line">  rotateY : <span class="number">0</span>,</span><br><span class="line">  rotateZ : <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boxSize = <span class="number">1</span>;<span class="comment">// 宽度是1</span></span><br><span class="line"><span class="keyword">var</span> rowNumber = <span class="number">10</span>;<span class="comment">// 每行10个</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  camera = <span class="keyword">new</span> THREE.PerspectiveCamera( <span class="number">50</span>, <span class="built_in">window</span>.innerWidth / <span class="built_in">window</span>.innerHeight, <span class="number">0.01</span>, <span class="number">100</span> );</span><br><span class="line"></span><br><span class="line">  scene = <span class="keyword">new</span> THREE.Scene();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rowNumber; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; rowNumber; j++) &#123;</span><br><span class="line">      geometry = <span class="keyword">new</span> THREE.BoxGeometry( boxSize, boxSize, boxSize );</span><br><span class="line">      material = <span class="keyword">new</span> THREE.MeshNormalMaterial();</span><br><span class="line">      mesh = <span class="keyword">new</span> THREE.Mesh( geometry, material );</span><br><span class="line">      scene.add( mesh );</span><br><span class="line">      <span class="comment">// 每个方块中间有一个空白间隙</span></span><br><span class="line">      mesh.position.x = -rowNumber * boxSize + <span class="number">2</span> * i * boxSize;</span><br><span class="line">      mesh.position.z = -rowNumber * boxSize + <span class="number">2</span> * j * boxSize;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  renderer = <span class="keyword">new</span> THREE.WebGLRenderer(&#123; <span class="attr">antialias</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  renderer.setSize( <span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight );</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild( renderer.domElement );</span><br><span class="line"></span><br><span class="line">  stats.showPanel(<span class="number">0</span>); <span class="comment">// 0: fps, 1: ms, 2: mb, 3+: custom</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild( stats.dom );</span><br><span class="line"></span><br><span class="line">  gui.add(obj, <span class="string">'x'</span>, <span class="number">-20</span>, <span class="number">20</span>).onChange(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>)</span>&#123;</span><br><span class="line">    camera.position.x = val;</span><br><span class="line">  &#125;);</span><br><span class="line">  gui.add(obj, <span class="string">'y'</span>, <span class="number">-20</span>, <span class="number">20</span>).onChange(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>)</span>&#123;</span><br><span class="line">    camera.position.y = val;</span><br><span class="line">  &#125;);</span><br><span class="line">  gui.add(obj, <span class="string">'z'</span>, <span class="number">0</span>, <span class="number">100</span>).onChange(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>)</span>&#123;</span><br><span class="line">    camera.position.z = val;</span><br><span class="line">  &#125;);</span><br><span class="line">  gui.add(obj, <span class="string">'rotateX'</span>, <span class="number">-45</span>, <span class="number">45</span>).onChange(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>)</span>&#123;</span><br><span class="line">    camera.rotation.x = val / <span class="number">180</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">  &#125;);</span><br><span class="line">  gui.add(obj, <span class="string">'rotateY'</span>, <span class="number">-45</span>, <span class="number">45</span>).onChange(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>)</span>&#123;</span><br><span class="line">    camera.rotation.y = val / <span class="number">180</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">  &#125;);</span><br><span class="line">  gui.add(obj, <span class="string">'rotateZ'</span>, <span class="number">-45</span>, <span class="number">45</span>).onChange(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>)</span>&#123;</span><br><span class="line">    camera.rotation.z = val / <span class="number">180</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  camera.position.z = obj.z;</span><br><span class="line">  camera.position.y = obj.y;</span><br><span class="line">  <span class="comment">// 看向场景</span></span><br><span class="line">  camera.lookAt(scene.position);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  stats.update();</span><br><span class="line"></span><br><span class="line">  requestAnimationFrame( animate );</span><br><span class="line"></span><br><span class="line">  renderer.render( scene, camera );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line">animate();</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/12/23/Three.js教程（4）：相机/1.png" alt="透视投影摄像机"></p><p>这里我们唯一没有见过的API是<code>camera.lookAt</code>它表示看向哪里，它需要接受一个<code>Vector3</code>对象作为参数，也可以是3个参数，具体如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 看向(0,1,0)</span></span><br><span class="line">camera.lookAt(<span class="keyword">new</span> THREE.Vector3( <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> ));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 看向(0,1,0)</span></span><br><span class="line">camera.lookAt(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 看向某个位置 position是Object3D里面的一个属性表示位置 也是一个Vector3对象</span></span><br><span class="line">camera.lookAt(scene.position);</span><br></pre></td></tr></table></figure><h2 id="正交投影摄像机"><a href="#正交投影摄像机" class="headerlink" title="正交投影摄像机"></a>正交投影摄像机</h2><p>正交投影摄像机（OrthographicCamera）看到相同大小的物体，都是一样大的。其实相当于平行光照射到一个平面上的映射。<br>OrthographicCamera的构造方法有6个参数，分别是<code>left、right、top、bottom、near、far</code>，即左边、右边、上边、下边、近处和远处的位置，6个值刚好确定了一个长方体，正是投射的长方体。<br>我们来看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> camera, scene, renderer;</span><br><span class="line"><span class="keyword">var</span> geometry, material, mesh;</span><br><span class="line"><span class="keyword">var</span> stats = <span class="keyword">new</span> Stats();</span><br><span class="line"><span class="keyword">var</span> gui = <span class="keyword">new</span> dat.GUI();</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x : <span class="number">0</span>,</span><br><span class="line">  y : <span class="number">3</span>,</span><br><span class="line">  z : <span class="number">2</span>,</span><br><span class="line">  rotateX : <span class="number">0</span>,</span><br><span class="line">  rotateY : <span class="number">0</span>,</span><br><span class="line">  rotateZ : <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boxSize = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> rowNumber = <span class="number">10</span>;<span class="comment">// 每行10个</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 0.01, 100 );</span></span><br><span class="line">  <span class="comment">// 以屏幕为宽高</span></span><br><span class="line">  camera = <span class="keyword">new</span> THREE.OrthographicCamera(</span><br><span class="line">    <span class="built_in">window</span>.innerWidth / -rowNumber, <span class="built_in">window</span>.innerWidth / rowNumber,</span><br><span class="line">    <span class="built_in">window</span>.innerHeight / rowNumber, <span class="built_in">window</span>.innerHeight / - rowNumber, <span class="number">-300</span>, <span class="number">300</span> );</span><br><span class="line"></span><br><span class="line">  scene = <span class="keyword">new</span> THREE.Scene();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rowNumber; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; rowNumber; j++) &#123;</span><br><span class="line">      geometry = <span class="keyword">new</span> THREE.BoxGeometry( boxSize, boxSize, boxSize );</span><br><span class="line">      material = <span class="keyword">new</span> THREE.MeshNormalMaterial();</span><br><span class="line">      mesh = <span class="keyword">new</span> THREE.Mesh( geometry, material );</span><br><span class="line">      scene.add( mesh );</span><br><span class="line">      <span class="comment">// 每个方块中间有一个空白间隙</span></span><br><span class="line">      mesh.position.x = -rowNumber * boxSize + <span class="number">2</span> * i * boxSize ;</span><br><span class="line">      mesh.position.z = -rowNumber * boxSize + <span class="number">2</span> * j * boxSize;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  renderer = <span class="keyword">new</span> THREE.WebGLRenderer(&#123; <span class="attr">antialias</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  renderer.setSize( <span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight );</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild( renderer.domElement );</span><br><span class="line"></span><br><span class="line">  stats.showPanel(<span class="number">0</span>); <span class="comment">// 0: fps, 1: ms, 2: mb, 3+: custom</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild( stats.dom );</span><br><span class="line"></span><br><span class="line">  gui.add(obj, <span class="string">'x'</span>, <span class="number">-100</span>, <span class="number">100</span>).onChange(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>)</span>&#123;</span><br><span class="line">    camera.position.x = val;</span><br><span class="line">  &#125;);</span><br><span class="line">  gui.add(obj, <span class="string">'y'</span>, <span class="number">-100</span>, <span class="number">100</span>).onChange(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>)</span>&#123;</span><br><span class="line">    camera.position.y = val;</span><br><span class="line">  &#125;);</span><br><span class="line">  gui.add(obj, <span class="string">'z'</span>, <span class="number">-100</span>, <span class="number">100</span>).onChange(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>)</span>&#123;</span><br><span class="line">    camera.position.z = val;</span><br><span class="line">  &#125;);</span><br><span class="line">  gui.add(obj, <span class="string">'rotateX'</span>, <span class="number">-45</span>, <span class="number">45</span>).onChange(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>)</span>&#123;</span><br><span class="line">    camera.rotation.x = val / <span class="number">180</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">  &#125;);</span><br><span class="line">  gui.add(obj, <span class="string">'rotateY'</span>, <span class="number">-45</span>, <span class="number">45</span>).onChange(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>)</span>&#123;</span><br><span class="line">    camera.rotation.y = val / <span class="number">180</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">  &#125;);</span><br><span class="line">  gui.add(obj, <span class="string">'rotateZ'</span>, <span class="number">-45</span>, <span class="number">45</span>).onChange(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>)</span>&#123;</span><br><span class="line">    camera.rotation.z = val / <span class="number">180</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  camera.position.z = obj.z;</span><br><span class="line">  camera.position.y = obj.y;</span><br><span class="line">  <span class="comment">// 看向场景</span></span><br><span class="line">  camera.lookAt(scene.position);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  stats.update();</span><br><span class="line"></span><br><span class="line">  requestAnimationFrame( animate );</span><br><span class="line"></span><br><span class="line">  renderer.render( scene, camera );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line">animate();</span><br></pre></td></tr></table></figure><p>运行效果如下：</p><p><img src="/2019/12/23/Three.js教程（4）：相机/2.png" alt="正交投影摄像机"></p><p>从上可以看到，立方体的宽高基本上都是一样的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;相机这部分的内容并不是很多，Three.js主要支持两种相机，一种是&lt;code&gt;PerspectiveCamera&lt;/code&gt;即&lt;code&gt;透视投影摄像机&lt;/code&gt;，另一种是&lt;code&gt;OrthographicCamera&lt;/code&gt;即&lt;code&gt;正交投影摄像机&lt;/
      
    
    </summary>
    
    
      <category term="Three.js" scheme="https://www.kai666666.top/categories/Three-js/"/>
    
    
      <category term="Three.js" scheme="https://www.kai666666.top/tags/Three-js/"/>
    
  </entry>
  
  <entry>
    <title>Three.js教程（3）：场景</title>
    <link href="https://www.kai666666.top/2019/12/20/Three.js%E6%95%99%E7%A8%8B%EF%BC%883%EF%BC%89%EF%BC%9A%E5%9C%BA%E6%99%AF/"/>
    <id>https://www.kai666666.top/2019/12/20/Three.js%E6%95%99%E7%A8%8B%EF%BC%883%EF%BC%89%EF%BC%9A%E5%9C%BA%E6%99%AF/</id>
    <published>2019-12-20T07:02:13.000Z</published>
    <updated>2020-06-10T06:56:47.915Z</updated>
    
    <content type="html"><![CDATA[<p>场景（Scene）相当于是一个容器，可以在它上面添加光线，物体等，最后Three.js把它和相机一起渲染到DOM中。</p><hr><h2 id="Three-js中的坐标系"><a href="#Three-js中的坐标系" class="headerlink" title="Three.js中的坐标系"></a>Three.js中的坐标系</h2><p>在开始本章的时候我们需要先了解一下<code>Three.js</code>中的坐标系。<code>Three.js</code>的坐标系如下：</p><p><img src="/2019/12/20/Three.js教程（3）：场景/1.png" alt="坐标系"></p><p>由上，我们可知Three.js中的坐标系<code>X轴是水平朝右的，Y轴是垂直朝上的，Z轴垂直与屏幕朝向我们</code>，这与CSS中的坐标系的不同点在于，CSS的Y轴是垂直朝下的。下面给一个例子，可以供你更好的了解<code>Three.js</code>中的坐标系，请务必自己运行一下这个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> camera, scene, renderer;</span><br><span class="line"><span class="keyword">var</span> geometry, material, mesh;</span><br><span class="line"><span class="keyword">var</span> stats = <span class="keyword">new</span> Stats();</span><br><span class="line"><span class="keyword">var</span> gui = <span class="keyword">new</span> dat.GUI();</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x : <span class="number">0</span>,</span><br><span class="line">  y : <span class="number">0</span>,</span><br><span class="line">  z : <span class="number">0</span>,</span><br><span class="line">  rotateX : <span class="number">0</span>,</span><br><span class="line">  rotateY : <span class="number">0</span>,</span><br><span class="line">  rotateZ : <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  camera = <span class="keyword">new</span> THREE.PerspectiveCamera( <span class="number">50</span>, <span class="built_in">window</span>.innerWidth / <span class="built_in">window</span>.innerHeight, <span class="number">0.01</span>, <span class="number">10</span> );</span><br><span class="line">  camera.position.z = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">  scene = <span class="keyword">new</span> THREE.Scene();</span><br><span class="line">  geometry = <span class="keyword">new</span> THREE.BoxGeometry( <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span> );</span><br><span class="line">  material = <span class="keyword">new</span> THREE.MeshLambertMaterial();</span><br><span class="line">  mesh = <span class="keyword">new</span> THREE.Mesh( geometry, material );</span><br><span class="line">  mesh.receiveShadow = <span class="literal">true</span>;</span><br><span class="line">  scene.add( mesh );</span><br><span class="line"></span><br><span class="line">  renderer = <span class="keyword">new</span> THREE.WebGLRenderer(&#123; <span class="attr">antialias</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  renderer.setSize( <span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight );</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild( renderer.domElement );</span><br><span class="line"></span><br><span class="line">  stats.showPanel(<span class="number">0</span>); <span class="comment">// 0: fps, 1: ms, 2: mb, 3+: custom</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild( stats.dom );</span><br><span class="line"></span><br><span class="line">  gui.add(obj, <span class="string">'x'</span>, <span class="number">-3</span>, <span class="number">3</span>);</span><br><span class="line">  gui.add(obj, <span class="string">'y'</span>, <span class="number">-3</span>, <span class="number">3</span>);</span><br><span class="line">  gui.add(obj, <span class="string">'z'</span>, <span class="number">-3</span>, <span class="number">3</span>);</span><br><span class="line">  gui.add(obj, <span class="string">'rotateX'</span>, <span class="number">0</span>, <span class="number">360</span>);</span><br><span class="line">  gui.add(obj, <span class="string">'rotateY'</span>, <span class="number">0</span>, <span class="number">360</span>);</span><br><span class="line">  gui.add(obj, <span class="string">'rotateZ'</span>, <span class="number">0</span>, <span class="number">360</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  stats.update();</span><br><span class="line"></span><br><span class="line">  requestAnimationFrame( animate );</span><br><span class="line">  mesh.position.x = obj.x;</span><br><span class="line">  mesh.position.y = obj.y;</span><br><span class="line">  mesh.position.z = obj.z;</span><br><span class="line">  <span class="comment">// 需要把角度修改为弧度</span></span><br><span class="line">  mesh.rotation.x = obj.rotateX / <span class="number">180</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">  mesh.rotation.y = obj.rotateY / <span class="number">180</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">  mesh.rotation.z = obj.rotateZ / <span class="number">180</span> * <span class="built_in">Math</span>.PI;</span><br><span class="line">  renderer.render( scene, camera );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line">animate();</span><br></pre></td></tr></table></figure><p>效果图如下，你可以自己调一下参数：</p><p><img src="/2019/12/20/Three.js教程（3）：场景/2.png" alt="效果图"></p><h2 id="场景的属性和方法"><a href="#场景的属性和方法" class="headerlink" title="场景的属性和方法"></a>场景的属性和方法</h2><p>创建场景很简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();</span><br></pre></td></tr></table></figure><p>对于他的属性和方法也不是很多：</p><table><thead><tr><th>类型</th><th>名称</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>属性</td><td>fog</td><td>场景中雾的效果</td><td>null</td></tr><tr><td>属性</td><td>overrideMaterial</td><td>覆盖材质，如果有这个那么场景中物体的材质会被覆盖</td><td>null</td></tr><tr><td>属性</td><td>autoUpdate</td><td>自动更新</td><td>true</td></tr><tr><td>属性</td><td>background</td><td>背景</td><td>null</td></tr><tr><td>方法</td><td>toJSON()</td><td>把场景转换为JSON对象，可以供Three.js导入场景使用</td><td>-</td></tr><tr><td>方法</td><td>dispose()</td><td>清楚缓存数据</td><td>-</td></tr></tbody></table><p><code>THREE.Scene</code>的属性并不多，你可能会问，之前把<code>Mesh</code>添加到<code>Scene</code>中使用到了一个<code>add</code>方法怎么没写？确实场景是有这个方法的，更准确的说这个方法是来自它的父类<a href="https://threejs.org/docs/index.html#api/en/core/Object3D" target="_blank" rel="noopener">THREE.Object3D</a>的，它是好多Three.js对象的直接或间接父类，所以了解它的属性和方法非常有必要，由于篇幅有限，这里就不再叙述了，你可以在<a href="https://threejs.org/docs/index.html#api/en/core/Object3D" target="_blank" rel="noopener">这里</a>看一看。</p><h2 id="背景设置"><a href="#背景设置" class="headerlink" title="背景设置"></a>背景设置</h2><p>根据上面的API设置背景的话就非常简单了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scene.background = <span class="keyword">new</span> THREE.Color(<span class="string">'orange'</span>);</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="/2019/12/20/Three.js教程（3）：场景/3.png" alt="效果图"></p><p>注意这里必须是Color对象（而不是字符串的值，或者16进制的数字）。这里我们遇到了一个新的对象叫<code>Color</code>，该对象的参数表示什么颜色，主要有这么几种格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 颜色的关键字</span></span><br><span class="line"><span class="keyword">var</span> color = <span class="keyword">new</span> THREE.Color(<span class="string">'orange'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认背景，白色的 注意Three.js渲染的默认背景是黑色的</span></span><br><span class="line"><span class="keyword">var</span> color = <span class="keyword">new</span> THREE.Color();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 十六进制数字</span></span><br><span class="line"><span class="keyword">var</span> color = <span class="keyword">new</span> THREE.Color( <span class="number">0xff0000</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// RGB字符串</span></span><br><span class="line"><span class="keyword">var</span> color = <span class="keyword">new</span> THREE.Color(<span class="string">"rgb(255, 0, 0)"</span>);</span><br><span class="line"><span class="keyword">var</span> color = <span class="keyword">new</span> THREE.Color(<span class="string">"rgb(100%, 0%, 0%)"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// HSL字符串</span></span><br><span class="line"><span class="keyword">var</span> color = <span class="keyword">new</span> THREE.Color(<span class="string">"hsl(0, 100%, 50%)"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// RGB的值 取值范围0~1 如红色：</span></span><br><span class="line"><span class="keyword">var</span> color = <span class="keyword">new</span> THREE.Color( <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> );</span><br></pre></td></tr></table></figure><p>除了直接使用<code>scene.background</code>外还有另外一种设置背景颜色的方法是，就是设置清屏的颜色：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">renderer.setClearColor(<span class="keyword">new</span> THREE.Color(<span class="number">0xff0000</span>));</span><br></pre></td></tr></table></figure><p>两者之前<code>scene.background</code>的优先级会更高一些，因为scane相当于是在清屏的背景之上再绘制了一层。</p><h2 id="雾化效果"><a href="#雾化效果" class="headerlink" title="雾化效果"></a>雾化效果</h2><p>我们现在使用的是<code>MeshNormalMaterial</code>这个材质，要使用雾化效果和光线效果，那么需要<code>MeshLambertMaterial</code>或者<code>MeshPhongMaterial</code>这两种材质，具体的细节我们后面讨论。现在我们先把材质换成<code>MeshLambertMaterial</code>，然后做下面修改看看雾化效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scene.fog = <span class="keyword">new</span> THREE.Fog(<span class="number">0xffffff</span>, <span class="number">0.1</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>具体的效果需要手动修改z轴看来不同浓雾下物块的样子，效果如下：</p><p><img src="/2019/12/20/Three.js教程（3）：场景/4.png" alt="近处效果图"><br><img src="/2019/12/20/Three.js教程（3）：场景/5.png" alt="远处效果图"></p><p>这里需要注意一下我们的物块是黑色的即使修改材质<code>MeshLambertMaterial</code>的颜色也是黑色的，因为目前还没有添加光线。</p><p>上面我们使用了<code>Fog</code>对象，他的构造函数有3个参数，分别是<strong>颜色、雾的起始距离，雾的结束距离</strong>。<code>Fog</code>对象出来的雾是线性增长的，Three.js还提供了一种指数增长的雾是<code>FogExp2</code>，它有两个参数分别是颜色和浓度，可以如下设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scene.fog = <span class="keyword">new</span> THREE.FogExp2(<span class="number">0xffffff</span>, <span class="number">0.01</span>);</span><br></pre></td></tr></table></figure><h2 id="设置统一的材质"><a href="#设置统一的材质" class="headerlink" title="设置统一的材质"></a>设置统一的材质</h2><p>设置场景中所有物体的材质，其实是很简单的，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scene.overrideMaterial = <span class="keyword">new</span> THREE.MeshLambertMaterial(&#123;<span class="attr">color</span>: <span class="number">0xffffff</span>&#125;);</span><br></pre></td></tr></table></figure><p>由于我们目前还没有加入光线，所以现在看不了效果，这个例子先不做演示，只要记得有个方法可以设置就行了，到时候自己查一下基本上OK。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;场景（Scene）相当于是一个容器，可以在它上面添加光线，物体等，最后Three.js把它和相机一起渲染到DOM中。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Three-js中的坐标系&quot;&gt;&lt;a href=&quot;#Three-js中的坐标系&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="Three.js" scheme="https://www.kai666666.top/categories/Three-js/"/>
    
    
      <category term="Three.js" scheme="https://www.kai666666.top/tags/Three-js/"/>
    
  </entry>
  
  <entry>
    <title>Three.js教程（2）：工具篇</title>
    <link href="https://www.kai666666.top/2019/12/19/Three.js%E6%95%99%E7%A8%8B%EF%BC%882%EF%BC%89%EF%BC%9A%E5%B7%A5%E5%85%B7%E7%AF%87/"/>
    <id>https://www.kai666666.top/2019/12/19/Three.js%E6%95%99%E7%A8%8B%EF%BC%882%EF%BC%89%EF%BC%9A%E5%B7%A5%E5%85%B7%E7%AF%87/</id>
    <published>2019-12-19T07:34:59.000Z</published>
    <updated>2019-12-22T09:42:50.662Z</updated>
    
    <content type="html"><![CDATA[<p>上一章我们基本上领略了<code>three.js</code>的魅力，这一章我们先不急着深入<code>three.js</code>，先学习2个非常有用的工具库，分别是<code>stats.js</code>和<code>dat.gui</code>，也许你没有听过两个库，但是很可能你见过他们。</p><hr><h2 id="stats-js"><a href="#stats-js" class="headerlink" title="stats.js"></a>stats.js</h2><p><a href="https://github.com/mrdoob/stats.js" target="_blank" rel="noopener">stats.js</a>是<code>three.js</code>的作者<code>mrdoob</code>开发的一个简单的JavaScript性能监控的库。使用方法很简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stats = <span class="keyword">new</span> Stats();</span><br><span class="line">stats.showPanel( <span class="number">1</span> ); <span class="comment">// 0: fps, 1: ms, 2: mb, 3+: custom</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild( stats.dom );</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  stats.begin();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// monitored code goes here</span></span><br><span class="line"></span><br><span class="line">  stats.end();</span><br><span class="line">  requestAnimationFrame( animate );\</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requestAnimationFrame( animate );</span><br></pre></td></tr></table></figure><p>它有3种模式，从上面的注释中也可以看的出来：</p><blockquote><p>0：<strong>FPS</strong>，最近1秒的帧率，值越大表示性能越好；<br>1：<strong>MS</strong>，每一帧需要多少毫秒，值越小表示性能越好；<br>2：<strong>MB</strong>，所分配的内存，谷歌浏览器启动的时候需要添加参数<code>--enable-precise-memory-info</code>；<br>3或者以上：用户自定义（通常用不到这个）。</p></blockquote><p>通常我们关注最多的是<code>0</code>这种模式，一般60Hz CPU的浏览器，一秒最多可以绘制60次，也就是FPS接近60，如果远远低于这个值，说明代码效率不高或者代码有问题。上述<code>stats</code>对象还有一个方法<code>stats.update();</code>，如果我们只关注每2次绘制间代码的FPS，那么用这个方法更方便，<a href="https://github.com/mrdoob/stats.js/blob/master/src/Stats.js" target="_blank" rel="noopener">stats.js的源代码点击这里查看</a>。</p><p>最后我们把上一章的最后一个例子使用<code>stats.js</code>框架来处理：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ &lt;script type="text/javascript" src="../node_modules/stats.js/build/stats.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line">  &lt;script type="text/javascript"&gt;</span><br><span class="line">    var camera, scene, renderer;</span><br><span class="line">    var geometry, material, mesh;</span><br><span class="line"><span class="addition">+    var stats = new Stats();</span></span><br><span class="line"></span><br><span class="line">    function init() &#123;</span><br><span class="line">      // 此处代码和上章的相同就不再重复</span><br><span class="line"></span><br><span class="line"><span class="addition">+      stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom</span></span><br><span class="line"><span class="addition">+      document.body.appendChild( stats.dom );</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function animate() &#123;</span><br><span class="line"><span class="addition">+      stats.update();</span></span><br><span class="line"></span><br><span class="line">      // 此处代码和上章的相同就不再重复</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    init();</span><br><span class="line">    animate();</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果如下，可以看到我们的代码基本上都是60FPS，说明我们的代码性能还不错。</p><p><img src="/2019/12/19/Three.js教程（2）：工具篇/1.png" alt="stats.js的使用"></p><h2 id="dat-gui"><a href="#dat-gui" class="headerlink" title="dat.gui"></a>dat.gui</h2><p><a href="https://github.com/dataarts/dat.gui" target="_blank" rel="noopener">dat.gui</a>是一个轻量级的JavaScript控制库，它可以很方便控制变量的值。首先需要引入<code>dat.gui.css</code>，然后需要引入<code>dat.gui.min.js</code>，我们来一个猛一点的<a href="https://github.com/KaiOrange/three.js-demo/blob/master/02/03_%E5%BC%95%E5%85%A5dat.gui.html" target="_blank" rel="noopener">例子</a>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../node_modules/dat.gui/build/dat.gui.css"</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    *&#123;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">      padding: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  我叫<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"nameSpan"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../node_modules/dat.gui/build/dat.gui.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> gui = <span class="keyword">new</span> dat.GUI(&#123;</span></span><br><span class="line"><span class="actionscript">      name: <span class="string">'测试GUI'</span>,</span></span><br><span class="line"><span class="actionscript">      useLocalStorage: <span class="literal">false</span>, <span class="comment">// 使用LocalStorage来存储</span></span></span><br><span class="line"><span class="actionscript">      closeOnTop: <span class="literal">false</span><span class="comment">// 关闭按钮是否在顶部</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> obj = &#123;</span></span><br><span class="line"><span class="actionscript">      name: <span class="string">'Orange'</span>,</span></span><br><span class="line"><span class="undefined">      age: 18,</span></span><br><span class="line"><span class="undefined">      money: 100,</span></span><br><span class="line"><span class="actionscript">      isStudent: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">      hobby1:<span class="string">'篮球'</span>,</span></span><br><span class="line"><span class="actionscript">      hobby2:<span class="string">'Run'</span>,</span></span><br><span class="line"><span class="actionscript">      color1: <span class="string">'#FF0000'</span>, <span class="comment">// CSS string</span></span></span><br><span class="line"><span class="actionscript">      color2: [ <span class="number">0</span>, <span class="number">128</span>, <span class="number">255</span> ], <span class="comment">// RGB array</span></span></span><br><span class="line"><span class="actionscript">      color3: [ <span class="number">0</span>, <span class="number">128</span>, <span class="number">255</span>, <span class="number">0.3</span> ], <span class="comment">// RGB with alpha</span></span></span><br><span class="line"><span class="actionscript">      color4: &#123; h: <span class="number">350</span>, s: <span class="number">0.9</span>, v: <span class="number">0.3</span> &#125;, <span class="comment">// Hue, saturation, value</span></span></span><br><span class="line"><span class="undefined">      num: 0,</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 请允许我这里写汉字</span></span></span><br><span class="line"><span class="actionscript">      打印: <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.num++;<span class="comment">// 非GUI改变变量 需要listen</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> folder1 = gui.addFolder(<span class="string">'基本信息'</span>);</span></span><br><span class="line"><span class="actionscript">    folder1.open(); <span class="comment">// 打开第一个文件夹</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 首先赋值一次</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $nameSpan = <span class="built_in">document</span>.getElementById(<span class="string">'nameSpan'</span>);</span></span><br><span class="line"><span class="undefined">    $nameSpan.innerText = obj.name;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 监听到name的变化 则写入DOM</span></span></span><br><span class="line"><span class="actionscript">    folder1.add(obj, <span class="string">'name'</span>).onChange(<span class="function"><span class="keyword">function</span> <span class="params">(val)</span></span>&#123;</span></span><br><span class="line"><span class="undefined">      $nameSpan.innerText = val;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="actionscript">    folder1.add(obj, <span class="string">'age'</span>, <span class="number">0</span>, <span class="number">100</span>,<span class="number">1</span>);<span class="comment">// 0~100每次增加或者减少1</span></span></span><br><span class="line"><span class="actionscript">    folder1.add(obj, <span class="string">'money'</span>,<span class="number">0</span>,<span class="number">1000</span>);<span class="comment">// 0~1000</span></span></span><br><span class="line"><span class="actionscript">    folder1.add(obj, <span class="string">'isStudent'</span>);<span class="comment">// 如果值是boolean类型的那么就会当做复选框</span></span></span><br><span class="line"><span class="actionscript">    folder1.add(obj, <span class="string">'hobby1'</span>,[<span class="string">'篮球'</span>,<span class="string">'游泳'</span>,<span class="string">'跑步'</span>]);<span class="comment">// 如果第三个值是数组或者对象那么会渲染成选项框</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 如果第三个值是数组或者对象那么会渲染成选项框</span></span></span><br><span class="line"><span class="actionscript">    folder1.add(obj, <span class="string">'hobby2'</span>,&#123;<span class="string">'篮球'</span>:<span class="string">'Basketball'</span>,<span class="string">'游泳'</span>:<span class="string">'Swimming'</span>,<span class="string">'跑步'</span>:<span class="string">'Run'</span>&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> folder2 = gui.addFolder(<span class="string">'颜色'</span>);</span></span><br><span class="line"><span class="actionscript">    folder2.addColor(obj, <span class="string">'color1'</span>);</span></span><br><span class="line"><span class="actionscript">    folder2.addColor(obj, <span class="string">'color2'</span>);</span></span><br><span class="line"><span class="actionscript">    folder2.addColor(obj, <span class="string">'color3'</span>);</span></span><br><span class="line"><span class="actionscript">    folder2.addColor(obj, <span class="string">'color4'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 添加到gui上</span></span></span><br><span class="line"><span class="actionscript">    gui.add(obj, <span class="string">'打印'</span>);<span class="comment">// 如果是函数的话 那么就会当做按钮</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 注意这里的num是在 打印 函数中改变的 而不是手动修改GUI的 这种非GUI改变的时候需要监听 那么需要调用.listen()方法</span></span></span><br><span class="line"><span class="actionscript">    gui.add(obj, <span class="string">'num'</span>).listen();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.appendChild(gui.domElement);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>大致效果如下：</p><p><img src="/2019/12/19/Three.js教程（2）：工具篇/2.png" alt="测试dat.gui"></p><p>是不是有点似曾相识？其实网上好多<code>canvas</code>和<code>three.js</code>的特效都会引入这个库来简单的控制变量，这个库最6的地方是当GUI上的值改变的时候，内存中的数据也变了，你可以点击打印按钮来打印对象obj的值。</p><h2 id="dat-gui的使用"><a href="#dat-gui的使用" class="headerlink" title="dat.gui的使用"></a>dat.gui的使用</h2><p>现在我们们在我们上个例子中引入dat.gui：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!-- 上面部分跟之前相同 --&gt;</span><br><span class="line"><span class="addition">+  &lt;link rel="stylesheet" href="../node_modules/dat.gui/build/dat.gui.css"&gt;&lt;/link&gt;</span></span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    *&#123;</span><br><span class="line">      margin: 0;</span><br><span class="line">      padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script type="text/javascript" src="../node_modules/three/build/three.js"&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script type="text/javascript" src="../node_modules/stats.js/build/stats.min.js"&gt;&lt;/script&gt;</span><br><span class="line"><span class="addition">+  &lt;script type="text/javascript" src="../node_modules/dat.gui/build/dat.gui.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line">  &lt;script type="text/javascript"&gt;</span><br><span class="line">    var camera, scene, renderer;</span><br><span class="line">    var geometry, material, mesh;</span><br><span class="line">    var stats = new Stats();</span><br><span class="line"><span class="addition">+    var gui = new dat.GUI();</span></span><br><span class="line"><span class="addition">+    var obj = &#123;</span></span><br><span class="line"><span class="addition">+      speedX : 0.01,</span></span><br><span class="line"><span class="addition">+      speedY : 0.02</span></span><br><span class="line"><span class="addition">+    &#125;;</span></span><br><span class="line"></span><br><span class="line">    function init() &#123;</span><br><span class="line">      // 此处代码和上章的相同就不再重复</span><br><span class="line"></span><br><span class="line"><span class="addition">+      gui.add(obj, 'speedX', 0, 0.1);</span></span><br><span class="line"><span class="addition">+      gui.add(obj, 'speedY', 0, 0.1);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function animate() &#123;</span><br><span class="line">      stats.update();</span><br><span class="line"></span><br><span class="line">      requestAnimationFrame( animate );</span><br><span class="line"><span class="addition">+      mesh.rotation.x += obj.speedX;</span></span><br><span class="line"><span class="addition">+      mesh.rotation.y += obj.speedY;</span></span><br><span class="line">      renderer.render( scene, camera );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    init();</span><br><span class="line">    animate();</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>出来的效果如图所示，你可以修改GUI的值来改变小方块的转速。</p><p><img src="/2019/12/19/Three.js教程（2）：工具篇/3.png" alt="dat.gui的使用"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一章我们基本上领略了&lt;code&gt;three.js&lt;/code&gt;的魅力，这一章我们先不急着深入&lt;code&gt;three.js&lt;/code&gt;，先学习2个非常有用的工具库，分别是&lt;code&gt;stats.js&lt;/code&gt;和&lt;code&gt;dat.gui&lt;/code&gt;，也许你没有听过两
      
    
    </summary>
    
    
      <category term="Three.js" scheme="https://www.kai666666.top/categories/Three-js/"/>
    
    
      <category term="Three.js" scheme="https://www.kai666666.top/tags/Three-js/"/>
    
  </entry>
  
  <entry>
    <title>Three.js教程（1）：初识three.js</title>
    <link href="https://www.kai666666.top/2019/12/19/Three.js%E6%95%99%E7%A8%8B%EF%BC%881%EF%BC%89%EF%BC%9A%E5%88%9D%E8%AF%86three.js/"/>
    <id>https://www.kai666666.top/2019/12/19/Three.js%E6%95%99%E7%A8%8B%EF%BC%881%EF%BC%89%EF%BC%9A%E5%88%9D%E8%AF%86three.js/</id>
    <published>2019-12-19T02:13:08.000Z</published>
    <updated>2019-12-22T09:41:35.617Z</updated>
    
    <content type="html"><![CDATA[<p>今天开始我们进入一个新的世界，那就是3D世界。由于我自己也是刚接触到这块内容，所以如果文章中有问题，请尽快在文章最后的留言板中请指出。本教程有配套代码仓库，请点击<a href="https://github.com/KaiOrange/three.js-demo" target="_blank" rel="noopener">https://github.com/KaiOrange/three.js-demo</a>。</p><hr><h2 id="为什么要使用three-js"><a href="#为什么要使用three-js" class="headerlink" title="为什么要使用three.js"></a>为什么要使用three.js</h2><p>要回答为什么要使用<a href="https://github.com/mrdoob/three.js" target="_blank" rel="noopener">three.js</a>？首先我们想想什么是three.js？官方给的简绍很简单：<code>JavaScript 3D library</code>，就是一个JavaScript的3D库。前端实现3D效果无非这么几种方式：</p><blockquote><p>1.CSS 3D技术；<br>2.SVG；<br>3.WebGL技术；<br>4.Canvas或者图片等来模拟3D。</p></blockquote><p>其中最后一种是用其他技术或方法去模拟3D效果，前3种才是浏览器真正意义上支持的3D技术。而three.js直接支持前3种渲染方式，可以看出three.js的强大。<br>大多情况下如果是为了展示3D的效果，那么直接用图片就可以了，如果要动起来的话，视频往往可以胜任。但是如果有交互视频就不行了，前端的3D技术弥补了视频的交互部分。而交互中逻辑性比较多，这样的话JavaScript来做会更有优势，所以WebGL技术就脱颖而出，首先我们来看一个WebGL的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"webgl"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> projectionMatrix = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span></span><br><span class="line"><span class="undefined">      [2.41421, 0, 0, 0,</span></span><br><span class="line"><span class="undefined">      0, 2.41421, 0, 0,</span></span><br><span class="line"><span class="undefined">      0, 0, -1.002002, -1,</span></span><br><span class="line"><span class="undefined">      0, 0, -0.2002002, 0]);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> modelViewMatrix = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(</span></span><br><span class="line"><span class="undefined">      [1, 0, 0, 0,</span></span><br><span class="line"><span class="undefined">      0, 1, 0, 0,</span></span><br><span class="line"><span class="undefined">      0, 0, 1, 0,</span></span><br><span class="line"><span class="undefined">      0, 0, -3.333, 1]);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// Create the vertex data for a square to be drawn</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createSquare</span><span class="params">(gl)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> vertexBuffer = gl.createBuffer();</span></span><br><span class="line"><span class="undefined">      gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> verts = [</span></span><br><span class="line"><span class="undefined">        .5,  .5,  0.0,</span></span><br><span class="line"><span class="undefined">        -.5,  .5,  0.0,</span></span><br><span class="line"><span class="undefined">        .5, -.5,  0.0,</span></span><br><span class="line"><span class="undefined">        -.5, -.5,  0.0</span></span><br><span class="line"><span class="undefined">      ];</span></span><br><span class="line"><span class="javascript">      gl.bufferData(gl.ARRAY_BUFFER, <span class="keyword">new</span> <span class="built_in">Float32Array</span>(verts), gl.STATIC_DRAW);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> square = &#123;buffer:vertexBuffer, vertSize:<span class="number">3</span>, nVerts:<span class="number">4</span>, primtype:gl.TRIANGLE_STRIP&#125;;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> square;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createShader</span><span class="params">(gl, str, type)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> shader;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (type == <span class="string">"fragment"</span>) &#123;</span></span><br><span class="line"><span class="undefined">          shader = gl.createShader(gl.FRAGMENT_SHADER);</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="string">"vertex"</span>) &#123;</span></span><br><span class="line"><span class="undefined">          shader = gl.createShader(gl.VERTEX_SHADER);</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      gl.shaderSource(shader, str);</span></span><br><span class="line"><span class="undefined">      gl.compileShader(shader);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) &#123;</span></span><br><span class="line"><span class="undefined">          alert(gl.getShaderInfoLog(shader));</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> shader;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vertexShaderSource =</span></span><br><span class="line"><span class="actionscript">    <span class="string">"attribute vec3 vertexPos;\n"</span> +</span></span><br><span class="line"><span class="actionscript">    <span class="string">"uniform mat4 modelViewMatrix;\n"</span> +</span></span><br><span class="line"><span class="actionscript">    <span class="string">"uniform mat4 projectionMatrix;\n"</span> +</span></span><br><span class="line"><span class="actionscript">    <span class="string">"void main(void) &#123;\n"</span> +</span></span><br><span class="line"><span class="actionscript">    <span class="string">"   // Return the transformed and projected vertex value\n"</span> +</span></span><br><span class="line"><span class="actionscript">    <span class="string">"   gl_Position = projectionMatrix * modelViewMatrix * \n"</span> +</span></span><br><span class="line"><span class="actionscript">    <span class="string">"   vec4(vertexPos, 1.0);\n"</span> +</span></span><br><span class="line"><span class="actionscript">    <span class="string">"&#125;\n"</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> fragmentShaderSource =</span></span><br><span class="line"><span class="actionscript">    <span class="string">"void main(void) &#123;\n"</span> +</span></span><br><span class="line"><span class="actionscript">    <span class="string">"   // Return the pixel color: always output white\n"</span> +</span></span><br><span class="line"><span class="actionscript">    <span class="string">"   gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n"</span> +</span></span><br><span class="line"><span class="actionscript">    <span class="string">"&#125;\n"</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> shaderProgram, shaderVertexPositionAttribute, shaderProjectionMatrixUniform, shaderModelViewMatrixUniform;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">initShader</span><span class="params">(gl)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// load and compile the fragment and vertex shader</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> fragmentShader = createShader(gl, fragmentShaderSource, <span class="string">"fragment"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> vertexShader = createShader(gl, vertexShaderSource, <span class="string">"vertex"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// link them together into a new program</span></span></span><br><span class="line"><span class="undefined">      shaderProgram = gl.createProgram();</span></span><br><span class="line"><span class="undefined">      gl.attachShader(shaderProgram, vertexShader);</span></span><br><span class="line"><span class="undefined">      gl.attachShader(shaderProgram, fragmentShader);</span></span><br><span class="line"><span class="undefined">      gl.linkProgram(shaderProgram);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// get pointers to the shader params</span></span></span><br><span class="line"><span class="actionscript">      shaderVertexPositionAttribute = gl.getAttribLocation(shaderProgram, <span class="string">"vertexPos"</span>);</span></span><br><span class="line"><span class="undefined">      gl.enableVertexAttribArray(shaderVertexPositionAttribute);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      shaderProjectionMatrixUniform = gl.getUniformLocation(shaderProgram, <span class="string">"projectionMatrix"</span>);</span></span><br><span class="line"><span class="actionscript">      shaderModelViewMatrixUniform = gl.getUniformLocation(shaderProgram, <span class="string">"modelViewMatrix"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) &#123;</span></span><br><span class="line"><span class="actionscript">          alert(<span class="string">"Could not initialise shaders"</span>);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">draw</span><span class="params">(gl, obj)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// clear the background (with black)</span></span></span><br><span class="line"><span class="undefined">      gl.clearColor(0.0, 0.0, 0.0, 1.0);</span></span><br><span class="line"><span class="undefined">      gl.clear(gl.COLOR_BUFFER_BIT);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// set the vertex buffer to be drawn</span></span></span><br><span class="line"><span class="undefined">      gl.bindBuffer(gl.ARRAY_BUFFER, obj.buffer);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// set the shader to use</span></span></span><br><span class="line"><span class="undefined">      gl.useProgram(shaderProgram);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// connect up the shader parameters: vertex position and projection/model matrices</span></span></span><br><span class="line"><span class="actionscript">      gl.vertexAttribPointer(shaderVertexPositionAttribute, obj.vertSize, gl.FLOAT, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="actionscript">      gl.uniformMatrix4fv(shaderProjectionMatrixUniform, <span class="literal">false</span>, projectionMatrix);</span></span><br><span class="line"><span class="actionscript">      gl.uniformMatrix4fv(shaderModelViewMatrixUniform, <span class="literal">false</span>, modelViewMatrix);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// draw the object</span></span></span><br><span class="line"><span class="undefined">      gl.drawArrays(obj.primtype, 0, obj.nVerts);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"webgl"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> gl = canvas.getContext(<span class="string">"webgl"</span>) || canvas.getContext(<span class="string">"experimental-webgl"</span>);</span></span><br><span class="line"><span class="undefined">      gl.viewport(0, 0, canvas.width, canvas.height);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> square = createSquare(gl);</span></span><br><span class="line"><span class="undefined">      initShader(gl);</span></span><br><span class="line"><span class="undefined">      draw(gl, square);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码比较长，出来的效果很简单，只是一个小方块（只是一个正方形，还不是正方体）。具体效果如下：</p><p><img src="/2019/12/19/Three.js教程（1）：初识three.js/1.png" alt="WebGL实现小方块"></p><p>我们来简单的看一下代码吧，代码中通过<code>canvas.getContext(&quot;webgl&quot;)</code>来获取到<code>WebGL</code>的上下文，对于稍微低版本的浏览器可以使用<code>experimental-webgl</code>来获取，还记得之前canvas吗？当时是通过<code>2d</code>来获取canvas的上下文对象。上述代码中，核心代码是<code>initShader()</code>方法，它初始化了<a href="https://baike.baidu.com/item/%E7%9D%80%E8%89%B2%E5%99%A8/411001?fr=aladdin" target="_blank" rel="noopener">着色器</a>，我们这里用到了2个着色器：fragmentShader和vertexShader。正如他们的命名一样，第一个是<code>片元着色器</code>，第二个是<code>顶点着色器</code>。上述中还有2段String类型的代码，也就是字符串<code>vertexShaderSource</code>和字符串<code>fragmentShaderSource</code>的值，这两段代码是一种被称作<code>GLSL ES</code>的着色器语言（Shading Language），其实WebGL这一套都是来自于一种叫做OpenGL的技术，完全可以理解为WebGL提供了一层API来调用系统底层的OpenGL。也就是说WebGL把字符串的<code>GLSL ES</code>代码变成系统可以执行的OpenGL的代码，期间经过<code>compileShader(),shaderSource(),compileShader(),attachShader()linkProgram()</code>等多个JS方法。</p><p>到这里估计你也头大了，什么着色器，什么<code>GLSL ES</code>，什么Shader，把人搞的痛苦地！！！别急，正因为原生的WebGL这么晦涩难懂，所以才有了我们的主角three.js。现在你可以忘掉上面的内容，因为three.js封装的特别好，根本看不到任何WebGL的影子，你再也不需要去了解什么着色器，更不用写<code>GLSL ES</code>，我们先来看一个更高级且更简单的three.js的例子。</p><h2 id="初识three-js"><a href="#初识three-js" class="headerlink" title="初识three.js"></a>初识three.js</h2><p>three.js可以使用模块化引入，当然也可以直接用<code>script标签</code>来引入。在具体项目中完全可以搭配React和Vue这样的MVVM框架，这里图简单就直接用<code>script标签</code>来引入。当写这篇文章的时候three.js的最新版本是<code>r111</code>，你可以在<a href="https://github.com/mrdoob/three.js/releases" target="_blank" rel="noopener">这里</a>查看最新的版本。</p><p>我们首先来运行一下官方给的例子，源代码点击<a href="https://github.com/KaiOrange/three.js-demo/blob/master/01/02_%E5%88%9D%E8%AF%86three.js.html" target="_blank" rel="noopener">这里</a>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    *&#123;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">      padding: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../node_modules/three/build/three.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> camera, scene, renderer;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> geometry, material, mesh;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      camera = <span class="keyword">new</span> THREE.PerspectiveCamera( <span class="number">70</span>, <span class="built_in">window</span>.innerWidth / <span class="built_in">window</span>.innerHeight, <span class="number">0.01</span>, <span class="number">10</span> );</span></span><br><span class="line"><span class="undefined">      camera.position.z = 1;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      scene = <span class="keyword">new</span> THREE.Scene();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      geometry = <span class="keyword">new</span> THREE.BoxGeometry( <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span> );</span></span><br><span class="line"><span class="actionscript">      material = <span class="keyword">new</span> THREE.MeshNormalMaterial();</span></span><br><span class="line"><span class="actionscript">      mesh = <span class="keyword">new</span> THREE.Mesh( geometry, material );</span></span><br><span class="line"><span class="undefined">      scene.add( mesh );</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      renderer = <span class="keyword">new</span> THREE.WebGLRenderer(&#123; antialias: <span class="literal">true</span> &#125;);</span></span><br><span class="line"><span class="javascript">      renderer.setSize( <span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight );</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.body.appendChild( renderer.domElement );</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">animate</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">      requestAnimationFrame( animate );</span></span><br><span class="line"><span class="undefined">      mesh.rotation.x += 0.01;</span></span><br><span class="line"><span class="undefined">      mesh.rotation.y += 0.02;</span></span><br><span class="line"><span class="undefined">      renderer.render( scene, camera );</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    init();</span></span><br><span class="line"><span class="undefined">    animate();</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码非常少，出来的效果却是很惊艳：</p><p><img src="/2019/12/19/Three.js教程（1）：初识three.js/2.png" alt="初识three.js"></p><p>我们来分析一下官方例子的代码，首先创建了一个相机（THREE.PerspectiveCamera），它描述了眼睛看的方向；然后创建了一个场景（THREE.Scene）；再之后把小物块（THREE.Mesh）放在场景上；最后渲染出来（THREE.WebGLRenderer）的DOM元素（canvas）追加到body上。<code>animate</code>函数的作用是启动动画，动画的原理就是每次改变一点点，然后重新渲染，这跟Canvas是一模一样的，不了解这块的同学可以看看<a href="/2019/06/30/Canvas系列（10）：动画初级/#more">这篇</a>。<br>最后我们给出一张图来结束本章，这个就是three.js的基本模式，其中光线我们还没有涉及到：</p><p><img src="/2019/12/19/Three.js教程（1）：初识three.js/3.png" alt="对象架构"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天开始我们进入一个新的世界，那就是3D世界。由于我自己也是刚接触到这块内容，所以如果文章中有问题，请尽快在文章最后的留言板中请指出。本教程有配套代码仓库，请点击&lt;a href=&quot;https://github.com/KaiOrange/three.js-demo&quot; tar
      
    
    </summary>
    
    
      <category term="Three.js" scheme="https://www.kai666666.top/categories/Three-js/"/>
    
    
      <category term="Three.js" scheme="https://www.kai666666.top/tags/Three-js/"/>
    
  </entry>
  
  <entry>
    <title>前端3D文字效果</title>
    <link href="https://www.kai666666.top/2019/12/06/%E5%89%8D%E7%AB%AF3D%E6%96%87%E5%AD%97%E6%95%88%E6%9E%9C/"/>
    <id>https://www.kai666666.top/2019/12/06/%E5%89%8D%E7%AB%AF3D%E6%96%87%E5%AD%97%E6%95%88%E6%9E%9C/</id>
    <published>2019-12-06T04:16:54.000Z</published>
    <updated>2019-12-06T06:21:23.722Z</updated>
    
    <content type="html"><![CDATA[<p>今天来讨论一下前端的3D文字效果，如图：</p><p><img src="/2019/12/06/前端3D文字效果/1.png" alt="3D文字效果"></p><hr><h3 id="字体阴影"><a href="#字体阴影" class="headerlink" title="字体阴影"></a>字体阴影</h3><p>看到这样的效果，首先想到的当然是CSS中的文字阴影来实现，首先给出HTNL代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font-3d"</span>&gt;</span>CSS 3D效果<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来就是添加样式了，大笔一挥如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#c7f6f6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-3d</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffebcd</span>;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">4px</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">#158af7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最关键的一个样式是<code>text-shadow</code>，他的签名是这样的：<code>text-shadow: h-shadow v-shadow blur color;</code>，其中第一个参数<code>h-shadow</code>是水平方向的偏移量，正数是向右偏移，负数是向左偏移；第二个参数<code>v-shadow</code>是垂直方向偏移量，正数是向下偏移，负数是向上偏移；第三个参数<code>blur</code>是模糊大小，值越大越模糊，该值可以不写，默认是0，表示不模糊；第四个参数<code>color</code>是颜色，同样可以不写，默认是当前字体的颜色。</p><p>此时我们发现，单纯的阴影边界地方有菱角，缺乏立体感，具体效果如下：</p><p><img src="/2019/12/06/前端3D文字效果/2.png" alt="3D阴影"></p><h3 id="多重阴影模拟"><a href="#多重阴影模拟" class="headerlink" title="多重阴影模拟"></a>多重阴影模拟</h3><p>为了让效果更好，我们可以写多重阴影来模拟，阴影每次增加1点（这里是1px），这样看着就像阴影连着似得，如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#c7f6f6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-3d</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffebcd</span>;</span><br><span class="line">  <span class="attribute">text-shadow</span>:</span><br><span class="line">    <span class="number">1px</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#158af7</span>,</span><br><span class="line">    <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="number">#158af7</span>,</span><br><span class="line">    <span class="number">3px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#158af7</span>,</span><br><span class="line">    <span class="number">4px</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">#158af7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的效果，就跟刚开始看到的是一样的了。你可以点击<a href="https://codepen.io/kaiorange/pen/mdyJgjZ" target="_blank" rel="noopener">这里</a>自己修改一下样式试试。</p><h3 id="three-js中的3D字体"><a href="#three-js中的3D字体" class="headerlink" title="three.js中的3D字体"></a>three.js中的3D字体</h3><p><a href="https://github.com/mrdoob/three.js" target="_blank" rel="noopener">three.js</a>是非常著名的3D库，写个3D字当然是不在话下（单纯的用这做3D字绝对是大材小用）。<code>three.js</code>使用3D字体大概需要2步骤，第1步引入<code>typeface</code>类型的字体，第2步把<code>TextGeometry</code>文字结构对象加入到场景中。具体的可以看一下官方给出的<a href="https://threejs.org/docs/index.html#api/en/geometries/TextGeometry" target="_blank" rel="noopener">这篇文章</a>，这里就不再重复叙述了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天来讨论一下前端的3D文字效果，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/12/06/前端3D文字效果/1.png&quot; alt=&quot;3D文字效果&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;字体阴影&quot;&gt;&lt;a href=&quot;#字体阴影&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="CSS" scheme="https://www.kai666666.top/categories/CSS/"/>
    
    
      <category term="CSS效果" scheme="https://www.kai666666.top/tags/CSS%E6%95%88%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>解决Electron安装报错问题</title>
    <link href="https://www.kai666666.top/2019/11/06/%E8%A7%A3%E5%86%B3Electron%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
    <id>https://www.kai666666.top/2019/11/06/%E8%A7%A3%E5%86%B3Electron%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</id>
    <published>2019-11-06T02:00:00.000Z</published>
    <updated>2019-12-07T02:03:46.091Z</updated>
    
    <content type="html"><![CDATA[<p>Electron是一个优秀的跨平台桌面端应用的框架，<a href="https://electronjs.org/" target="_blank" rel="noopener">官网</a>给出的简绍很简单：<code>使用 JavaScript, HTML 和 CSS 构建跨平台的桌面应用</code>。好多朋友也想试试使用前端技术来做一个桌面应用，但是往往在安装的时候就直接报错了，大多数的错误是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error: read ECONNRESET</span><br><span class="line"># 或者</span><br><span class="line">Error: Electron failed to install correctly ...</span><br></pre></td></tr></table></figure><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>解决办法也是简单的，如果你是安装失败了，那么先把<code>node_modules</code>中的<code>electron</code>删掉，然后重新开始下面的步骤。</p><ol><li><p>设置淘宝镜像源（推荐使用nrm，这一步是为了保证其他依赖不报错）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量并安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Mac系统</span></span><br><span class="line">ELECTRON_MIRROR=http://npm.taobao.org/mirrors/electron/ npm install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Windows系统</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局依赖cross-env为了把参数写入环境变量 当然直接修改环境变量也可以</span></span><br><span class="line">npm install -g cross-env</span><br><span class="line">cross-env ELECTRON_MIRROR=http://npm.taobao.org/mirrors/electron npm install</span><br></pre></td></tr></table></figure><p>然后稍等片刻就可以了。</p></li></ol><h3 id="深入研究"><a href="#深入研究" class="headerlink" title="深入研究"></a>深入研究</h3><p>通过上面的设置基本上就解决了Electron安装的问题，现在我们可以深入一下，看看它是怎么解决的。首先我们进入它的<a href="https://github.com/electron/electron" target="_blank" rel="noopener">源代码</a>，这个里面有一个npm的文件夹，这个路径下存放的就是npm上的Electron依赖。打开看看你会发现只有几个文件，没错Electron的依赖包就这么点东西。</p><p><img src="/2019/11/06/解决Electron安装报错问题/1.png" alt="Electron依赖中的内容"></p><p>那么这么点东西怎么做跨平台的应用的呢？首先看一下<code>package.json</code>文件，为了方便查看，我拷贝过来一份，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "main": "index.js",</span><br><span class="line">  "types": "electron.d.ts",</span><br><span class="line">  "bin": &#123;</span><br><span class="line">    "electron": "cli.js"</span><br><span class="line">  &#125;,</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "postinstall": "node install.js"</span><br><span class="line">  &#125;,</span><br><span class="line">  "dependencies": &#123;</span><br><span class="line">    "@electron/get": "^1.0.1",</span><br><span class="line">    "@types/node": "^12.0.12",</span><br><span class="line">    "extract-zip": "^1.0.3"</span><br><span class="line">  &#125;,</span><br><span class="line">  "engines": &#123;</span><br><span class="line">    "node": "&gt;= 8.6"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内容很少，但有2个部分很重要。一个是<code>script</code>，可以看到里面有一个<code>postinstall</code>的钩子命令，这条命令会在<strong>下载完依赖以后执行一下</strong>，也就说当依赖安装完后会执行<code>node install.js</code>。另外一个重要的部分就是<code>bin</code>，它指定了<strong>运行全局依赖时的入口文件</strong>，也就是<code>cli.js</code>文件，我们稍后再说这个。</p><p>先简单的看一下<code>install.js</code>，里面最主要的部分是调用了方法<code>downloadArtifact</code>，用来下载跟平台相关的Electron可执行文件。下载完后调用<code>extractFile</code>方法，把文件解压了，最后在<code>path.txt</code>中把执行文件的路径写进去，这个路径下是不同平台下的可执行文件的路径。</p><p><img src="/2019/11/06/解决Electron安装报错问题/2.png" alt="install.js"></p><p>最后我们看一下他是从哪里下载的。首先<code>downloadArtifact</code>方法是在<a href="https://github.com/electron/get" target="_blank" rel="noopener">@electron/get</a>依赖里面。我们进入到<code>src/index</code>中。</p><p><img src="/2019/11/06/解决Electron安装报错问题/3.png" alt="downloadArtifact方法"></p><p>此时我们可以看到url是通过<code>getArtifactRemoteURL</code>方法获取的，然后我们看一下<code>getArtifactRemoteURL</code>方法，源码在<a href="https://github.com/electron/get/blob/master/src/artifact-utils.ts" target="_blank" rel="noopener">这里</a>。</p><p><img src="/2019/11/06/解决Electron安装报错问题/4.png" alt="getArtifactRemoteURL方法"></p><p>在<code>getArtifactRemoteURL</code>方法中，可以看到，基础路径<code>base</code>是通过<code>mirrorVar</code>函数返回的，默认情况是没有nightly的，所以默认情况下是下面这个样子的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">process.env[<span class="string">`NPM_CONFIG_ELECTRON_MIRROR`</span>] ||</span><br><span class="line">process.env[<span class="string">`npm_config_electron_MIRROR`</span>] ||</span><br><span class="line">process.env[<span class="string">`npm_package_config_electron_mirror`</span>] ||</span><br><span class="line">process.env[<span class="string">`ELECTRON_MIRROR`</span>] ||</span><br><span class="line">options[<span class="string">'mirror'</span>] ||</span><br><span class="line">defaultValue</span><br></pre></td></tr></table></figure><p>而我们很少传入env的，options也没有mirror，所以通常是<code>defaultValue</code>，具体值如下：</p><p><img src="/2019/11/06/解决Electron安装报错问题/5.png" alt="defaultValue"></p><p>综上，我们可以看到默认情况下安装的时候会在<a href="https://github.com/electron/electron/releases" target="_blank" rel="noopener">github的release处</a>下载一个平台相关的可执行文件。但是往往在国内github会很慢，所以这就导致了下载失败的问题，如果我们的env中传入<code>ELECTRON_MIRROR</code>，那就会走该值所对应的地址，通常我们使用淘宝的镜像<code>http://npm.taobao.org/mirrors/electron</code>。</p><p>同样的，在构建Windows系统的时候可能会用到依赖<code>windows-build-tools</code>，该依赖会安装一个Python，这时可以使用淘宝的镜像文件会更快一些：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Macos</span></span><br><span class="line">"PYTHON_MIRROR=http://npm.taobao.org/mirrors/python" npm install --global --production windows-build-tools</span><br><span class="line"><span class="meta">#</span><span class="bash"> Windows</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 若全局已经安装过cross-env那么就不需要再安装了</span></span><br><span class="line">npm install -g cross-env</span><br><span class="line">cross-env PYTHON_MIRROR=http://npm.taobao.org/mirrors/python npm install --global --production windows-build-tools</span><br></pre></td></tr></table></figure><p>淘宝更多的开源软件的镜像可以参考<a href="https://npm.taobao.org/mirrors" target="_blank" rel="noopener">这里</a>。</p><h3 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h3><p>下载过程基本上我们已经明白了，现在说一下启动过程。一般启动Electron的时候调用的命令是<code>electron .</code>，而electron命令其实是调用依赖包中的<a href="https://github.com/electron/electron/blob/master/npm/cli.js" target="_blank" rel="noopener">cli.js</a>文件，该文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> electron = <span class="built_in">require</span>(<span class="string">'./'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proc = <span class="built_in">require</span>(<span class="string">'child_process'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = proc.spawn(electron, process.argv.slice(<span class="number">2</span>), &#123; <span class="attr">stdio</span>: <span class="string">'inherit'</span>, <span class="attr">windowsHide</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">child.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">code</span>) </span>&#123;</span><br><span class="line">  process.exit(code)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleTerminationSignal = <span class="function"><span class="keyword">function</span> (<span class="params">signal</span>) </span>&#123;</span><br><span class="line">  process.on(signal, <span class="function"><span class="keyword">function</span> <span class="title">signalHandler</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!child.killed) &#123;</span><br><span class="line">      child.kill(signal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleTerminationSignal(<span class="string">'SIGINT'</span>)</span><br><span class="line">handleTerminationSignal(<span class="string">'SIGTERM'</span>)</span><br></pre></td></tr></table></figure><p>其中<code>var electron = require(&#39;./&#39;)</code>的时候是引入当前文件夹下的<code>index.js</code>文件，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pathFile = path.join(__dirname, <span class="string">'path.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElectronPath</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (fs.existsSync(pathFile)) &#123;</span><br><span class="line">    <span class="keyword">var</span> executablePath = fs.readFileSync(pathFile, <span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">if</span> (process.env.ELECTRON_OVERRIDE_DIST_PATH) &#123;</span><br><span class="line">      <span class="keyword">return</span> path.join(process.env.ELECTRON_OVERRIDE_DIST_PATH, executablePath)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path.join(__dirname, <span class="string">'dist'</span>, executablePath)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Electron failed to install correctly, please delete node_modules/electron and try installing again'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = getElectronPath()</span><br></pre></td></tr></table></figure><p><code>index.js</code>文件内容很少，主要是返回了一个字符串的地址，也就是当前路径下的dist文件夹下的可执行文件的路径。还记得下载完后往<code>path.txt</code>里面写了一个可执行文件的路径吗？</p><p>我们再回到<code>cli.js</code>文件中，从代码中可以看出，里面启动了一个子进程，用子进程启动Electron的可执行文件，并且把参数传进去了。最后如果主进程中断或者出现错误，那么就把子进程杀掉。当然你也可以直接双击dist下的可执行文件，它会启动一个默认的页面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Electron是一个优秀的跨平台桌面端应用的框架，&lt;a href=&quot;https://electronjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;给出的简绍很简单：&lt;code&gt;使用 JavaScript, HTML 和 CSS
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.kai666666.top/categories/JavaScript/"/>
    
    
      <category term="Electron" scheme="https://www.kai666666.top/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>《世界尽头的咖啡馆》读书笔记</title>
    <link href="https://www.kai666666.top/2019/10/09/%E3%80%8A%E4%B8%96%E7%95%8C%E5%B0%BD%E5%A4%B4%E7%9A%84%E5%92%96%E5%95%A1%E9%A6%86%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.kai666666.top/2019/10/09/%E3%80%8A%E4%B8%96%E7%95%8C%E5%B0%BD%E5%A4%B4%E7%9A%84%E5%92%96%E5%95%A1%E9%A6%86%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2019-10-09T11:29:25.000Z</published>
    <updated>2019-10-29T10:19:11.786Z</updated>
    
    <content type="html"><![CDATA[<p>本书剧情很简单：主人公因为堵车，选择开往另外一条路，结果迷路了。机缘巧合之下，主人公来到了一家名叫“你为什么来这里咖啡馆”，在咖啡馆内，主人公与凯西、迈克、安妮等人聊了一晚上。就是这一晚上的聊天，改变了主人公的一生。<br><img src="/2019/10/09/《世界尽头的咖啡馆》读书笔记/1.jpg" alt="《世界尽头的咖啡馆》"></p><hr><ol><li>人到绝境，必能逢生。</li><li>思考三个问题：你为什么来这里（一个人为什么而存在）？你害怕死亡吗？你满足吗？</li><li>“今天的午餐时间早就过去了，反倒是离明天的早餐时间更近了”（换个角度思考问题）。</li><li>有些事情不是要去“面对”，而是要去“迎接”。如果有一天你决定放下那种感觉（害怕困难），就勇敢做出选择吧，只有你自己才能给你自己做决定。</li><li>在我过去的人生中，我所作出的大部分决定都是为了回应他人的期待，比如说家人的建议、文化环境带来的压力和别人的看法。</li><li>一个人要想知道如何实现自己的存在意义，应该去探索和迎接与存在意义相关的各种事物。</li><li>你和你想做的事情不在一个频道，你就会浪费许多精力。等你有机会做你想做的事时，你可能已经没有力气或时间了。即在反向浪上浪费的时间和精力越多，留给正向浪的时间和精力就越少。如果一个22岁毕业的人，每天用在处理邮件上的时间是20分钟，那么按照平均75岁的寿命来算，他一辈子1年的时间将用在处理邮件上。</li><li>好多人努力赚钱，为了退休后过上好日子。其实每一天都是一个机会，每一天都可以做自己想做的事，根本不需要等到“退休”。</li><li>为什么人们把那么多时间花在准备工作上，而不是直接去做自己想做的事。<br> 部分原因就是在于我们每天都暴露在大量的营销信息中，如果不谨慎点儿，我们肯定会把自己的幸福和满足寄托在某样产品或服务上。最后我们会陷入一种财务困境，必须不断去做事情来挣钱，尽管那些事情不是我们真正想做的。<br> 还有一个问题，因为做了一份没有满足感的工作，并且花了很多时间在上面，就会觉得越来越不满足。于是我们盼望着退休，等到退休的那天，我们再也不用工作了，就可以做自己想做的事了。<br> 由于每天做的不是自己想做的事，为了弥补心中因此产生的空虚，我们会买更多东西，希望那些商品如广告上表现的那样可以给我们带来满足感。<br> 但不幸的是，我们买的越多，要付的账就越多，就越需要花更多的时间工作，这样才能为一切买单。同样的我们花在工作上的时间并非发自内心的，所以投入工作的时间越多，我们就会产生越多不满，因此我们留给真正想做的事的时间就更少了。</li><li>某样东西是否能让你的生活更圆满，是你自己说了算，和别人告诉你它圆不圆满无关。</li><li>大多数人每天想的事情里并没有死亡的概念。但随着时间一天天过去，人活在世上，剩给自己的时间越来越少，大家的潜意思里很清楚，死亡在靠近。所以，他们害怕未来有一天，他们再也没有机会了。他们害怕死亡降临的那一天。</li><li>只有当你弄清自己为什么存在，并且开始为这个存在意义做出实际努力后，你才能感到满足。</li><li>想象一下这样的后果。你的生活方式与你的生存意义一致，你可以用一生的时间来做你想做的事情，因为你已经弄清楚了自己存在的意义。但是等你到了退休的时候发现自己没有很多钱，那你是否不开心？</li><li>对于大多数人如果弄清了自己为什么存在，并开始做自己认为可以实现自己目标的事情，那么很有可能不会像整日工作的时候那么看重钱。</li><li>为了自己生存意义而努力的人，往往富有激情和热情，而这往往会感染别人，使得他们会主动帮助你；即使他们帮助不了你，他们会告诉别人，就这样通过一个人告诉另一个人，那么你将会有一大波的潜在帮手。所以这样的人往往运气不会差。</li><li>不管别人让我们相信什么，不管我们在广告里听到什么，不管我们对工作的高压有什么感觉，我们每个人都可以把握什么中的每一刻。大多数人在各种各样的外界力量的影响下，总是努力调整自己，不知不觉地被他们控制了。永远不要因为其他人或事失去对自己命运的掌控。要积极地选择自己的人生道路，不然就只能被动接受安排。</li><li>人不迈出第一步，就站在原地等待。如果有人真想知道他为什么存在，他就得为自己找出答案。没有统一适用于所有人的生存意义，但是可以试试找一个地方集中精力思考问题。体验不同的事物，接触不同的理念，留意自己对各种事物的反应，这些都有助于我们寻找答案。</li><li>生活本来就很精彩，只不过有人没有发现自己是作者，没发现他们可以按自己的想法创作。</li><li>大多数人的路途会在这里结束：他们窥探篱笆墙上的小洞，清楚地看到他们想过的那种生活，但出于一些原因，他们不会打开门，走进那种生活。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本书剧情很简单：主人公因为堵车，选择开往另外一条路，结果迷路了。机缘巧合之下，主人公来到了一家名叫“你为什么来这里咖啡馆”，在咖啡馆内，主人公与凯西、迈克、安妮等人聊了一晚上。就是这一晚上的聊天，改变了主人公的一生。&lt;br&gt;&lt;img src=&quot;/2019/10/09/《世界
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://www.kai666666.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="人生哲学" scheme="https://www.kai666666.top/tags/%E4%BA%BA%E7%94%9F%E5%93%B2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>基于Electron的touchbar开发</title>
    <link href="https://www.kai666666.top/2019/09/21/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84touchbar%E5%BC%80%E5%8F%91/"/>
    <id>https://www.kai666666.top/2019/09/21/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84touchbar%E5%BC%80%E5%8F%91/</id>
    <published>2019-09-21T05:31:35.000Z</published>
    <updated>2019-10-31T06:06:41.833Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://electronjs.org/" target="_blank" rel="noopener">Electron</a>是<code>使用 JavaScript, HTML 和 CSS 构建跨平台的桌面应用</code>的一个框架，本人之前写的一个放烟花的程序<a href="https://github.com/KaiOrange/fireworks-cool" target="_blank" rel="noopener">fireworks-cool</a>就是基于这套框架来做的。electron在跨平台应用方面做的还是挺好的，著名的编辑器<code>VS Code</code>与<code>Atom</code>都是使用<code>Electron</code>来开发的。有了<code>Node</code>，前端工程师可以直接干后端的事了；有了<code>Electron</code>，前端工程师可以直接干桌面应用工程师的事了。昨天研究这个<code>touchbar</code>，真心感觉到了<code>JavaScript</code>的无所不能属性，明天我们开发一个操作系统😊。<br>吹了这么多<code>Electron</code>，我们再说说<code>touchbar</code>吧。我觉得<code>touchbar</code>是<code>Mac</code>上一个鸡肋的功能，我在使用<code>Mac</code>的时候很少去关注<code>touchbar</code>。昨天忽然想到<code>Electron</code>可以开发桌面应用，那么是否可以做<code>touchbar</code>相关的功能呢？于是看了下它的官方文档，发现确实是可以开发<code>touchbar</code>相关的功能，不过目前<code>Electron</code>的<code>touchbar</code>还是<strong>实验性的API</strong>，后续有可能更改也有可能去掉，不过并不影响我们先玩玩它。玩玩它后，你会发现鸡肋的<code>touchbar</code>还是有点意思的。当然<code>touchbar</code>是<code>Mac</code>特有的硬件，如果不是<code>Mac</code>的小伙伴就体验不了本章的内容了。</p><hr><h3 id="运行官方的例子"><a href="#运行官方的例子" class="headerlink" title="运行官方的例子"></a>运行官方的例子</h3><p>官方给了一个老虎机的一个例子，这个例子还是很有趣的，感兴趣的可以直接<a href="https://electronjs.org/docs/api/touch-bar#touchbarescapeitem" target="_blank" rel="noopener">点击这里</a>查看。如果连接打不开，可以直接看下面的代码，我已经帮你拷贝好了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow, TouchBar &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; TouchBarLabel, TouchBarButton, TouchBarSpacer &#125; = TouchBar</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> spinning = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Reel labels</span></span><br><span class="line"><span class="keyword">const</span> reel1 = <span class="keyword">new</span> TouchBarLabel()</span><br><span class="line"><span class="keyword">const</span> reel2 = <span class="keyword">new</span> TouchBarLabel()</span><br><span class="line"><span class="keyword">const</span> reel3 = <span class="keyword">new</span> TouchBarLabel()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Spin result label</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">new</span> TouchBarLabel()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Spin button</span></span><br><span class="line"><span class="keyword">const</span> spin = <span class="keyword">new</span> TouchBarButton(&#123;</span><br><span class="line">  label: <span class="string">'🎰 Spin'</span>,</span><br><span class="line">  backgroundColor: <span class="string">'#7851A9'</span>,</span><br><span class="line">  click: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Ignore clicks if already spinning</span></span><br><span class="line">    <span class="keyword">if</span> (spinning) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    spinning = <span class="literal">true</span></span><br><span class="line">    result.label = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> timeout = <span class="number">10</span></span><br><span class="line">    <span class="keyword">const</span> spinLength = <span class="number">4</span> * <span class="number">1000</span> <span class="comment">// 4 seconds</span></span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="built_in">Date</span>.now()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> spinReels = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      updateReels()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((<span class="built_in">Date</span>.now() - startTime) &gt;= spinLength) &#123;</span><br><span class="line">        finishSpin()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Slow down a bit on each spin</span></span><br><span class="line">        timeout *= <span class="number">1.1</span></span><br><span class="line">        setTimeout(spinReels, timeout)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    spinReels()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getRandomValue = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> values = [<span class="string">'🍒'</span>, <span class="string">'💎'</span>, <span class="string">'7️⃣'</span>, <span class="string">'🍊'</span>, <span class="string">'🔔'</span>, <span class="string">'⭐'</span>, <span class="string">'🍇'</span>, <span class="string">'🍀'</span>]</span><br><span class="line">  <span class="keyword">return</span> values[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * values.length)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateReels = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  reel1.label = getRandomValue()</span><br><span class="line">  reel2.label = getRandomValue()</span><br><span class="line">  reel3.label = getRandomValue()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> finishSpin = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> uniqueValues = <span class="keyword">new</span> <span class="built_in">Set</span>([reel1.label, reel2.label, reel3.label]).size</span><br><span class="line">  <span class="keyword">if</span> (uniqueValues === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// All 3 values are the same</span></span><br><span class="line">    result.label = <span class="string">'💰 Jackpot!'</span></span><br><span class="line">    result.textColor = <span class="string">'#FDFF00'</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (uniqueValues === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 2 values are the same</span></span><br><span class="line">    result.label = <span class="string">'😍 Winner!'</span></span><br><span class="line">    result.textColor = <span class="string">'#FDFF00'</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// No values are the same</span></span><br><span class="line">    result.label = <span class="string">'🙁 Spin Again'</span></span><br><span class="line">    result.textColor = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  spinning = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> touchBar = <span class="keyword">new</span> TouchBar(&#123;</span><br><span class="line">  items: [</span><br><span class="line">    spin,</span><br><span class="line">    <span class="keyword">new</span> TouchBarSpacer(&#123; <span class="attr">size</span>: <span class="string">'large'</span> &#125;),</span><br><span class="line">    reel1,</span><br><span class="line">    <span class="keyword">new</span> TouchBarSpacer(&#123; <span class="attr">size</span>: <span class="string">'small'</span> &#125;),</span><br><span class="line">    reel2,</span><br><span class="line">    <span class="keyword">new</span> TouchBarSpacer(&#123; <span class="attr">size</span>: <span class="string">'small'</span> &#125;),</span><br><span class="line">    reel3,</span><br><span class="line">    <span class="keyword">new</span> TouchBarSpacer(&#123; <span class="attr">size</span>: <span class="string">'large'</span> &#125;),</span><br><span class="line">    result</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">window</span></span><br><span class="line"></span><br><span class="line">app.once(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">window</span> = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    frame: <span class="literal">false</span>,</span><br><span class="line">    titleBarStyle: <span class="string">'hiddenInset'</span>,</span><br><span class="line">    width: <span class="number">200</span>,</span><br><span class="line">    height: <span class="number">200</span>,</span><br><span class="line">    backgroundColor: <span class="string">'#000'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">window</span>.loadURL(<span class="string">'about:blank'</span>)</span><br><span class="line">  <span class="built_in">window</span>.setTouchBar(touchBar)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行上面的代码：</p><ol><li>建立一个文件夹，比如<code>touchbar-demo</code>，再创建一个文件<code>touchbar.js</code>，将上面的代码拷贝进去。</li><li><p>当前目录下，在命令行输入下面的内容来安装<code>Electron</code>。</p><blockquote><p>ELECTRON_MIRROR=<a href="http://npm.taobao.org/mirrors/electron/" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/electron/</a> npm install electron</p></blockquote></li><li><p>命令行执行下面内容以启动：</p><blockquote><p>./node_modules/.bin/electron touchbar.js</p></blockquote></li></ol><p>你可以看到我们安装<code>Electron</code>的时候加了一个<code>ELECTRON_MIRROR</code>的参数，为什么要带这个参数呢？其实在<code>npm install electron</code>的时候会下载<code>electron</code>依赖，这个依赖有一个<code>postinstall</code>的脚本，该脚本会继续从<code>github</code>下载当前平台的<code>Electron</code>应用程序，由于国内对国外网站的限制，虽然<code>github</code>是可以访问的，但是网速不咋样。所以直接访问的话往往会有下载失败的问题（即使npm的源切换到taobao也经常出现问题，因为下载<code>Electron</code>应用程序是走<code>github</code>的下载地址的，下载地址具体请看<a href="https://github.com/electron/electron/releases" target="_blank" rel="noopener">这里</a>）。</p><p>通过上述三个步骤，实例代码基本上可以跑通了，大概效果如下，是不是很有意思呢？</p><p><img src="/2019/09/21/基于Electron的touchbar开发/1.gif" alt="运行官方示例"></p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>通过上面的代码我们可以看到，通过<code>new TouchBar()</code>创建了一个TouchBar的实例，然后调用<code>BrowserWindow</code>对象的<code>setTouchBar()</code>方法就可以了，<code>TouchBar</code>的构造方法的参数是一个对象，这个对象可选字段有2个，一个是<code>items</code>，另一个是<code>escapeItem</code>。<code>items</code>是一个数组，用来添加<code>touchbar</code>中间部分的组件。<code>escapeItem</code>是单个的一个组件，用来替换<code>touchbar</code>左侧的<code>esc</code>按钮。<br>现在我们新建一个<code>index.js</code>，运行下面代码（命令行输入<code>./node_modules/.bin/electron index.js</code>），看看效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow, TouchBar &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; TouchBarLabel, TouchBarButton &#125; = TouchBar</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> touchBar = <span class="keyword">new</span> TouchBar(&#123;</span><br><span class="line">  items: [</span><br><span class="line">    <span class="keyword">new</span> TouchBarButton(&#123;</span><br><span class="line">      label: <span class="string">'😇'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarButton(&#123;</span><br><span class="line">      label: <span class="string">'😁'</span>,</span><br><span class="line">      backgroundColor: <span class="string">'#ff0000'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarButton(&#123;</span><br><span class="line">      label: <span class="string">'🤣'</span>,</span><br><span class="line">      backgroundColor: <span class="string">'#00ff00'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarButton(&#123;</span><br><span class="line">      label: <span class="string">'😂'</span>,</span><br><span class="line">      backgroundColor: <span class="string">'#0000ff'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarLabel(&#123;</span><br><span class="line">      label: <span class="string">'TouchBarLabel就是文字'</span>,</span><br><span class="line">      textColor: <span class="string">'#AACCEE'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  escapeItem: <span class="keyword">new</span> TouchBarButton(&#123;</span><br><span class="line">    label: <span class="string">'这里原本是退出键'</span>,</span><br><span class="line">    icon: <span class="string">'./img.jpeg'</span>,</span><br><span class="line">    iconPosition: <span class="string">'left'</span>,</span><br><span class="line">    click:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'点了也不会退出的！因为我就没写退出的事件'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">window</span></span><br><span class="line"></span><br><span class="line">app.once(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">window</span> = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    frame: <span class="literal">false</span>,</span><br><span class="line">    titleBarStyle: <span class="string">'hiddenInset'</span>,</span><br><span class="line">    width: <span class="number">200</span>,</span><br><span class="line">    height: <span class="number">200</span>,</span><br><span class="line">    backgroundColor: <span class="string">'#000'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">window</span>.loadURL(<span class="string">'about:blank'</span>)</span><br><span class="line">  <span class="built_in">window</span>.setTouchBar(touchBar)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2019/09/21/基于Electron的touchbar开发/2.png" alt="items与escapeItem"></p><p>代码中第29行的图标点击<a href="img.jpeg">这里下载</a>。</p><p>上面使用了2个组件，一个是<code>TouchBarButton</code>，代表的是一个按钮，另一个是<code>TouchBarLabel</code>，代表的是一个简单的标签。需要注意的是<code>TouchBarLabel</code>只是单纯的文字，不支持点击事件（当然你使用的时候有可能API已经支持了），它的参数也很简单，就是上面例子中的那2个，<code>TouchBarButton</code>是支持点击事件的，如上面<code>escapeItem</code>中的click方法。</p><p><code>Electron</code>所支持的所有组件（写本章的时候）有：</p><ol><li><a href="https://electronjs.org/docs/api/touch-bar-button" target="_blank" rel="noopener">TouchBarButton</a></li><li><a href="https://electronjs.org/docs/api/touch-bar-label" target="_blank" rel="noopener">TouchBarLabel</a></li><li><a href="https://electronjs.org/docs/api/touch-bar-color-picker" target="_blank" rel="noopener">TouchBarColorPicker</a></li><li><a href="https://electronjs.org/docs/api/touch-bar-group" target="_blank" rel="noopener">TouchBarGroup</a></li><li><a href="https://electronjs.org/docs/api/touch-bar-popover" target="_blank" rel="noopener">TouchBarPopover</a></li><li><a href="https://electronjs.org/docs/api/touch-bar-scrubber" target="_blank" rel="noopener">TouchBarScrubber</a></li><li><a href="https://electronjs.org/docs/api/touch-bar-segmented-control" target="_blank" rel="noopener">TouchBarSegmentedControl</a></li><li><a href="https://electronjs.org/docs/api/touch-bar-slider" target="_blank" rel="noopener">TouchBarSlider</a></li><li><a href="https://electronjs.org/docs/api/touch-bar-spacer" target="_blank" rel="noopener">TouchBarSpacer</a></li></ol><p>这里给一个简单的例子展示一下其中的几个组件，剩下的你可以自己去尝试一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow, TouchBar &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; TouchBarColorPicker, TouchBarSpacer, TouchBarScrubber, TouchBarSegmentedControl, TouchBarSlider &#125; = TouchBar</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> touchBar = <span class="keyword">new</span> TouchBar(&#123;</span><br><span class="line">  items: [</span><br><span class="line">    <span class="keyword">new</span> TouchBarColorPicker(),</span><br><span class="line">    <span class="keyword">new</span> TouchBarSpacer(&#123;</span><br><span class="line">      size: <span class="string">'small'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarScrubber(&#123;</span><br><span class="line">      items: [&#123;<span class="attr">label</span>:<span class="string">'第一个'</span>&#125;,&#123;<span class="attr">label</span>:<span class="string">'第二个'</span>&#125;],</span><br><span class="line">      selectedStyle: <span class="string">'outline'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarSpacer(&#123;</span><br><span class="line">      size: <span class="string">'large'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarSegmentedControl(&#123;</span><br><span class="line">      segments:[&#123;<span class="attr">label</span>:<span class="string">'第一个'</span>&#125;,&#123;<span class="attr">label</span>:<span class="string">'第二个'</span>&#125;],</span><br><span class="line">      mode: <span class="string">'buttons'</span><span class="comment">// single multiple buttons</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarSpacer(&#123;</span><br><span class="line">      size: <span class="string">'flexible'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarSlider(&#123;</span><br><span class="line">      label: <span class="string">'滑动组件'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">window</span></span><br><span class="line"></span><br><span class="line">app.once(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">window</span> = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    frame: <span class="literal">false</span>,</span><br><span class="line">    titleBarStyle: <span class="string">'hiddenInset'</span>,</span><br><span class="line">    width: <span class="number">200</span>,</span><br><span class="line">    height: <span class="number">200</span>,</span><br><span class="line">    backgroundColor: <span class="string">'#000'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">window</span>.loadURL(<span class="string">'about:blank'</span>)</span><br><span class="line">  <span class="built_in">window</span>.setTouchBar(touchBar)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2019/09/21/基于Electron的touchbar开发/3.jpg" alt="组件展示"></p><hr><p>PS：学会了这个，就有了后来的一个小项目<a href="https://github.com/KaiOrange/touchbar-emoji" target="_blank" rel="noopener">touchbar-emoji</a>，使用touchbar来控制飘落emoji表情雨。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://electronjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Electron&lt;/a&gt;是&lt;code&gt;使用 JavaScript, HTML 和 CSS 构建跨平台的桌面应用&lt;/code&gt;的一个框架，本人之前
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.kai666666.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.kai666666.top/tags/JavaScript/"/>
    
      <category term="Electron" scheme="https://www.kai666666.top/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>10分钟开发一个npm全局依赖包（下）</title>
    <link href="https://www.kai666666.top/2019/09/07/10%E5%88%86%E9%92%9F%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAnpm%E5%85%A8%E5%B1%80%E4%BE%9D%E8%B5%96%E5%8C%85%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>https://www.kai666666.top/2019/09/07/10%E5%88%86%E9%92%9F%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAnpm%E5%85%A8%E5%B1%80%E4%BE%9D%E8%B5%96%E5%8C%85%EF%BC%88%E4%B8%8B%EF%BC%89/</id>
    <published>2019-09-07T05:44:44.000Z</published>
    <updated>2019-09-07T07:32:43.700Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://kai666666.top/2019/09/06/10分钟开发一个npm全局依赖包（上）/#more" target="_blank" rel="noopener">上一篇</a>中我们用了10分钟实现了一个完整的古诗词命令行工具，本章中我们主要简绍2个命令行工具开发中常用的库，整个代码大概用时20分钟。</p><hr><h2 id="修改命令行颜色"><a href="#修改命令行颜色" class="headerlink" title="修改命令行颜色"></a>修改命令行颜色</h2><p>第一个简绍的库就是<a href="https://github.com/jaywcjlove/colors-cli" target="_blank" rel="noopener">‘colors-cli’</a>，他支持修改打印出来的文字的样式。<br>首先安装一下这个依赖<code>npm install colors-cli</code>，新建一个文件<code>test-color.js</code>，测试一下它的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="built_in">require</span>(<span class="string">'colors-cli/safe'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(color.red.bold(<span class="string">'Error!'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(color.yellow.magenta_b(<span class="string">'Warning'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(color.blue.underline(<span class="string">'Notice'</span>));</span><br></pre></td></tr></table></figure><p>引入<code>color</code>库的时候可以使用<code>var color = require(&#39;colors-cli/safe&#39;)</code>，也可以使用<code>var color = require(&#39;colors-cli&#39;)</code>，推荐使用前者，因为前者可以支持链式调用，使用起来更方便。上面运行结果如下：</p><p><img src="/2019/09/07/10分钟开发一个npm全局依赖包（下）/1.png" alt="修改颜色"></p><p>他是怎么实现的呢？其实是把文字用特殊符号包了一层，命令行对这种特殊符号会处理成样式，就比如<code>color.red.bold(&#39;Error!&#39;)</code>其实最后会返回一个字符串<code>&#39;[1m[31m[31mError![0m[0m[0m&#39;</code>，所以上面三行log代码和下面的结果是一样的，你可以直接用node运行一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'[1m[31m[31mError![0m[0m[0m'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'[45m[33m[33mWarning[0m[0m[0m'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'[4m[34m[34mNotice[0m[0m[0m'</span>);</span><br></pre></td></tr></table></figure><h2 id="处理用户输入"><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h2><p>在使用命令行的时候往往需要根据用户的参数给出友好的提示，<a href="https://github.com/yargs/yargs" target="_blank" rel="noopener">yargs</a>就是处理这种情况的一个优质的库。<br>有关<code>yargs</code>的具体使用可以直接看官方的文档，这里就不展开说了。现在我们做一个需求，就是根据用户传入的值，来改变诗词、作者、来源的颜色。代码大致是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"><span class="keyword">const</span> color = <span class="built_in">require</span>(<span class="string">'colors-cli/safe'</span>);</span><br><span class="line"><span class="keyword">let</span> argv = <span class="built_in">require</span>(<span class="string">'yargs'</span>)</span><br><span class="line">  .option(<span class="string">'ps'</span>, &#123;</span><br><span class="line">    alias: <span class="string">'poem-style'</span>,</span><br><span class="line">    demand: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'blue_bt'</span>,</span><br><span class="line">    describe: <span class="string">'诗词样式，如--ps=blue_bt'</span>,</span><br><span class="line">    type: <span class="string">'string'</span></span><br><span class="line">  &#125;).option(<span class="string">'as'</span>, &#123;</span><br><span class="line">    alias: <span class="string">'author-style'</span>,</span><br><span class="line">    demand: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'green_bt'</span>,</span><br><span class="line">    describe: <span class="string">'作者样式，如--as=green_bt'</span>,</span><br><span class="line">    type: <span class="string">'string'</span></span><br><span class="line">  &#125;).option(<span class="string">'os'</span>, &#123;</span><br><span class="line">    alias: <span class="string">'origin-style'</span>,</span><br><span class="line">    demand: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'cyan'</span>,</span><br><span class="line">    describe: <span class="string">'来源颜色，如--os=cyan'</span>,</span><br><span class="line">    type: <span class="string">'string'</span></span><br><span class="line">  &#125;).option(<span class="string">'h'</span>, &#123;</span><br><span class="line">    alias: <span class="string">'help'</span>,</span><br><span class="line">    demand: <span class="literal">false</span>,</span><br><span class="line">    boolean: <span class="literal">true</span>,</span><br><span class="line">    describe: <span class="string">'帮助'</span>,</span><br><span class="line">  &#125;).option(<span class="string">'v'</span>, &#123;</span><br><span class="line">    alias: <span class="string">'version'</span>,</span><br><span class="line">    demand: <span class="literal">false</span>,</span><br><span class="line">    boolean: <span class="literal">true</span>,</span><br><span class="line">    describe: <span class="string">'版本号'</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .argv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColorMethod</span>(<span class="params">commandStr = <span class="string">''</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> command = commandStr.replace(<span class="regexp">/\,/g</span>,<span class="string">'.'</span>).split(<span class="string">"."</span>);</span><br><span class="line">  <span class="keyword">let</span> colorMethod = color</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; command.length; i++) &#123;</span><br><span class="line">    colorMethod = colorMethod[command[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> colorMethod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'https://api.gushi.ci/all.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = response.data || &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> signature = data.author + <span class="string">'《'</span> + data.origin + <span class="string">'》'</span>;</span><br><span class="line">    <span class="keyword">let</span> prefix =  <span class="string">'———— '</span>;</span><br><span class="line">    <span class="keyword">let</span> paddingSpacing = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> spacingLength = data.content.length * <span class="number">2</span> - signature.length * <span class="number">2</span> - prefix.length;</span><br><span class="line">    <span class="keyword">if</span> (spacingLength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.origin.indexOf(<span class="string">'·'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">        spacingLength++;</span><br><span class="line">      &#125;</span><br><span class="line">      paddingSpacing = <span class="keyword">new</span> <span class="built_in">Array</span>(spacingLength).fill(<span class="string">' '</span>).join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    signature = getColorMethod(argv.as)(data.author) + <span class="string">'《'</span> + getColorMethod(argv.os)(data.origin) + <span class="string">'》'</span>;</span><br><span class="line">    signature = (paddingSpacing + prefix) + signature</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    <span class="built_in">console</span>.log(getColorMethod(argv.ps)(data.content));</span><br><span class="line">    <span class="built_in">console</span>.log(signature);</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2019/09/07/10分钟开发一个npm全局依赖包（下）/2.png" alt="支持修改颜色"></p><p>代码还是在可以控制的行数范围内，上述代码中4~34行，是<code>yargs</code>的处理，也是通用的一种写法，这里面有2个属性比较特殊一个是<code>help</code>另一个是<code>version</code>，从下面的结果我们可以看到，当输入这两个的时候都会阻止代码的执行，并直接返回相应的信息，如运行<code>node index -h</code>会返回帮助信息、<code>node index -v</code>会返回版本信息。在代码中我们可以使用<code>argv.ps</code>、<code>argv.as</code>、<code>argv.os</code>等（其实就是option函数的第一个值）来获取参数的值。<code>getColorMethod</code>运行使用英文的点或者逗号来拆分以添加多个样式。</p><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><p>上述代码中<code>getColorMethod</code>方法其实可以抽取出去，另外<code>color</code>库并不是支持输入任何参数，比如你输入<code>node index --as=123</code>就会报错，因为123并不是<code>color</code>所支持的样式，所以我们有必要对颜色相关的操作抽取成一个文件，另外检测一下<code>color</code>库是否支持这个颜色，不支持的话给出有好地提示，现在新建<code>color-util.js</code>文件。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> color = <span class="built_in">require</span>(<span class="string">'colors-cli/safe'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> COLOR_TITLE = [<span class="string">'样式'</span>,<span class="string">'前景色'</span>,<span class="string">'背景色'</span>,<span class="string">'前景色（明亮）'</span>,<span class="string">'背景色（明亮）'</span>];</span><br><span class="line"><span class="keyword">const</span> COLOR_STYLE = [<span class="string">'bold'</span>, <span class="string">'faint'</span>, <span class="string">'italic'</span>, <span class="string">'underline'</span>, <span class="string">'blink'</span>, <span class="string">'overline'</span>, <span class="string">'inverse'</span>, <span class="string">'conceal'</span>, <span class="string">'strike'</span>];</span><br><span class="line"><span class="keyword">const</span> COLOR_FOREGROUND = [<span class="string">'black'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'yellow'</span>, <span class="string">'blue'</span>, <span class="string">'magenta'</span>, <span class="string">'cyan'</span>, <span class="string">'white'</span>];</span><br><span class="line"><span class="keyword">const</span> COLOR_BACKGROUND = [<span class="string">'black_b'</span>, <span class="string">'red_b'</span>, <span class="string">'green_b'</span>, <span class="string">'yellow_b'</span>, <span class="string">'blue_b'</span>, <span class="string">'magenta_b'</span>, <span class="string">'cyan_b'</span>, <span class="string">'white_b'</span>];</span><br><span class="line"><span class="keyword">const</span> COLOR_FOREGROUND_BRIGHT = [<span class="string">'black_bt'</span>, <span class="string">'red_bt'</span>, <span class="string">'green_bt'</span>, <span class="string">'yellow_bt'</span>, <span class="string">'blue_bt'</span>, <span class="string">'magenta_bt'</span>, <span class="string">'cyan_bt'</span>, <span class="string">'white_bt'</span>];</span><br><span class="line"><span class="keyword">const</span> COLOR_BACKGROUND_BRIGHT = [<span class="string">'black_bbt'</span>, <span class="string">'red_bbt'</span>, <span class="string">'green_bbt'</span>, <span class="string">'yellow_bbt'</span>, <span class="string">'blue_bbt'</span>, <span class="string">'magenta_bbt'</span>, <span class="string">'cyan_bbt'</span>, <span class="string">'white_bbt'</span>];</span><br><span class="line"><span class="keyword">const</span> STYLE = [ COLOR_STYLE, COLOR_FOREGROUND, COLOR_BACKGROUND, COLOR_FOREGROUND_BRIGHT, COLOR_BACKGROUND_BRIGHT];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printSupportStyle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'所支持的样式有：\n'</span>);</span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; COLOR_TITLE.length; i++) &#123;</span><br><span class="line">    message = STYLE[i].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">pre,next</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> pre + color[next](next) + <span class="string">' '</span></span><br><span class="line">    &#125;, COLOR_TITLE[i] + <span class="string">"： "</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 换行</span></span><br><span class="line">  <span class="built_in">console</span>.log();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStyle</span>(<span class="params">styleName</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> STYLE.join(<span class="string">','</span>).split(<span class="string">','</span>).indexOf(styleName) !== <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColorMethod</span>(<span class="params">commandStr = <span class="string">''</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> command = commandStr.replace(<span class="regexp">/\,/g</span>,<span class="string">'.'</span>).split(<span class="string">"."</span>);</span><br><span class="line">  <span class="keyword">let</span> colorMethod = color</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; command.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (checkStyle(command[i])) &#123;</span><br><span class="line">      colorMethod = colorMethod[command[i]];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'\n不支持的样式：'</span> + command[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> colorMethod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  color,</span><br><span class="line">  printSupportStyle,</span><br><span class="line">  checkStyle,</span><br><span class="line">  getColorMethod</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求接口的地方我们也可以封装成一个方法，这样可以减少耦合，另外也可以支持模块直接引入（直接使用require引入）。新建<code>random-poem.js</code>文件，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    axios.get(<span class="string">'https://api.gushi.ci/all.json'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">      resolve(response.data || &#123;&#125;)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>)</span>&#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为网络请求是异步的，所以需要使用回调或者<code>Promise</code>来处理，我们这里就使用<code>Promise</code>吧。此时还需要修改一下<code>package.json</code>文件，添加<code>main</code>字段，该字段是用来告诉直接模块引入的时候引入哪个文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"poem-cli"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"命令行随机打印一句诗词。"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"random-poem.js"</span>,</span><br><span class="line">  <span class="attr">"bin"</span>: &#123;</span><br><span class="line">    <span class="attr">"poem-cli"</span>: <span class="string">"index.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node index"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"诗词"</span>,</span><br><span class="line">    <span class="string">"命令行"</span>,</span><br><span class="line">    <span class="string">"有趣"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Orange"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"axios"</span>: <span class="string">"^0.19.0"</span>,</span><br><span class="line">    <span class="attr">"colors-cli"</span>: <span class="string">"^1.0.26"</span>,</span><br><span class="line">    <span class="attr">"yargs"</span>: <span class="string">"^14.0.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时需要注意第5行代码。最后修改<code>index.js</code>文件，使用这些封装的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> colorUtil = <span class="built_in">require</span>(<span class="string">'./color-util'</span>)</span><br><span class="line"><span class="keyword">const</span> randomPoem = <span class="built_in">require</span>(<span class="string">'./random-poem'</span>)</span><br><span class="line"><span class="keyword">let</span> argv = <span class="built_in">require</span>(<span class="string">'yargs'</span>)</span><br><span class="line">    .option(<span class="string">'s'</span>, &#123;</span><br><span class="line">      alias: <span class="string">'style'</span>,</span><br><span class="line">      demand: <span class="literal">false</span>,</span><br><span class="line">      boolean: <span class="literal">true</span>,</span><br><span class="line">      describe: <span class="string">'显示所支持的样式'</span>,</span><br><span class="line">    &#125;).option(<span class="string">'ps'</span>, &#123;</span><br><span class="line">        alias: <span class="string">'poem-style'</span>,</span><br><span class="line">        demand: <span class="literal">false</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'blue_bt'</span>,</span><br><span class="line">        describe: <span class="string">'诗词样式，如--ps=blue_bt'</span>,</span><br><span class="line">        type: <span class="string">'string'</span></span><br><span class="line">    &#125;).option(<span class="string">'as'</span>, &#123;</span><br><span class="line">        alias: <span class="string">'author-style'</span>,</span><br><span class="line">        demand: <span class="literal">false</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'green_bt'</span>,</span><br><span class="line">        describe: <span class="string">'作者样式，如--as=green_bt'</span>,</span><br><span class="line">        type: <span class="string">'string'</span></span><br><span class="line">    &#125;).option(<span class="string">'os'</span>, &#123;</span><br><span class="line">      alias: <span class="string">'origin-style'</span>,</span><br><span class="line">      demand: <span class="literal">false</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'cyan'</span>,</span><br><span class="line">      describe: <span class="string">'来源颜色，如--os=cyan'</span>,</span><br><span class="line">      type: <span class="string">'string'</span></span><br><span class="line">    &#125;).option(<span class="string">'h'</span>, &#123;</span><br><span class="line">      alias: <span class="string">'help'</span>,</span><br><span class="line">      demand: <span class="literal">false</span>,</span><br><span class="line">      boolean: <span class="literal">true</span>,</span><br><span class="line">      describe: <span class="string">'帮助'</span>,</span><br><span class="line">    &#125;).option(<span class="string">'v'</span>, &#123;</span><br><span class="line">      alias: <span class="string">'version'</span>,</span><br><span class="line">      demand: <span class="literal">false</span>,</span><br><span class="line">      boolean: <span class="literal">true</span>,</span><br><span class="line">      describe: <span class="string">'版本号'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .argv;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示所支持的样式</span></span><br><span class="line"><span class="keyword">if</span> (!!argv.s) &#123;</span><br><span class="line">  colorUtil.printSupportStyle();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  randomPoem().then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> signature = data.author + <span class="string">'《'</span> + data.origin + <span class="string">'》'</span>;</span><br><span class="line">    <span class="keyword">let</span> prefix =  <span class="string">'———— '</span>;</span><br><span class="line">    <span class="keyword">let</span> paddingSpacing = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> spacingLength = data.content.length * <span class="number">2</span> - signature.length * <span class="number">2</span> - prefix.length;</span><br><span class="line">    <span class="keyword">if</span> (spacingLength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.origin.indexOf(<span class="string">'·'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">        spacingLength++;</span><br><span class="line">      &#125;</span><br><span class="line">      paddingSpacing = <span class="keyword">new</span> <span class="built_in">Array</span>(spacingLength).fill(<span class="string">' '</span>).join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 添加颜色</span></span><br><span class="line">      signature = colorUtil.getColorMethod(argv.as)(data.author) + <span class="string">'《'</span> + colorUtil.getColorMethod(argv.os)(data.origin) + <span class="string">'》'</span>;</span><br><span class="line">      signature = (paddingSpacing + prefix) + signature</span><br><span class="line">      <span class="built_in">console</span>.log();</span><br><span class="line">      <span class="built_in">console</span>.log(colorUtil.getColorMethod(argv.ps)(data.content));</span><br><span class="line">      <span class="built_in">console</span>.log(signature);</span><br><span class="line">      <span class="built_in">console</span>.log();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// 错误处理</span></span><br><span class="line">      <span class="built_in">console</span>.log(colorUtil.color.red(error.message));</span><br><span class="line">      colorUtil.printSupportStyle();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下输入不支持的情况，你会发现提示的信息已经很友好了：</p><p><img src="/2019/09/07/10分钟开发一个npm全局依赖包（下）/3.png" alt="完整版"></p><p>最后把多余的<code>test-color.js</code>文件删除了就可以提交了。</p><p>就这样我们把一个功能完善的古诗词命令行工具做完了，需要注意一点再次提交的时候，也就是运行<code>npm publish</code>前，需要修改一下<code>package.json</code>中的<code>version</code>字段，而且必须大于当前的版本号，建议使用<code>npm version 1.0.1</code>这样的命令去修改，因为该命令会顺带把<code>package-lock.json</code>文件中的版本号也改了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;a href=&quot;https://kai666666.top/2019/09/06/10分钟开发一个npm全局依赖包（上）/#more&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上一篇&lt;/a&gt;中我们用了10分钟实现了一个完整的古诗词命令行工具，本章中
      
    
    </summary>
    
    
      <category term="Node" scheme="https://www.kai666666.top/categories/Node/"/>
    
    
      <category term="Node" scheme="https://www.kai666666.top/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>10分钟开发一个npm全局依赖包（上）</title>
    <link href="https://www.kai666666.top/2019/09/06/10%E5%88%86%E9%92%9F%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAnpm%E5%85%A8%E5%B1%80%E4%BE%9D%E8%B5%96%E5%8C%85%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://www.kai666666.top/2019/09/06/10%E5%88%86%E9%92%9F%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAnpm%E5%85%A8%E5%B1%80%E4%BE%9D%E8%B5%96%E5%8C%85%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2019-09-06T11:41:44.000Z</published>
    <updated>2019-09-07T05:42:29.319Z</updated>
    
    <content type="html"><![CDATA[<p>今天在逛网页的时候看到了一个<a href="https://gushi.ci/" target="_blank" rel="noopener">古诗词的API</a>，然后突发奇想，用了10分钟的时间做了一款npm全局依赖包。你可以使用<code>npm install -g pome-cli</code>来先玩一玩。有好东西当然要跟大家分享一下啦，现在从0开始给大家简绍打造这款全局依赖包。</p><hr><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>首先创建一个文件夹，比如<code>poem-cli</code>（这里以<code>poem-cli</code>来讲，在你开发的时候换一个名字，因为这个名字已经被我注册了），然后进入该文件夹，命令行输入<code>npm init</code>，里面的选项根据自己的喜好来设置就可以了，默认的话回车就行。等命令行输完以后，会在该目录下自动创建一个<code>package.json</code>文件，这个文件大家一定不陌生吧。</p><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>由于我们的数据是走网络请求的，<a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a>是一个可以在浏览器环境和Node环境同时运行的一个HTTP框架。我们这里也引入这个库来简化我们的发送请求过程，命令行输入<code>npm install axios</code>。新建一个<code>index.js</code>文件写入请求的代码，由于我们目前对API的结构不太了解，就直接打印出返回的数据就行了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'https://api.gushi.ci/all.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data || &#123;&#125;)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>在命令行输入<code>node index</code>来运行一下上面的代码，可以看到打印的结果如下，当然具体的内容可能有点不太一样：</p><p><img src="/2019/09/06/10分钟开发一个npm全局依赖包（上）/1.png" alt="首次运行"></p><p>我们可以看到返回的数据是一个JSON对象，那么我们就好处理了，只要稍微修改一下代码，让显示的更好看一点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'https://api.gushi.ci/all.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = response.data || &#123;&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(data.content);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"———— "</span> + data.author + <span class="string">"《"</span> + data.origin + <span class="string">"》"</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>此时的效果如下：</p><p><img src="/2019/09/06/10分钟开发一个npm全局依赖包（上）/2.png" alt="处理后的效果"></p><p>当然我们经常看到的诗句，署名往往是右对齐的，我们这里也稍微处理一下对于没有诗句长的署名，让署名右对齐。要想右对齐其实很简单就是左边加空格填充呗：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'https://api.gushi.ci/all.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = response.data || &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> signature = data.author + <span class="string">'《'</span> + data.origin + <span class="string">'》'</span>;</span><br><span class="line">    <span class="keyword">let</span> prefix =  <span class="string">'———— '</span>;</span><br><span class="line">    <span class="keyword">let</span> paddingSpacing = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> spacingLength = data.content.length * <span class="number">2</span> - signature.length * <span class="number">2</span> - prefix.length;</span><br><span class="line">    <span class="keyword">if</span> (spacingLength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.origin.indexOf(<span class="string">'·'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">        spacingLength++;</span><br><span class="line">      &#125;</span><br><span class="line">      paddingSpacing = <span class="keyword">new</span> <span class="built_in">Array</span>(spacingLength).fill(<span class="string">' '</span>).join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    signature = (paddingSpacing + prefix) + signature</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    <span class="built_in">console</span>.log(data.content);</span><br><span class="line">    <span class="built_in">console</span>.log(signature);</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>现在代码已经很多了，代码第6行和第7行我们把署名和横线拆分成2个变量，因为一个汉字相当于2个空格而一个横线是一个字符，上面的<code>prefix</code>中其实是4个短横线和一个空格组成的。然后在代码的第9行我们计算了一下需要填充的空格数量，也就是诗句乘以2然后减去署名乘以2再减去横线（诗句和署名都是汉字或者汉字的标点符号占了2个空格），还有一种特殊情况是，有些署名中有符号的点（·），如<code>李商隐《无题·昨夜星辰昨夜风》</code>中的点，这个点占据了一个字符，我们要对这个点做特殊处理，特殊处理见第11到第13行代码，最后14行代码把空格也加上。后面打印的时候多了2个<code>console.log();</code>是为了换行，当然是用<code>\n</code>来换行也是可以的。需要说明的是我们这里使用字符串的拼接来做的，当然也可以使用ES6的模板字符串。最后看一下结果：</p><p><img src="/2019/09/06/10分钟开发一个npm全局依赖包（上）/3.png" alt="对齐处理"></p><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p>现在我们的代码基本上写的差不多了，然后试着按照全局包来处理。首先修改<code>package.json</code>文件，添加<code>bin</code>字段，<code>bin</code>字段的作用是告诉环境执行命令的时候执行哪个文件。如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"poem-cli"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"命令行随机打印一句诗词。"</span>,</span><br><span class="line">  <span class="attr">"bin"</span>: &#123;</span><br><span class="line">    <span class="attr">"poem-cli"</span>: <span class="string">"index.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node index"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"诗词"</span>,</span><br><span class="line">    <span class="string">"命令行"</span>,</span><br><span class="line">    <span class="string">"有趣"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Orange"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"axios"</span>: <span class="string">"^0.19.0"</span>,</span><br><span class="line">    <span class="attr">"colors-cli"</span>: <span class="string">"^1.0.26"</span>,</span><br><span class="line">    <span class="attr">"yargs"</span>: <span class="string">"^14.0.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述第5到7行可是重点哦，写了<code>bin</code>以后在<code>bin</code>的入口文件（也就是<code>index.js</code>文件）的最上方还要加一行代码，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 其他代码同上的index.js</span></span><br></pre></td></tr></table></figure><p><code>#!/usr/bin/env node</code>看着和注释很像，到底有什么作用呢？其实它声明了脚本文件的解释程序，脚本文件有很多，我们要运行这个<code>index.js</code>，就得告诉系统你是要用什么来执行我们的脚本，这里当然是使用node了。</p><p>把这两个地方修改后，我们基本上可以使用了，先测试一下看可以用不。使用<code>npm link</code>命令，它的作用是把当前文件夹拷贝到node全局包的安装环境下，当拷贝过去以后你就可以把他当成一个全局包使用了，拷贝完后直接使用<code>poem-cli</code>来运行脚本就可以了。</p><p><img src="/2019/09/06/10分钟开发一个npm全局依赖包（上）/4.png" alt="使用npm link"></p><h2 id="发布到npm仓库上"><a href="#发布到npm仓库上" class="headerlink" title="发布到npm仓库上"></a>发布到npm仓库上</h2><p><code>npm link</code>命令是把本地的文件夹放在全局目录下，但是为了更多的小伙伴使用我们的包，就需要把该包放在npm仓库中。首先需要去<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm官网</a>注册自己的账号，已有账号忽略这一步。此外由于国内一般使用的是淘宝的镜像，如果你使用的也是淘宝的或者其他的镜像，这里<strong>必须</strong>要切回到npm的镜像，强烈建议使用nrm来管理镜像源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nrm</span></span><br><span class="line">npm install -g nrm</span><br><span class="line"><span class="comment"># 切回到npm镜像源</span></span><br><span class="line">nrm use npm</span><br></pre></td></tr></table></figure><p>在提交的时候，往往有些东西是不希望提交的，那么可以新建一个<code>.npmignore</code>文件，作用类似于<code>.gitignore</code>，只是这个是提交npm仓库的时候忽略的，这里我们在该文件的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node_modules/</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">.gitignore</span><br><span class="line">.git</span><br></pre></td></tr></table></figure><p>当这个时候你只需要登录npm并且发布就好了，如果已经登录了就可以直接发布了（可以使用命令<code>npm whoami</code>来查看自己的登录信息，再次强调<strong>一定要切到npm镜像源</strong>）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录npm 需要数据用户名 密码 邮箱等</span></span><br><span class="line">npm login</span><br><span class="line"><span class="comment"># 发布</span></span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>发布的速度还是挺快的，当你发布完成以后就可以使用<code>npm install -g poem-cli</code>来安装全局包了，当然这个名字已经被我注册了，你需要换一个名字。最后使用<code>poem-cli</code>来运行就可以了，大功告成。此时你可以使用命令<code>nrm use taobao</code>切换到淘宝镜像了，往往淘宝镜像会在5分钟内从npm获取一下新的包，所以你切到淘宝的镜像，5分钟后也可以安装（其实一般情况下根本不到5分钟）。</p><p>十分钟的时间差不多到了，我们的全局依赖包已经做完了，是不是收获还不错，下一节我们再利用20分钟，让我们的全局安装包做的更好一点，同时也简绍命令行工具常用的2个工具库。可以点击<a href="https://www.kai666666.top/2019/09/07/10分钟开发一个npm全局依赖包（下）/#more">这里</a>进入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在逛网页的时候看到了一个&lt;a href=&quot;https://gushi.ci/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;古诗词的API&lt;/a&gt;，然后突发奇想，用了10分钟的时间做了一款npm全局依赖包。你可以使用&lt;code&gt;npm install 
      
    
    </summary>
    
    
      <category term="Node" scheme="https://www.kai666666.top/categories/Node/"/>
    
    
      <category term="Node" scheme="https://www.kai666666.top/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>快应用初探--把个人博客封装成快应用</title>
    <link href="https://www.kai666666.top/2019/08/25/%E5%BF%AB%E5%BA%94%E7%94%A8%E5%88%9D%E6%8E%A2-%E6%8A%8A%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B0%81%E8%A3%85%E6%88%90%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    <id>https://www.kai666666.top/2019/08/25/%E5%BF%AB%E5%BA%94%E7%94%A8%E5%88%9D%E6%8E%A2-%E6%8A%8A%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B0%81%E8%A3%85%E6%88%90%E5%BF%AB%E5%BA%94%E7%94%A8/</id>
    <published>2019-08-25T06:53:59.000Z</published>
    <updated>2019-10-29T10:15:16.670Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司在做快应用的需求，经过2周的努力，<code>淘粉吧快应用</code>已经上线了，现在借此机会跟大家聊聊快应用。</p><hr><h3 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h3><p>自从Java语言创立以后，一场跨平台软件的革命拉开了序幕，从此一份代码可以在不同的操作系统上运行了。近两年小程序更是把跨平台的应用推上了一个新的高度，<code>用完即走,不做停留</code>的理念更是深入人心。随着宽带的普及，移动流量费用的降低，现在的应用越来越快，同时越来越轻。就在这样的大环境下，国内手机厂商们不想微信一家独大，于是也搞了一个<code>用完即走,不做停留</code>的软件平台，这就是<code>快应用</code>。由于快应用比微信更加底层，所以理论上，快应用要更快，同时体验要更好；另一方便，快应用可以做像负一屏等小程序无法做的操作。更多快应用相关的内容可以直接去它的<a href="https://www.quickapp.cn/" target="_blank" rel="noopener">官网</a>查看。</p><h3 id="体验快应用"><a href="#体验快应用" class="headerlink" title="体验快应用"></a>体验快应用</h3><p>由于快应用是国内手机厂商们来支持的，所以快应用只<strong>支持安卓不支持iPhone</strong>，当然也不是所有的安卓机都支持，这里有一份<a href="https://doc.quickapp.cn/changelog/ecology.html" target="_blank" rel="noopener">生态数据</a>可以看看。虽然并不支持所有的机型，但是国产手机的用户也是一个很庞大的数字，所以有实力的公司研究一下快应用还是有些必要的。<br>那么用户怎么使用快应用呢？有没有什么例子？像我使用的是小米手机，小米手机是支持快应用的，在应用市场搜索<code>淘票票</code>，可以看到有一个秒开，这个秒开就是打开淘票票快应用，你可以先去体验一下。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/1.jpeg" alt="淘票票快应用"></p><h3 id="快应用环境搭建"><a href="#快应用环境搭建" class="headerlink" title="快应用环境搭建"></a>快应用环境搭建</h3><p>好了，说了这么多了，我们可以试着开发一个快应用了。在开发之前先搭建一下快应用的环境吧。<br>快应用的环境跟大多数前端应用一样也是基于<code>nodeJS</code>来启动的，<code>node</code>的安装这里就不说了，这里假设你已经安装<code>node</code>了。<br>首先需要下载3个东西，第一个就是快应用的开发工具，下载地址请点<a href="https://www.quickapp.cn/docCenter/post/95" target="_blank" rel="noopener">这里</a>，其实这个工具就是封装自<code>VSCode</code>，如果你一直用的是<code>VSCode</code>来做的开发，那么该开发工具应该很适合你。接下来要安装的是调试器和预览版，这两个都是用来调试用的，需要安装到你的安卓手机上，需要注意的是预览版可以下载不同的版本，最好下载你支持的最低版本，最后请点击这里<a href="https://www.quickapp.cn/docCenter/post/69" target="_blank" rel="noopener">下载</a>。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/2.png" alt="调试器和预览版"></p><p>通过上面的步骤基本软件已经安装了，然后我们来创建一个项目。首先来安装全局的命令行工具：</p><blockquote><p>npm install -g hap-toolkit</p></blockquote><p>这个只需要安装一次。然后我们初始化一个项目，项目名根据自己喜欢就可以了，比如这里我们叫做<code>blog-quickapp</code>，那么运行命令：</p><blockquote><p>hap init blog-quickapp</p></blockquote><p>项目生成好了以后我们用刚才下载的编辑器打开，点击<code>文件结构-&gt;打开文件夹</code>，也可以把刚才创建的文件夹拖进来。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/3.png" alt="打开项目"></p><p>然后在终端下输入<code>npm install</code> 这一步对于前端工程师来说一定不陌生。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/4.png" alt="安装项目"></p><p>稍等片刻，安装完成后再输入命令<code>npm run server</code>，同时再开一个终端，输入另一个命令<code>npm run watch</code>，其中前一个命令是启动服务的，第二个命令是启动实时编译的。重新开一个终端如下：</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/5.png" alt="启动实时编译"></p><p>然后打开<code>http://你的IP:8000</code>，如果看到一个二维码，说明项目已经起来了，点击底部的<code>打开 web 预览</code>开始查看网页预览版，也可以打开手机上刚才安装的<code>快应用调试器</code>，然后运行平台选择刚才安装的快应用预览版就可以了，最后点击<code>扫码安装</code>，扫这个二维码就可以了，需要注意的是手机和电脑必须要连人同一个WIFI。</p><h3 id="快应用与普通web应用的不同"><a href="#快应用与普通web应用的不同" class="headerlink" title="快应用与普通web应用的不同"></a>快应用与普通web应用的不同</h3><p>快应用和普通的web应用还是有很大的不同的，快应用采用前端的这套开发机制，但是又做了很多的限制，比如他强烈希望你使用flex布局，为此它把浮动和定位全部禁用了，如果你使用浮动和定位就会出现错误（而不是警告）。浮动的功能基本上flex可以代替，那么定位呢？他自己创建了一个<a href="https://doc.quickapp.cn/widgets/stack.html" target="_blank" rel="noopener">stack组件</a>来处理定位的问题。他的框架和<code>vue</code>或小程序非常类似，有<code>vue</code>或小程序开发经验的同学可以很快适应他的写法（可以看看<code>/src/Demo/index.ux</code>中的代码）。快应用对CSS的限制是非常大的，就比如颜色的继承它是不支持的，需要写在具体的标签上；div里面直接写文字，抱歉，也不行！你需要用text或span等标签包一层。这些限制刚开始你可能不太适应，或许开发的时候感觉有点痛苦，明明代码是对的，但是却不行，这时你就得多看看他在<code>npm run watch</code>命令下输出日志了。</p><p>我们可以看一下例子中的代码，在<code>/src/Demo/index.ux</code>文件中写了一个input标签，但是在真正运行时，代码中多了一个<code>style</code>，<code>style</code>属性的内容就是快应用框架把默认样式和自定义样式处理整合后的结果。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/6.png" alt="模板代码"></p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/7.png" alt="样式代码"></p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/8.png" alt="样式整合后的代码"></p><p>所以如果该标签没有写颜色等信息的时候就不会有了，这也是为什么颜色不能被继承的原因。另外快应用不支持CSS的<code>且选择器</code>，也就是<code>.class.class2{...}</code>。我们经常用不同的类选择器去覆盖正常的样式，就比如a标签正常的样式是<code>a-link</code>的颜色，假设它是绿色的，然后当点击以后class属性是<code>a-link active</code>，其中<code>active</code>表明颜色是红色的，如果<code>active</code>样式是且选择器的话（<code>.a-link.active{...}</code>），在快应用中就是不行的，通常需要写成2个样式（<code>.a-link{...}</code>和<code>.active{...}</code>）。</p><h3 id="封装博客成快应用"><a href="#封装博客成快应用" class="headerlink" title="封装博客成快应用"></a>封装博客成快应用</h3><p>快应用有自己的组件和自己的一些接口，可以使用这些组件来写页面。由于开发者往往都有自己的博客，一般使用<code>Github Pages</code>服务来做的，既然已经有博客了，那么博客页面就没必要开发了，直接使用web组件（类似于安卓中的webview）来加载页面就可以了。我们在src下建立一个文件夹叫<code>Webview</code>，然后再在该文件夹下新建一个<code>index.ux</code>，这时开始写自己的代码了，大概如下，你需要替换<code>protected</code>下的<code>url</code>为你自己的地址。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">web</span> <span class="attr">id</span>=<span class="string">"web"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">src</span>=<span class="string">"&#123;&#123;url&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">web</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@system.router'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> prompt <span class="keyword">from</span> <span class="string">'@system.prompt'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">private</span>: &#123;</span></span><br><span class="line"><span class="actionscript">    backTime: <span class="literal">null</span>,</span></span><br><span class="line"><span class="undefined">    maxBackTime: 1800</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">protected</span>: &#123;</span></span><br><span class="line"><span class="actionscript">    url: <span class="string">'https://www.kai666666.top'</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  onMenuPress() &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.$app.$def.showMenu()</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  onBackPress() &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.$element(<span class="string">'web'</span>).canBack(&#123;</span></span><br><span class="line"><span class="actionscript">      callback: <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (e) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 加载历史列表中的上一个 URL</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$element(<span class="string">'web'</span>).back()</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (router.getLength() === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> currentTime = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (!<span class="keyword">this</span>.backTime || currentTime - <span class="keyword">this</span>.backTime &gt; <span class="keyword">this</span>.maxBackTime) &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.backTime = currentTime</span></span><br><span class="line"><span class="undefined">              prompt.showToast(&#123;</span></span><br><span class="line"><span class="actionscript">                message: <span class="string">'再按一次退出程序'</span></span></span><br><span class="line"><span class="undefined">              &#125;)</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">          router.back()</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">      &#125;.bind(<span class="keyword">this</span>)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 阻止默认行为，等待异步操作</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>protected</code>下的字段是从url中传入的；<code>private</code>中的字段就是组件内部的字段，类似与vue中的data。<code>onBackPress</code>函数是当返回键按下以后的回调，返回true可以阻止默认行为，这里的作用是如果页面中可以返回的话直接使用页面级别的返回，否则使用应用级的返回，如果是最外层的页面那么连续2次返回才能退出程序。</p><p>最后新增加的页面需要在清单文件<code>/src/manifest.json</code>中声明一下，这里我把其他的页面删除了，此时清单文件如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"package"</span>: <span class="string">"top.kai666666.blog"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"橙光笔记"</span>,</span><br><span class="line">  <span class="attr">"versionName"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"versionCode"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"minPlatformVersion"</span>: <span class="string">"1020"</span>,</span><br><span class="line">  <span class="attr">"icon"</span>: <span class="string">"/Common/logo.png"</span>,</span><br><span class="line">  <span class="attr">"features"</span>: [&#123; <span class="attr">"name"</span>: <span class="string">"system.prompt"</span> &#125;, &#123; <span class="attr">"name"</span>: <span class="string">"system.router"</span> &#125;, &#123; <span class="attr">"name"</span>: <span class="string">"system.shortcut"</span> &#125;],</span><br><span class="line">  <span class="attr">"permissions"</span>: [&#123; <span class="attr">"origin"</span>: <span class="string">"*"</span> &#125;],</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"logLevel"</span>: <span class="string">"off"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"router"</span>: &#123;</span><br><span class="line">    <span class="attr">"entry"</span>: <span class="string">"Webview"</span>,</span><br><span class="line">    <span class="attr">"pages"</span>: &#123;</span><br><span class="line">      <span class="attr">"Webview"</span>: &#123;</span><br><span class="line">        <span class="attr">"component"</span>: <span class="string">"index"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"About"</span>: &#123;</span><br><span class="line">        <span class="attr">"component"</span>: <span class="string">"index"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"display"</span>: &#123;</span><br><span class="line">    <span class="attr">"titleBarBackgroundColor"</span>: <span class="string">"#f2f2f2"</span>,</span><br><span class="line">    <span class="attr">"titleBarTextColor"</span>: <span class="string">"#414141"</span>,</span><br><span class="line">    <span class="attr">"menu"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"pages"</span>: &#123;</span><br><span class="line">      <span class="attr">"Webview"</span>: &#123;</span><br><span class="line">        <span class="attr">"titleBarText"</span>: <span class="string">"橙光笔记"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"About"</span>: &#123;</span><br><span class="line">        <span class="attr">"menu"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的最后把<code>/src/Common/logo.png</code>下的图片换成我们的，然后生成一个桌面图标，最后出来的效果如下，简直和原生APP一模一样。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/9.gif" alt="完整版"></p><p>快应用版本的博客就做好了，当然你可以利用快应用的能力来新增更多的功能，也可以做自己喜欢的快应用。最后提交到应用市场上，让更多小伙伴访问。提交到应用市场无非就2步，一步就是<a href="https://www.quickapp.cn/docCenter/post/71" target="_blank" rel="noopener">注册</a>，另一步就是<a href="https://www.quickapp.cn/docCenter/post/72" target="_blank" rel="noopener">上传自己的快应用</a>。</p><blockquote><p>PS：通过亲测，发现单纯的用web标签包一层外部web页面是很难通过审核的。好在有像<a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="noopener">hexo-generator-json-content</a>这样的库，可以帮助生成一个关于博客信息的JSON对象，这样就可以包装一下我们的快应用，使得前几个页面不是单纯的外部web页面就可以了。通过几次尝试以后发现，只要<strong>前2级页面</strong>没有使用外部页面就可以通过的。现在本博客的快应用已经上线，如果你使用的是安卓手机，那么用原生的浏览器打开现在这个页面，就可能（具体还得看手机厂商和型号）会唤起本博客的快应用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近公司在做快应用的需求，经过2周的努力，&lt;code&gt;淘粉吧快应用&lt;/code&gt;已经上线了，现在借此机会跟大家聊聊快应用。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;杂谈&quot;&gt;&lt;a href=&quot;#杂谈&quot; class=&quot;headerlink&quot; title=&quot;杂谈&quot;&gt;&lt;/a&gt;杂谈&lt;/h3
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.kai666666.top/categories/JavaScript/"/>
    
    
      <category term="前端技术" scheme="https://www.kai666666.top/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
