<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>橙光笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.kai666666.top/"/>
  <updated>2019-12-06T06:21:23.722Z</updated>
  <id>https://www.kai666666.top/</id>
  
  <author>
    <name>Orange</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端3D文字效果</title>
    <link href="https://www.kai666666.top/2019/12/06/%E5%89%8D%E7%AB%AF3D%E6%96%87%E5%AD%97%E6%95%88%E6%9E%9C/"/>
    <id>https://www.kai666666.top/2019/12/06/%E5%89%8D%E7%AB%AF3D%E6%96%87%E5%AD%97%E6%95%88%E6%9E%9C/</id>
    <published>2019-12-06T04:16:54.000Z</published>
    <updated>2019-12-06T06:21:23.722Z</updated>
    
    <content type="html"><![CDATA[<p>今天来讨论一下前端的3D文字效果，如图：</p><p><img src="/2019/12/06/前端3D文字效果/1.png" alt="3D文字效果"></p><hr><h3 id="字体阴影"><a href="#字体阴影" class="headerlink" title="字体阴影"></a>字体阴影</h3><p>看到这样的效果，首先想到的当然是CSS中的文字阴影来实现，首先给出HTNL代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"font-3d"</span>&gt;</span>CSS 3D效果<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来就是添加样式了，大笔一挥如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#c7f6f6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-3d</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffebcd</span>;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">4px</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">#158af7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最关键的一个样式是<code>text-shadow</code>，他的签名是这样的：<code>text-shadow: h-shadow v-shadow blur color;</code>，其中第一个参数<code>h-shadow</code>是水平方向的偏移量，正数是向右偏移，负数是向左偏移；第二个参数<code>v-shadow</code>是垂直方向偏移量，正数是向下偏移，负数是向上偏移；第三个参数<code>blur</code>是模糊大小，值越大越模糊，该值可以不写，默认是0，表示不模糊；第四个参数<code>color</code>是颜色，同样可以不写，默认是当前字体的颜色。</p><p>此时我们发现，单纯的阴影边界地方有菱角，缺乏立体感，具体效果如下：</p><p><img src="/2019/12/06/前端3D文字效果/2.png" alt="3D阴影"></p><h3 id="多重阴影模拟"><a href="#多重阴影模拟" class="headerlink" title="多重阴影模拟"></a>多重阴影模拟</h3><p>为了让效果更好，我们可以写多重阴影来模拟，阴影每次增加1点（这里是1px），这样看着就像阴影连着似得，如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#c7f6f6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.font-3d</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffebcd</span>;</span><br><span class="line">  <span class="attribute">text-shadow</span>:</span><br><span class="line">    <span class="number">1px</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#158af7</span>,</span><br><span class="line">    <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> <span class="number">#158af7</span>,</span><br><span class="line">    <span class="number">3px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#158af7</span>,</span><br><span class="line">    <span class="number">4px</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">#158af7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的效果，就跟刚开始看到的是一样的了。你可以点击<a href="https://codepen.io/kaiorange/pen/mdyJgjZ" target="_blank" rel="noopener">这里</a>自己修改一下样式试试。</p><h3 id="three-js中的3D字体"><a href="#three-js中的3D字体" class="headerlink" title="three.js中的3D字体"></a>three.js中的3D字体</h3><p><a href="https://github.com/mrdoob/three.js" target="_blank" rel="noopener">three.js</a>是非常著名的3D库，写个3D字当然是不在话下（单纯的用这做3D字绝对是大材小用）。<code>three.js</code>使用3D字体大概需要2步骤，第1步引入<code>typeface</code>类型的字体，第2步把<code>TextGeometry</code>文字结构对象加入到场景中。具体的可以看一下官方给出的<a href="https://threejs.org/docs/index.html#api/en/geometries/TextGeometry" target="_blank" rel="noopener">这篇文章</a>，这里就不再重复叙述了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天来讨论一下前端的3D文字效果，如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/12/06/前端3D文字效果/1.png&quot; alt=&quot;3D文字效果&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;字体阴影&quot;&gt;&lt;a href=&quot;#字体阴影&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="CSS" scheme="https://www.kai666666.top/categories/CSS/"/>
    
    
      <category term="CSS效果" scheme="https://www.kai666666.top/tags/CSS%E6%95%88%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>解决Electron安装报错问题</title>
    <link href="https://www.kai666666.top/2019/11/06/%E8%A7%A3%E5%86%B3Electron%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
    <id>https://www.kai666666.top/2019/11/06/%E8%A7%A3%E5%86%B3Electron%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</id>
    <published>2019-11-06T02:00:00.000Z</published>
    <updated>2019-12-07T02:03:46.091Z</updated>
    
    <content type="html"><![CDATA[<p>Electron是一个优秀的跨平台桌面端应用的框架，<a href="https://electronjs.org/" target="_blank" rel="noopener">官网</a>给出的简绍很简单：<code>使用 JavaScript, HTML 和 CSS 构建跨平台的桌面应用</code>。好多朋友也想试试使用前端技术来做一个桌面应用，但是往往在安装的时候就直接报错了，大多数的错误是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error: read ECONNRESET</span><br><span class="line"># 或者</span><br><span class="line">Error: Electron failed to install correctly ...</span><br></pre></td></tr></table></figure><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>解决办法也是简单的，如果你是安装失败了，那么先把<code>node_modules</code>中的<code>electron</code>删掉，然后重新开始下面的步骤。</p><ol><li><p>设置淘宝镜像源（推荐使用nrm，这一步是为了保证其他依赖不报错）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量并安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Mac系统</span></span><br><span class="line">ELECTRON_MIRROR=http://npm.taobao.org/mirrors/electron/ npm install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Windows系统</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局依赖cross-env为了把参数写入环境变量 当然直接修改环境变量也可以</span></span><br><span class="line">npm install -g cross-env</span><br><span class="line">cross-env ELECTRON_MIRROR=http://npm.taobao.org/mirrors/electron npm install</span><br></pre></td></tr></table></figure><p>然后稍等片刻就可以了。</p></li></ol><h3 id="深入研究"><a href="#深入研究" class="headerlink" title="深入研究"></a>深入研究</h3><p>通过上面的设置基本上就解决了Electron安装的问题，现在我们可以深入一下，看看它是怎么解决的。首先我们进入它的<a href="https://github.com/electron/electron" target="_blank" rel="noopener">源代码</a>，这个里面有一个npm的文件夹，这个路径下存放的就是npm上的Electron依赖。打开看看你会发现只有几个文件，没错Electron的依赖包就这么点东西。</p><p><img src="/2019/11/06/解决Electron安装报错问题/1.png" alt="Electron依赖中的内容"></p><p>那么这么点东西怎么做跨平台的应用的呢？首先看一下<code>package.json</code>文件，为了方便查看，我拷贝过来一份，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "main": "index.js",</span><br><span class="line">  "types": "electron.d.ts",</span><br><span class="line">  "bin": &#123;</span><br><span class="line">    "electron": "cli.js"</span><br><span class="line">  &#125;,</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "postinstall": "node install.js"</span><br><span class="line">  &#125;,</span><br><span class="line">  "dependencies": &#123;</span><br><span class="line">    "@electron/get": "^1.0.1",</span><br><span class="line">    "@types/node": "^12.0.12",</span><br><span class="line">    "extract-zip": "^1.0.3"</span><br><span class="line">  &#125;,</span><br><span class="line">  "engines": &#123;</span><br><span class="line">    "node": "&gt;= 8.6"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内容很少，但有2个部分很重要。一个是<code>script</code>，可以看到里面有一个<code>postinstall</code>的钩子命令，这条命令会在<strong>下载完依赖以后执行一下</strong>，也就说当依赖安装完后会执行<code>node install.js</code>。另外一个重要的部分就是<code>bin</code>，它指定了<strong>运行全局依赖时的入口文件</strong>，也就是<code>cli.js</code>文件，我们稍后再说这个。</p><p>先简单的看一下<code>install.js</code>，里面最主要的部分是调用了方法<code>downloadArtifact</code>，用来下载跟平台相关的Electron可执行文件。下载完后调用<code>extractFile</code>方法，把文件解压了，最后在<code>path.txt</code>中把执行文件的路径写进去，这个路径下是不同平台下的可执行文件的路径。</p><p><img src="/2019/11/06/解决Electron安装报错问题/2.png" alt="install.js"></p><p>最后我们看一下他是从哪里下载的。首先<code>downloadArtifact</code>方法是在<a href="https://github.com/electron/get" target="_blank" rel="noopener">@electron/get</a>依赖里面。我们进入到<code>src/index</code>中。</p><p><img src="/2019/11/06/解决Electron安装报错问题/3.png" alt="downloadArtifact方法"></p><p>此时我们可以看到url是通过<code>getArtifactRemoteURL</code>方法获取的，然后我们看一下<code>getArtifactRemoteURL</code>方法，源码在<a href="https://github.com/electron/get/blob/master/src/artifact-utils.ts" target="_blank" rel="noopener">这里</a>。</p><p><img src="/2019/11/06/解决Electron安装报错问题/4.png" alt="getArtifactRemoteURL方法"></p><p>在<code>getArtifactRemoteURL</code>方法中，可以看到，基础路径<code>base</code>是通过<code>mirrorVar</code>函数返回的，默认情况是没有nightly的，所以默认情况下是下面这个样子的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">process.env[<span class="string">`NPM_CONFIG_ELECTRON_MIRROR`</span>] ||</span><br><span class="line">process.env[<span class="string">`npm_config_electron_MIRROR`</span>] ||</span><br><span class="line">process.env[<span class="string">`npm_package_config_electron_mirror`</span>] ||</span><br><span class="line">process.env[<span class="string">`ELECTRON_MIRROR`</span>] ||</span><br><span class="line">options[<span class="string">'mirror'</span>] ||</span><br><span class="line">defaultValue</span><br></pre></td></tr></table></figure><p>而我们很少传入env的，options也没有mirror，所以通常是<code>defaultValue</code>，具体值如下：</p><p><img src="/2019/11/06/解决Electron安装报错问题/5.png" alt="defaultValue"></p><p>综上，我们可以看到默认情况下安装的时候会在<a href="https://github.com/electron/electron/releases" target="_blank" rel="noopener">github的release处</a>下载一个平台相关的可执行文件。但是往往在国内github会很慢，所以这就导致了下载失败的问题，如果我们的env中传入<code>ELECTRON_MIRROR</code>，那就会走该值所对应的地址，通常我们使用淘宝的镜像<code>http://npm.taobao.org/mirrors/electron</code>。</p><p>同样的，在构建Windows系统的时候可能会用到依赖<code>windows-build-tools</code>，该依赖会安装一个Python，这时可以使用淘宝的镜像文件会更快一些：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Macos</span></span><br><span class="line">"PYTHON_MIRROR=http://npm.taobao.org/mirrors/python" npm install --global --production windows-build-tools</span><br><span class="line"><span class="meta">#</span><span class="bash"> Windows</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 若全局已经安装过cross-env那么就不需要再安装了</span></span><br><span class="line">npm install -g cross-env</span><br><span class="line">cross-env PYTHON_MIRROR=http://npm.taobao.org/mirrors/python npm install --global --production windows-build-tools</span><br></pre></td></tr></table></figure><p>淘宝更多的开源软件的镜像可以参考<a href="https://npm.taobao.org/mirrors" target="_blank" rel="noopener">这里</a>。</p><h3 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h3><p>下载过程基本上我们已经明白了，现在说一下启动过程。一般启动Electron的时候调用的命令是<code>electron .</code>，而electron命令其实是调用依赖包中的<a href="https://github.com/electron/electron/blob/master/npm/cli.js" target="_blank" rel="noopener">cli.js</a>文件，该文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> electron = <span class="built_in">require</span>(<span class="string">'./'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proc = <span class="built_in">require</span>(<span class="string">'child_process'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = proc.spawn(electron, process.argv.slice(<span class="number">2</span>), &#123; <span class="attr">stdio</span>: <span class="string">'inherit'</span>, <span class="attr">windowsHide</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">child.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">code</span>) </span>&#123;</span><br><span class="line">  process.exit(code)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleTerminationSignal = <span class="function"><span class="keyword">function</span> (<span class="params">signal</span>) </span>&#123;</span><br><span class="line">  process.on(signal, <span class="function"><span class="keyword">function</span> <span class="title">signalHandler</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!child.killed) &#123;</span><br><span class="line">      child.kill(signal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleTerminationSignal(<span class="string">'SIGINT'</span>)</span><br><span class="line">handleTerminationSignal(<span class="string">'SIGTERM'</span>)</span><br></pre></td></tr></table></figure><p>其中<code>var electron = require(&#39;./&#39;)</code>的时候是引入当前文件夹下的<code>index.js</code>文件，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pathFile = path.join(__dirname, <span class="string">'path.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElectronPath</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (fs.existsSync(pathFile)) &#123;</span><br><span class="line">    <span class="keyword">var</span> executablePath = fs.readFileSync(pathFile, <span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">if</span> (process.env.ELECTRON_OVERRIDE_DIST_PATH) &#123;</span><br><span class="line">      <span class="keyword">return</span> path.join(process.env.ELECTRON_OVERRIDE_DIST_PATH, executablePath)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path.join(__dirname, <span class="string">'dist'</span>, executablePath)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Electron failed to install correctly, please delete node_modules/electron and try installing again'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = getElectronPath()</span><br></pre></td></tr></table></figure><p><code>index.js</code>文件内容很少，主要是返回了一个字符串的地址，也就是当前路径下的dist文件夹下的可执行文件的路径。还记得下载完后往<code>path.txt</code>里面写了一个可执行文件的路径吗？</p><p>我们再回到<code>cli.js</code>文件中，从代码中可以看出，里面启动了一个子进程，用子进程启动Electron的可执行文件，并且把参数传进去了。最后如果主进程中断或者出现错误，那么就把子进程杀掉。当然你也可以直接双击dist下的可执行文件，它会启动一个默认的页面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Electron是一个优秀的跨平台桌面端应用的框架，&lt;a href=&quot;https://electronjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;给出的简绍很简单：&lt;code&gt;使用 JavaScript, HTML 和 CSS
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.kai666666.top/categories/JavaScript/"/>
    
    
      <category term="Electron" scheme="https://www.kai666666.top/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>《世界尽头的咖啡馆》读书笔记</title>
    <link href="https://www.kai666666.top/2019/10/09/%E3%80%8A%E4%B8%96%E7%95%8C%E5%B0%BD%E5%A4%B4%E7%9A%84%E5%92%96%E5%95%A1%E9%A6%86%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.kai666666.top/2019/10/09/%E3%80%8A%E4%B8%96%E7%95%8C%E5%B0%BD%E5%A4%B4%E7%9A%84%E5%92%96%E5%95%A1%E9%A6%86%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2019-10-09T11:29:25.000Z</published>
    <updated>2019-10-29T10:19:11.786Z</updated>
    
    <content type="html"><![CDATA[<p>本书剧情很简单：主人公因为堵车，选择开往另外一条路，结果迷路了。机缘巧合之下，主人公来到了一家名叫“你为什么来这里咖啡馆”，在咖啡馆内，主人公与凯西、迈克、安妮等人聊了一晚上。就是这一晚上的聊天，改变了主人公的一生。<br><img src="/2019/10/09/《世界尽头的咖啡馆》读书笔记/1.jpg" alt="《世界尽头的咖啡馆》"></p><hr><ol><li>人到绝境，必能逢生。</li><li>思考三个问题：你为什么来这里（一个人为什么而存在）？你害怕死亡吗？你满足吗？</li><li>“今天的午餐时间早就过去了，反倒是离明天的早餐时间更近了”（换个角度思考问题）。</li><li>有些事情不是要去“面对”，而是要去“迎接”。如果有一天你决定放下那种感觉（害怕困难），就勇敢做出选择吧，只有你自己才能给你自己做决定。</li><li>在我过去的人生中，我所作出的大部分决定都是为了回应他人的期待，比如说家人的建议、文化环境带来的压力和别人的看法。</li><li>一个人要想知道如何实现自己的存在意义，应该去探索和迎接与存在意义相关的各种事物。</li><li>你和你想做的事情不在一个频道，你就会浪费许多精力。等你有机会做你想做的事时，你可能已经没有力气或时间了。即在反向浪上浪费的时间和精力越多，留给正向浪的时间和精力就越少。如果一个22岁毕业的人，每天用在处理邮件上的时间是20分钟，那么按照平均75岁的寿命来算，他一辈子1年的时间将用在处理邮件上。</li><li>好多人努力赚钱，为了退休后过上好日子。其实每一天都是一个机会，每一天都可以做自己想做的事，根本不需要等到“退休”。</li><li>为什么人们把那么多时间花在准备工作上，而不是直接去做自己想做的事。<br> 部分原因就是在于我们每天都暴露在大量的营销信息中，如果不谨慎点儿，我们肯定会把自己的幸福和满足寄托在某样产品或服务上。最后我们会陷入一种财务困境，必须不断去做事情来挣钱，尽管那些事情不是我们真正想做的。<br> 还有一个问题，因为做了一份没有满足感的工作，并且花了很多时间在上面，就会觉得越来越不满足。于是我们盼望着退休，等到退休的那天，我们再也不用工作了，就可以做自己想做的事了。<br> 由于每天做的不是自己想做的事，为了弥补心中因此产生的空虚，我们会买更多东西，希望那些商品如广告上表现的那样可以给我们带来满足感。<br> 但不幸的是，我们买的越多，要付的账就越多，就越需要花更多的时间工作，这样才能为一切买单。同样的我们花在工作上的时间并非发自内心的，所以投入工作的时间越多，我们就会产生越多不满，因此我们留给真正想做的事的时间就更少了。</li><li>某样东西是否能让你的生活更圆满，是你自己说了算，和别人告诉你它圆不圆满无关。</li><li>大多数人每天想的事情里并没有死亡的概念。但随着时间一天天过去，人活在世上，剩给自己的时间越来越少，大家的潜意思里很清楚，死亡在靠近。所以，他们害怕未来有一天，他们再也没有机会了。他们害怕死亡降临的那一天。</li><li>只有当你弄清自己为什么存在，并且开始为这个存在意义做出实际努力后，你才能感到满足。</li><li>想象一下这样的后果。你的生活方式与你的生存意义一致，你可以用一生的时间来做你想做的事情，因为你已经弄清楚了自己存在的意义。但是等你到了退休的时候发现自己没有很多钱，那你是否不开心？</li><li>对于大多数人如果弄清了自己为什么存在，并开始做自己认为可以实现自己目标的事情，那么很有可能不会像整日工作的时候那么看重钱。</li><li>为了自己生存意义而努力的人，往往富有激情和热情，而这往往会感染别人，使得他们会主动帮助你；即使他们帮助不了你，他们会告诉别人，就这样通过一个人告诉另一个人，那么你将会有一大波的潜在帮手。所以这样的人往往运气不会差。</li><li>不管别人让我们相信什么，不管我们在广告里听到什么，不管我们对工作的高压有什么感觉，我们每个人都可以把握什么中的每一刻。大多数人在各种各样的外界力量的影响下，总是努力调整自己，不知不觉地被他们控制了。永远不要因为其他人或事失去对自己命运的掌控。要积极地选择自己的人生道路，不然就只能被动接受安排。</li><li>人不迈出第一步，就站在原地等待。如果有人真想知道他为什么存在，他就得为自己找出答案。没有统一适用于所有人的生存意义，但是可以试试找一个地方集中精力思考问题。体验不同的事物，接触不同的理念，留意自己对各种事物的反应，这些都有助于我们寻找答案。</li><li>生活本来就很精彩，只不过有人没有发现自己是作者，没发现他们可以按自己的想法创作。</li><li>大多数人的路途会在这里结束：他们窥探篱笆墙上的小洞，清楚地看到他们想过的那种生活，但出于一些原因，他们不会打开门，走进那种生活。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本书剧情很简单：主人公因为堵车，选择开往另外一条路，结果迷路了。机缘巧合之下，主人公来到了一家名叫“你为什么来这里咖啡馆”，在咖啡馆内，主人公与凯西、迈克、安妮等人聊了一晚上。就是这一晚上的聊天，改变了主人公的一生。&lt;br&gt;&lt;img src=&quot;/2019/10/09/《世界
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://www.kai666666.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="人生哲学" scheme="https://www.kai666666.top/tags/%E4%BA%BA%E7%94%9F%E5%93%B2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>基于Electron的touchbar开发</title>
    <link href="https://www.kai666666.top/2019/09/21/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84touchbar%E5%BC%80%E5%8F%91/"/>
    <id>https://www.kai666666.top/2019/09/21/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84touchbar%E5%BC%80%E5%8F%91/</id>
    <published>2019-09-21T05:31:35.000Z</published>
    <updated>2019-10-31T06:06:41.833Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://electronjs.org/" target="_blank" rel="noopener">Electron</a>是<code>使用 JavaScript, HTML 和 CSS 构建跨平台的桌面应用</code>的一个框架，本人之前写的一个放烟花的程序<a href="https://github.com/KaiOrange/fireworks-cool" target="_blank" rel="noopener">fireworks-cool</a>就是基于这套框架来做的。electron在跨平台应用方面做的还是挺好的，著名的编辑器<code>VS Code</code>与<code>Atom</code>都是使用<code>Electron</code>来开发的。有了<code>Node</code>，前端工程师可以直接干后端的事了；有了<code>Electron</code>，前端工程师可以直接干桌面应用工程师的事了。昨天研究这个<code>touchbar</code>，真心感觉到了<code>JavaScript</code>的无所不能属性，明天我们开发一个操作系统😊。<br>吹了这么多<code>Electron</code>，我们再说说<code>touchbar</code>吧。我觉得<code>touchbar</code>是<code>Mac</code>上一个鸡肋的功能，我在使用<code>Mac</code>的时候很少去关注<code>touchbar</code>。昨天忽然想到<code>Electron</code>可以开发桌面应用，那么是否可以做<code>touchbar</code>相关的功能呢？于是看了下它的官方文档，发现确实是可以开发<code>touchbar</code>相关的功能，不过目前<code>Electron</code>的<code>touchbar</code>还是<strong>实验性的API</strong>，后续有可能更改也有可能去掉，不过并不影响我们先玩玩它。玩玩它后，你会发现鸡肋的<code>touchbar</code>还是有点意思的。当然<code>touchbar</code>是<code>Mac</code>特有的硬件，如果不是<code>Mac</code>的小伙伴就体验不了本章的内容了。</p><hr><h3 id="运行官方的例子"><a href="#运行官方的例子" class="headerlink" title="运行官方的例子"></a>运行官方的例子</h3><p>官方给了一个老虎机的一个例子，这个例子还是很有趣的，感兴趣的可以直接<a href="https://electronjs.org/docs/api/touch-bar#touchbarescapeitem" target="_blank" rel="noopener">点击这里</a>查看。如果连接打不开，可以直接看下面的代码，我已经帮你拷贝好了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow, TouchBar &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; TouchBarLabel, TouchBarButton, TouchBarSpacer &#125; = TouchBar</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> spinning = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Reel labels</span></span><br><span class="line"><span class="keyword">const</span> reel1 = <span class="keyword">new</span> TouchBarLabel()</span><br><span class="line"><span class="keyword">const</span> reel2 = <span class="keyword">new</span> TouchBarLabel()</span><br><span class="line"><span class="keyword">const</span> reel3 = <span class="keyword">new</span> TouchBarLabel()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Spin result label</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">new</span> TouchBarLabel()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Spin button</span></span><br><span class="line"><span class="keyword">const</span> spin = <span class="keyword">new</span> TouchBarButton(&#123;</span><br><span class="line">  label: <span class="string">'🎰 Spin'</span>,</span><br><span class="line">  backgroundColor: <span class="string">'#7851A9'</span>,</span><br><span class="line">  click: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Ignore clicks if already spinning</span></span><br><span class="line">    <span class="keyword">if</span> (spinning) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    spinning = <span class="literal">true</span></span><br><span class="line">    result.label = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> timeout = <span class="number">10</span></span><br><span class="line">    <span class="keyword">const</span> spinLength = <span class="number">4</span> * <span class="number">1000</span> <span class="comment">// 4 seconds</span></span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="built_in">Date</span>.now()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> spinReels = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      updateReels()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((<span class="built_in">Date</span>.now() - startTime) &gt;= spinLength) &#123;</span><br><span class="line">        finishSpin()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Slow down a bit on each spin</span></span><br><span class="line">        timeout *= <span class="number">1.1</span></span><br><span class="line">        setTimeout(spinReels, timeout)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    spinReels()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getRandomValue = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> values = [<span class="string">'🍒'</span>, <span class="string">'💎'</span>, <span class="string">'7️⃣'</span>, <span class="string">'🍊'</span>, <span class="string">'🔔'</span>, <span class="string">'⭐'</span>, <span class="string">'🍇'</span>, <span class="string">'🍀'</span>]</span><br><span class="line">  <span class="keyword">return</span> values[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * values.length)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateReels = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  reel1.label = getRandomValue()</span><br><span class="line">  reel2.label = getRandomValue()</span><br><span class="line">  reel3.label = getRandomValue()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> finishSpin = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> uniqueValues = <span class="keyword">new</span> <span class="built_in">Set</span>([reel1.label, reel2.label, reel3.label]).size</span><br><span class="line">  <span class="keyword">if</span> (uniqueValues === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// All 3 values are the same</span></span><br><span class="line">    result.label = <span class="string">'💰 Jackpot!'</span></span><br><span class="line">    result.textColor = <span class="string">'#FDFF00'</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (uniqueValues === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 2 values are the same</span></span><br><span class="line">    result.label = <span class="string">'😍 Winner!'</span></span><br><span class="line">    result.textColor = <span class="string">'#FDFF00'</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// No values are the same</span></span><br><span class="line">    result.label = <span class="string">'🙁 Spin Again'</span></span><br><span class="line">    result.textColor = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  spinning = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> touchBar = <span class="keyword">new</span> TouchBar(&#123;</span><br><span class="line">  items: [</span><br><span class="line">    spin,</span><br><span class="line">    <span class="keyword">new</span> TouchBarSpacer(&#123; <span class="attr">size</span>: <span class="string">'large'</span> &#125;),</span><br><span class="line">    reel1,</span><br><span class="line">    <span class="keyword">new</span> TouchBarSpacer(&#123; <span class="attr">size</span>: <span class="string">'small'</span> &#125;),</span><br><span class="line">    reel2,</span><br><span class="line">    <span class="keyword">new</span> TouchBarSpacer(&#123; <span class="attr">size</span>: <span class="string">'small'</span> &#125;),</span><br><span class="line">    reel3,</span><br><span class="line">    <span class="keyword">new</span> TouchBarSpacer(&#123; <span class="attr">size</span>: <span class="string">'large'</span> &#125;),</span><br><span class="line">    result</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">window</span></span><br><span class="line"></span><br><span class="line">app.once(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">window</span> = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    frame: <span class="literal">false</span>,</span><br><span class="line">    titleBarStyle: <span class="string">'hiddenInset'</span>,</span><br><span class="line">    width: <span class="number">200</span>,</span><br><span class="line">    height: <span class="number">200</span>,</span><br><span class="line">    backgroundColor: <span class="string">'#000'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">window</span>.loadURL(<span class="string">'about:blank'</span>)</span><br><span class="line">  <span class="built_in">window</span>.setTouchBar(touchBar)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行上面的代码：</p><ol><li>建立一个文件夹，比如<code>touchbar-demo</code>，再创建一个文件<code>touchbar.js</code>，将上面的代码拷贝进去。</li><li><p>当前目录下，在命令行输入下面的内容来安装<code>Electron</code>。</p><blockquote><p>ELECTRON_MIRROR=<a href="http://npm.taobao.org/mirrors/electron/" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/electron/</a> npm install electron</p></blockquote></li><li><p>命令行执行下面内容以启动：</p><blockquote><p>./node_modules/.bin/electron touchbar.js</p></blockquote></li></ol><p>你可以看到我们安装<code>Electron</code>的时候加了一个<code>ELECTRON_MIRROR</code>的参数，为什么要带这个参数呢？其实在<code>npm install electron</code>的时候会下载<code>electron</code>依赖，这个依赖有一个<code>postinstall</code>的脚本，该脚本会继续从<code>github</code>下载当前平台的<code>Electron</code>应用程序，由于国内对国外网站的限制，虽然<code>github</code>是可以访问的，但是网速不咋样。所以直接访问的话往往会有下载失败的问题（即使npm的源切换到taobao也经常出现问题，因为下载<code>Electron</code>应用程序是走<code>github</code>的下载地址的，下载地址具体请看<a href="https://github.com/electron/electron/releases" target="_blank" rel="noopener">这里</a>）。</p><p>通过上述三个步骤，实例代码基本上可以跑通了，大概效果如下，是不是很有意思呢？</p><p><img src="/2019/09/21/基于Electron的touchbar开发/1.gif" alt="运行官方示例"></p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>通过上面的代码我们可以看到，通过<code>new TouchBar()</code>创建了一个TouchBar的实例，然后调用<code>BrowserWindow</code>对象的<code>setTouchBar()</code>方法就可以了，<code>TouchBar</code>的构造方法的参数是一个对象，这个对象可选字段有2个，一个是<code>items</code>，另一个是<code>escapeItem</code>。<code>items</code>是一个数组，用来添加<code>touchbar</code>中间部分的组件。<code>escapeItem</code>是单个的一个组件，用来替换<code>touchbar</code>左侧的<code>esc</code>按钮。<br>现在我们新建一个<code>index.js</code>，运行下面代码（命令行输入<code>./node_modules/.bin/electron index.js</code>），看看效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow, TouchBar &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; TouchBarLabel, TouchBarButton &#125; = TouchBar</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> touchBar = <span class="keyword">new</span> TouchBar(&#123;</span><br><span class="line">  items: [</span><br><span class="line">    <span class="keyword">new</span> TouchBarButton(&#123;</span><br><span class="line">      label: <span class="string">'😇'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarButton(&#123;</span><br><span class="line">      label: <span class="string">'😁'</span>,</span><br><span class="line">      backgroundColor: <span class="string">'#ff0000'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarButton(&#123;</span><br><span class="line">      label: <span class="string">'🤣'</span>,</span><br><span class="line">      backgroundColor: <span class="string">'#00ff00'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarButton(&#123;</span><br><span class="line">      label: <span class="string">'😂'</span>,</span><br><span class="line">      backgroundColor: <span class="string">'#0000ff'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarLabel(&#123;</span><br><span class="line">      label: <span class="string">'TouchBarLabel就是文字'</span>,</span><br><span class="line">      textColor: <span class="string">'#AACCEE'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  escapeItem: <span class="keyword">new</span> TouchBarButton(&#123;</span><br><span class="line">    label: <span class="string">'这里原本是退出键'</span>,</span><br><span class="line">    icon: <span class="string">'./img.jpeg'</span>,</span><br><span class="line">    iconPosition: <span class="string">'left'</span>,</span><br><span class="line">    click:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'点了也不会退出的！因为我就没写退出的事件'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">window</span></span><br><span class="line"></span><br><span class="line">app.once(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">window</span> = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    frame: <span class="literal">false</span>,</span><br><span class="line">    titleBarStyle: <span class="string">'hiddenInset'</span>,</span><br><span class="line">    width: <span class="number">200</span>,</span><br><span class="line">    height: <span class="number">200</span>,</span><br><span class="line">    backgroundColor: <span class="string">'#000'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">window</span>.loadURL(<span class="string">'about:blank'</span>)</span><br><span class="line">  <span class="built_in">window</span>.setTouchBar(touchBar)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2019/09/21/基于Electron的touchbar开发/2.png" alt="items与escapeItem"></p><p>代码中第29行的图标点击<a href="img.jpeg">这里下载</a>。</p><p>上面使用了2个组件，一个是<code>TouchBarButton</code>，代表的是一个按钮，另一个是<code>TouchBarLabel</code>，代表的是一个简单的标签。需要注意的是<code>TouchBarLabel</code>只是单纯的文字，不支持点击事件（当然你使用的时候有可能API已经支持了），它的参数也很简单，就是上面例子中的那2个，<code>TouchBarButton</code>是支持点击事件的，如上面<code>escapeItem</code>中的click方法。</p><p><code>Electron</code>所支持的所有组件（写本章的时候）有：</p><ol><li><a href="https://electronjs.org/docs/api/touch-bar-button" target="_blank" rel="noopener">TouchBarButton</a></li><li><a href="https://electronjs.org/docs/api/touch-bar-label" target="_blank" rel="noopener">TouchBarLabel</a></li><li><a href="https://electronjs.org/docs/api/touch-bar-color-picker" target="_blank" rel="noopener">TouchBarColorPicker</a></li><li><a href="https://electronjs.org/docs/api/touch-bar-group" target="_blank" rel="noopener">TouchBarGroup</a></li><li><a href="https://electronjs.org/docs/api/touch-bar-popover" target="_blank" rel="noopener">TouchBarPopover</a></li><li><a href="https://electronjs.org/docs/api/touch-bar-scrubber" target="_blank" rel="noopener">TouchBarScrubber</a></li><li><a href="https://electronjs.org/docs/api/touch-bar-segmented-control" target="_blank" rel="noopener">TouchBarSegmentedControl</a></li><li><a href="https://electronjs.org/docs/api/touch-bar-slider" target="_blank" rel="noopener">TouchBarSlider</a></li><li><a href="https://electronjs.org/docs/api/touch-bar-spacer" target="_blank" rel="noopener">TouchBarSpacer</a></li></ol><p>这里给一个简单的例子展示一下其中的几个组件，剩下的你可以自己去尝试一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow, TouchBar &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; TouchBarColorPicker, TouchBarSpacer, TouchBarScrubber, TouchBarSegmentedControl, TouchBarSlider &#125; = TouchBar</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> touchBar = <span class="keyword">new</span> TouchBar(&#123;</span><br><span class="line">  items: [</span><br><span class="line">    <span class="keyword">new</span> TouchBarColorPicker(),</span><br><span class="line">    <span class="keyword">new</span> TouchBarSpacer(&#123;</span><br><span class="line">      size: <span class="string">'small'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarScrubber(&#123;</span><br><span class="line">      items: [&#123;<span class="attr">label</span>:<span class="string">'第一个'</span>&#125;,&#123;<span class="attr">label</span>:<span class="string">'第二个'</span>&#125;],</span><br><span class="line">      selectedStyle: <span class="string">'outline'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarSpacer(&#123;</span><br><span class="line">      size: <span class="string">'large'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarSegmentedControl(&#123;</span><br><span class="line">      segments:[&#123;<span class="attr">label</span>:<span class="string">'第一个'</span>&#125;,&#123;<span class="attr">label</span>:<span class="string">'第二个'</span>&#125;],</span><br><span class="line">      mode: <span class="string">'buttons'</span><span class="comment">// single multiple buttons</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarSpacer(&#123;</span><br><span class="line">      size: <span class="string">'flexible'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> TouchBarSlider(&#123;</span><br><span class="line">      label: <span class="string">'滑动组件'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">window</span></span><br><span class="line"></span><br><span class="line">app.once(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">window</span> = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    frame: <span class="literal">false</span>,</span><br><span class="line">    titleBarStyle: <span class="string">'hiddenInset'</span>,</span><br><span class="line">    width: <span class="number">200</span>,</span><br><span class="line">    height: <span class="number">200</span>,</span><br><span class="line">    backgroundColor: <span class="string">'#000'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">window</span>.loadURL(<span class="string">'about:blank'</span>)</span><br><span class="line">  <span class="built_in">window</span>.setTouchBar(touchBar)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2019/09/21/基于Electron的touchbar开发/3.jpg" alt="组件展示"></p><hr><p>PS：学会了这个，就有了后来的一个小项目<a href="https://github.com/KaiOrange/touchbar-emoji" target="_blank" rel="noopener">touchbar-emoji</a>，使用touchbar来控制飘落emoji表情雨。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://electronjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Electron&lt;/a&gt;是&lt;code&gt;使用 JavaScript, HTML 和 CSS 构建跨平台的桌面应用&lt;/code&gt;的一个框架，本人之前
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.kai666666.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://www.kai666666.top/tags/JavaScript/"/>
    
      <category term="Electron" scheme="https://www.kai666666.top/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>10分钟开发一个npm全局依赖包（下）</title>
    <link href="https://www.kai666666.top/2019/09/07/10%E5%88%86%E9%92%9F%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAnpm%E5%85%A8%E5%B1%80%E4%BE%9D%E8%B5%96%E5%8C%85%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>https://www.kai666666.top/2019/09/07/10%E5%88%86%E9%92%9F%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAnpm%E5%85%A8%E5%B1%80%E4%BE%9D%E8%B5%96%E5%8C%85%EF%BC%88%E4%B8%8B%EF%BC%89/</id>
    <published>2019-09-07T05:44:44.000Z</published>
    <updated>2019-09-07T07:32:43.700Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://kai666666.top/2019/09/06/10分钟开发一个npm全局依赖包（上）/#more" target="_blank" rel="noopener">上一篇</a>中我们用了10分钟实现了一个完整的古诗词命令行工具，本章中我们主要简绍2个命令行工具开发中常用的库，整个代码大概用时20分钟。</p><hr><h2 id="修改命令行颜色"><a href="#修改命令行颜色" class="headerlink" title="修改命令行颜色"></a>修改命令行颜色</h2><p>第一个简绍的库就是<a href="https://github.com/jaywcjlove/colors-cli" target="_blank" rel="noopener">‘colors-cli’</a>，他支持修改打印出来的文字的样式。<br>首先安装一下这个依赖<code>npm install colors-cli</code>，新建一个文件<code>test-color.js</code>，测试一下它的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="built_in">require</span>(<span class="string">'colors-cli/safe'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(color.red.bold(<span class="string">'Error!'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(color.yellow.magenta_b(<span class="string">'Warning'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(color.blue.underline(<span class="string">'Notice'</span>));</span><br></pre></td></tr></table></figure><p>引入<code>color</code>库的时候可以使用<code>var color = require(&#39;colors-cli/safe&#39;)</code>，也可以使用<code>var color = require(&#39;colors-cli&#39;)</code>，推荐使用前者，因为前者可以支持链式调用，使用起来更方便。上面运行结果如下：</p><p><img src="/2019/09/07/10分钟开发一个npm全局依赖包（下）/1.png" alt="修改颜色"></p><p>他是怎么实现的呢？其实是把文字用特殊符号包了一层，命令行对这种特殊符号会处理成样式，就比如<code>color.red.bold(&#39;Error!&#39;)</code>其实最后会返回一个字符串<code>&#39;[1m[31m[31mError![0m[0m[0m&#39;</code>，所以上面三行log代码和下面的结果是一样的，你可以直接用node运行一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'[1m[31m[31mError![0m[0m[0m'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'[45m[33m[33mWarning[0m[0m[0m'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'[4m[34m[34mNotice[0m[0m[0m'</span>);</span><br></pre></td></tr></table></figure><h2 id="处理用户输入"><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h2><p>在使用命令行的时候往往需要根据用户的参数给出友好的提示，<a href="https://github.com/yargs/yargs" target="_blank" rel="noopener">yargs</a>就是处理这种情况的一个优质的库。<br>有关<code>yargs</code>的具体使用可以直接看官方的文档，这里就不展开说了。现在我们做一个需求，就是根据用户传入的值，来改变诗词、作者、来源的颜色。代码大致是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"><span class="keyword">const</span> color = <span class="built_in">require</span>(<span class="string">'colors-cli/safe'</span>);</span><br><span class="line"><span class="keyword">let</span> argv = <span class="built_in">require</span>(<span class="string">'yargs'</span>)</span><br><span class="line">  .option(<span class="string">'ps'</span>, &#123;</span><br><span class="line">    alias: <span class="string">'poem-style'</span>,</span><br><span class="line">    demand: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'blue_bt'</span>,</span><br><span class="line">    describe: <span class="string">'诗词样式，如--ps=blue_bt'</span>,</span><br><span class="line">    type: <span class="string">'string'</span></span><br><span class="line">  &#125;).option(<span class="string">'as'</span>, &#123;</span><br><span class="line">    alias: <span class="string">'author-style'</span>,</span><br><span class="line">    demand: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'green_bt'</span>,</span><br><span class="line">    describe: <span class="string">'作者样式，如--as=green_bt'</span>,</span><br><span class="line">    type: <span class="string">'string'</span></span><br><span class="line">  &#125;).option(<span class="string">'os'</span>, &#123;</span><br><span class="line">    alias: <span class="string">'origin-style'</span>,</span><br><span class="line">    demand: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'cyan'</span>,</span><br><span class="line">    describe: <span class="string">'来源颜色，如--os=cyan'</span>,</span><br><span class="line">    type: <span class="string">'string'</span></span><br><span class="line">  &#125;).option(<span class="string">'h'</span>, &#123;</span><br><span class="line">    alias: <span class="string">'help'</span>,</span><br><span class="line">    demand: <span class="literal">false</span>,</span><br><span class="line">    boolean: <span class="literal">true</span>,</span><br><span class="line">    describe: <span class="string">'帮助'</span>,</span><br><span class="line">  &#125;).option(<span class="string">'v'</span>, &#123;</span><br><span class="line">    alias: <span class="string">'version'</span>,</span><br><span class="line">    demand: <span class="literal">false</span>,</span><br><span class="line">    boolean: <span class="literal">true</span>,</span><br><span class="line">    describe: <span class="string">'版本号'</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .argv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColorMethod</span>(<span class="params">commandStr = <span class="string">''</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> command = commandStr.replace(<span class="regexp">/\,/g</span>,<span class="string">'.'</span>).split(<span class="string">"."</span>);</span><br><span class="line">  <span class="keyword">let</span> colorMethod = color</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; command.length; i++) &#123;</span><br><span class="line">    colorMethod = colorMethod[command[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> colorMethod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'https://api.gushi.ci/all.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = response.data || &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> signature = data.author + <span class="string">'《'</span> + data.origin + <span class="string">'》'</span>;</span><br><span class="line">    <span class="keyword">let</span> prefix =  <span class="string">'———— '</span>;</span><br><span class="line">    <span class="keyword">let</span> paddingSpacing = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> spacingLength = data.content.length * <span class="number">2</span> - signature.length * <span class="number">2</span> - prefix.length;</span><br><span class="line">    <span class="keyword">if</span> (spacingLength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.origin.indexOf(<span class="string">'·'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">        spacingLength++;</span><br><span class="line">      &#125;</span><br><span class="line">      paddingSpacing = <span class="keyword">new</span> <span class="built_in">Array</span>(spacingLength).fill(<span class="string">' '</span>).join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    signature = getColorMethod(argv.as)(data.author) + <span class="string">'《'</span> + getColorMethod(argv.os)(data.origin) + <span class="string">'》'</span>;</span><br><span class="line">    signature = (paddingSpacing + prefix) + signature</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    <span class="built_in">console</span>.log(getColorMethod(argv.ps)(data.content));</span><br><span class="line">    <span class="built_in">console</span>.log(signature);</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2019/09/07/10分钟开发一个npm全局依赖包（下）/2.png" alt="支持修改颜色"></p><p>代码还是在可以控制的行数范围内，上述代码中4~34行，是<code>yargs</code>的处理，也是通用的一种写法，这里面有2个属性比较特殊一个是<code>help</code>另一个是<code>version</code>，从下面的结果我们可以看到，当输入这两个的时候都会阻止代码的执行，并直接返回相应的信息，如运行<code>node index -h</code>会返回帮助信息、<code>node index -v</code>会返回版本信息。在代码中我们可以使用<code>argv.ps</code>、<code>argv.as</code>、<code>argv.os</code>等（其实就是option函数的第一个值）来获取参数的值。<code>getColorMethod</code>运行使用英文的点或者逗号来拆分以添加多个样式。</p><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><p>上述代码中<code>getColorMethod</code>方法其实可以抽取出去，另外<code>color</code>库并不是支持输入任何参数，比如你输入<code>node index --as=123</code>就会报错，因为123并不是<code>color</code>所支持的样式，所以我们有必要对颜色相关的操作抽取成一个文件，另外检测一下<code>color</code>库是否支持这个颜色，不支持的话给出有好地提示，现在新建<code>color-util.js</code>文件。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> color = <span class="built_in">require</span>(<span class="string">'colors-cli/safe'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> COLOR_TITLE = [<span class="string">'样式'</span>,<span class="string">'前景色'</span>,<span class="string">'背景色'</span>,<span class="string">'前景色（明亮）'</span>,<span class="string">'背景色（明亮）'</span>];</span><br><span class="line"><span class="keyword">const</span> COLOR_STYLE = [<span class="string">'bold'</span>, <span class="string">'faint'</span>, <span class="string">'italic'</span>, <span class="string">'underline'</span>, <span class="string">'blink'</span>, <span class="string">'overline'</span>, <span class="string">'inverse'</span>, <span class="string">'conceal'</span>, <span class="string">'strike'</span>];</span><br><span class="line"><span class="keyword">const</span> COLOR_FOREGROUND = [<span class="string">'black'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'yellow'</span>, <span class="string">'blue'</span>, <span class="string">'magenta'</span>, <span class="string">'cyan'</span>, <span class="string">'white'</span>];</span><br><span class="line"><span class="keyword">const</span> COLOR_BACKGROUND = [<span class="string">'black_b'</span>, <span class="string">'red_b'</span>, <span class="string">'green_b'</span>, <span class="string">'yellow_b'</span>, <span class="string">'blue_b'</span>, <span class="string">'magenta_b'</span>, <span class="string">'cyan_b'</span>, <span class="string">'white_b'</span>];</span><br><span class="line"><span class="keyword">const</span> COLOR_FOREGROUND_BRIGHT = [<span class="string">'black_bt'</span>, <span class="string">'red_bt'</span>, <span class="string">'green_bt'</span>, <span class="string">'yellow_bt'</span>, <span class="string">'blue_bt'</span>, <span class="string">'magenta_bt'</span>, <span class="string">'cyan_bt'</span>, <span class="string">'white_bt'</span>];</span><br><span class="line"><span class="keyword">const</span> COLOR_BACKGROUND_BRIGHT = [<span class="string">'black_bbt'</span>, <span class="string">'red_bbt'</span>, <span class="string">'green_bbt'</span>, <span class="string">'yellow_bbt'</span>, <span class="string">'blue_bbt'</span>, <span class="string">'magenta_bbt'</span>, <span class="string">'cyan_bbt'</span>, <span class="string">'white_bbt'</span>];</span><br><span class="line"><span class="keyword">const</span> STYLE = [ COLOR_STYLE, COLOR_FOREGROUND, COLOR_BACKGROUND, COLOR_FOREGROUND_BRIGHT, COLOR_BACKGROUND_BRIGHT];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printSupportStyle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'所支持的样式有：\n'</span>);</span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; COLOR_TITLE.length; i++) &#123;</span><br><span class="line">    message = STYLE[i].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">pre,next</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> pre + color[next](next) + <span class="string">' '</span></span><br><span class="line">    &#125;, COLOR_TITLE[i] + <span class="string">"： "</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 换行</span></span><br><span class="line">  <span class="built_in">console</span>.log();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStyle</span>(<span class="params">styleName</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> STYLE.join(<span class="string">','</span>).split(<span class="string">','</span>).indexOf(styleName) !== <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColorMethod</span>(<span class="params">commandStr = <span class="string">''</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> command = commandStr.replace(<span class="regexp">/\,/g</span>,<span class="string">'.'</span>).split(<span class="string">"."</span>);</span><br><span class="line">  <span class="keyword">let</span> colorMethod = color</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; command.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (checkStyle(command[i])) &#123;</span><br><span class="line">      colorMethod = colorMethod[command[i]];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'\n不支持的样式：'</span> + command[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> colorMethod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  color,</span><br><span class="line">  printSupportStyle,</span><br><span class="line">  checkStyle,</span><br><span class="line">  getColorMethod</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求接口的地方我们也可以封装成一个方法，这样可以减少耦合，另外也可以支持模块直接引入（直接使用require引入）。新建<code>random-poem.js</code>文件，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    axios.get(<span class="string">'https://api.gushi.ci/all.json'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">      resolve(response.data || &#123;&#125;)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>)</span>&#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为网络请求是异步的，所以需要使用回调或者<code>Promise</code>来处理，我们这里就使用<code>Promise</code>吧。此时还需要修改一下<code>package.json</code>文件，添加<code>main</code>字段，该字段是用来告诉直接模块引入的时候引入哪个文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"poem-cli"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"命令行随机打印一句诗词。"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"random-poem.js"</span>,</span><br><span class="line">  <span class="attr">"bin"</span>: &#123;</span><br><span class="line">    <span class="attr">"poem-cli"</span>: <span class="string">"index.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node index"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"诗词"</span>,</span><br><span class="line">    <span class="string">"命令行"</span>,</span><br><span class="line">    <span class="string">"有趣"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Orange"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"axios"</span>: <span class="string">"^0.19.0"</span>,</span><br><span class="line">    <span class="attr">"colors-cli"</span>: <span class="string">"^1.0.26"</span>,</span><br><span class="line">    <span class="attr">"yargs"</span>: <span class="string">"^14.0.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时需要注意第5行代码。最后修改<code>index.js</code>文件，使用这些封装的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> colorUtil = <span class="built_in">require</span>(<span class="string">'./color-util'</span>)</span><br><span class="line"><span class="keyword">const</span> randomPoem = <span class="built_in">require</span>(<span class="string">'./random-poem'</span>)</span><br><span class="line"><span class="keyword">let</span> argv = <span class="built_in">require</span>(<span class="string">'yargs'</span>)</span><br><span class="line">    .option(<span class="string">'s'</span>, &#123;</span><br><span class="line">      alias: <span class="string">'style'</span>,</span><br><span class="line">      demand: <span class="literal">false</span>,</span><br><span class="line">      boolean: <span class="literal">true</span>,</span><br><span class="line">      describe: <span class="string">'显示所支持的样式'</span>,</span><br><span class="line">    &#125;).option(<span class="string">'ps'</span>, &#123;</span><br><span class="line">        alias: <span class="string">'poem-style'</span>,</span><br><span class="line">        demand: <span class="literal">false</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'blue_bt'</span>,</span><br><span class="line">        describe: <span class="string">'诗词样式，如--ps=blue_bt'</span>,</span><br><span class="line">        type: <span class="string">'string'</span></span><br><span class="line">    &#125;).option(<span class="string">'as'</span>, &#123;</span><br><span class="line">        alias: <span class="string">'author-style'</span>,</span><br><span class="line">        demand: <span class="literal">false</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'green_bt'</span>,</span><br><span class="line">        describe: <span class="string">'作者样式，如--as=green_bt'</span>,</span><br><span class="line">        type: <span class="string">'string'</span></span><br><span class="line">    &#125;).option(<span class="string">'os'</span>, &#123;</span><br><span class="line">      alias: <span class="string">'origin-style'</span>,</span><br><span class="line">      demand: <span class="literal">false</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'cyan'</span>,</span><br><span class="line">      describe: <span class="string">'来源颜色，如--os=cyan'</span>,</span><br><span class="line">      type: <span class="string">'string'</span></span><br><span class="line">    &#125;).option(<span class="string">'h'</span>, &#123;</span><br><span class="line">      alias: <span class="string">'help'</span>,</span><br><span class="line">      demand: <span class="literal">false</span>,</span><br><span class="line">      boolean: <span class="literal">true</span>,</span><br><span class="line">      describe: <span class="string">'帮助'</span>,</span><br><span class="line">    &#125;).option(<span class="string">'v'</span>, &#123;</span><br><span class="line">      alias: <span class="string">'version'</span>,</span><br><span class="line">      demand: <span class="literal">false</span>,</span><br><span class="line">      boolean: <span class="literal">true</span>,</span><br><span class="line">      describe: <span class="string">'版本号'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .argv;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示所支持的样式</span></span><br><span class="line"><span class="keyword">if</span> (!!argv.s) &#123;</span><br><span class="line">  colorUtil.printSupportStyle();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  randomPoem().then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> signature = data.author + <span class="string">'《'</span> + data.origin + <span class="string">'》'</span>;</span><br><span class="line">    <span class="keyword">let</span> prefix =  <span class="string">'———— '</span>;</span><br><span class="line">    <span class="keyword">let</span> paddingSpacing = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> spacingLength = data.content.length * <span class="number">2</span> - signature.length * <span class="number">2</span> - prefix.length;</span><br><span class="line">    <span class="keyword">if</span> (spacingLength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.origin.indexOf(<span class="string">'·'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">        spacingLength++;</span><br><span class="line">      &#125;</span><br><span class="line">      paddingSpacing = <span class="keyword">new</span> <span class="built_in">Array</span>(spacingLength).fill(<span class="string">' '</span>).join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 添加颜色</span></span><br><span class="line">      signature = colorUtil.getColorMethod(argv.as)(data.author) + <span class="string">'《'</span> + colorUtil.getColorMethod(argv.os)(data.origin) + <span class="string">'》'</span>;</span><br><span class="line">      signature = (paddingSpacing + prefix) + signature</span><br><span class="line">      <span class="built_in">console</span>.log();</span><br><span class="line">      <span class="built_in">console</span>.log(colorUtil.getColorMethod(argv.ps)(data.content));</span><br><span class="line">      <span class="built_in">console</span>.log(signature);</span><br><span class="line">      <span class="built_in">console</span>.log();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// 错误处理</span></span><br><span class="line">      <span class="built_in">console</span>.log(colorUtil.color.red(error.message));</span><br><span class="line">      colorUtil.printSupportStyle();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下输入不支持的情况，你会发现提示的信息已经很友好了：</p><p><img src="/2019/09/07/10分钟开发一个npm全局依赖包（下）/3.png" alt="完整版"></p><p>最后把多余的<code>test-color.js</code>文件删除了就可以提交了。</p><p>就这样我们把一个功能完善的古诗词命令行工具做完了，需要注意一点再次提交的时候，也就是运行<code>npm publish</code>前，需要修改一下<code>package.json</code>中的<code>version</code>字段，而且必须大于当前的版本号，建议使用<code>npm version 1.0.1</code>这样的命令去修改，因为该命令会顺带把<code>package-lock.json</code>文件中的版本号也改了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;a href=&quot;https://kai666666.top/2019/09/06/10分钟开发一个npm全局依赖包（上）/#more&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;上一篇&lt;/a&gt;中我们用了10分钟实现了一个完整的古诗词命令行工具，本章中
      
    
    </summary>
    
    
      <category term="Node" scheme="https://www.kai666666.top/categories/Node/"/>
    
    
      <category term="Node" scheme="https://www.kai666666.top/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>10分钟开发一个npm全局依赖包（上）</title>
    <link href="https://www.kai666666.top/2019/09/06/10%E5%88%86%E9%92%9F%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAnpm%E5%85%A8%E5%B1%80%E4%BE%9D%E8%B5%96%E5%8C%85%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://www.kai666666.top/2019/09/06/10%E5%88%86%E9%92%9F%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAnpm%E5%85%A8%E5%B1%80%E4%BE%9D%E8%B5%96%E5%8C%85%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2019-09-06T11:41:44.000Z</published>
    <updated>2019-09-07T05:42:29.319Z</updated>
    
    <content type="html"><![CDATA[<p>今天在逛网页的时候看到了一个<a href="https://gushi.ci/" target="_blank" rel="noopener">古诗词的API</a>，然后突发奇想，用了10分钟的时间做了一款npm全局依赖包。你可以使用<code>npm install -g pome-cli</code>来先玩一玩。有好东西当然要跟大家分享一下啦，现在从0开始给大家简绍打造这款全局依赖包。</p><hr><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>首先创建一个文件夹，比如<code>poem-cli</code>（这里以<code>poem-cli</code>来讲，在你开发的时候换一个名字，因为这个名字已经被我注册了），然后进入该文件夹，命令行输入<code>npm init</code>，里面的选项根据自己的喜好来设置就可以了，默认的话回车就行。等命令行输完以后，会在该目录下自动创建一个<code>package.json</code>文件，这个文件大家一定不陌生吧。</p><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>由于我们的数据是走网络请求的，<a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a>是一个可以在浏览器环境和Node环境同时运行的一个HTTP框架。我们这里也引入这个库来简化我们的发送请求过程，命令行输入<code>npm install axios</code>。新建一个<code>index.js</code>文件写入请求的代码，由于我们目前对API的结构不太了解，就直接打印出返回的数据就行了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'https://api.gushi.ci/all.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data || &#123;&#125;)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>在命令行输入<code>node index</code>来运行一下上面的代码，可以看到打印的结果如下，当然具体的内容可能有点不太一样：</p><p><img src="/2019/09/06/10分钟开发一个npm全局依赖包（上）/1.png" alt="首次运行"></p><p>我们可以看到返回的数据是一个JSON对象，那么我们就好处理了，只要稍微修改一下代码，让显示的更好看一点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'https://api.gushi.ci/all.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = response.data || &#123;&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(data.content);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"———— "</span> + data.author + <span class="string">"《"</span> + data.origin + <span class="string">"》"</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>此时的效果如下：</p><p><img src="/2019/09/06/10分钟开发一个npm全局依赖包（上）/2.png" alt="处理后的效果"></p><p>当然我们经常看到的诗句，署名往往是右对齐的，我们这里也稍微处理一下对于没有诗句长的署名，让署名右对齐。要想右对齐其实很简单就是左边加空格填充呗：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'https://api.gushi.ci/all.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = response.data || &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> signature = data.author + <span class="string">'《'</span> + data.origin + <span class="string">'》'</span>;</span><br><span class="line">    <span class="keyword">let</span> prefix =  <span class="string">'———— '</span>;</span><br><span class="line">    <span class="keyword">let</span> paddingSpacing = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> spacingLength = data.content.length * <span class="number">2</span> - signature.length * <span class="number">2</span> - prefix.length;</span><br><span class="line">    <span class="keyword">if</span> (spacingLength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.origin.indexOf(<span class="string">'·'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">        spacingLength++;</span><br><span class="line">      &#125;</span><br><span class="line">      paddingSpacing = <span class="keyword">new</span> <span class="built_in">Array</span>(spacingLength).fill(<span class="string">' '</span>).join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    signature = (paddingSpacing + prefix) + signature</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    <span class="built_in">console</span>.log(data.content);</span><br><span class="line">    <span class="built_in">console</span>.log(signature);</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>现在代码已经很多了，代码第6行和第7行我们把署名和横线拆分成2个变量，因为一个汉字相当于2个空格而一个横线是一个字符，上面的<code>prefix</code>中其实是4个短横线和一个空格组成的。然后在代码的第9行我们计算了一下需要填充的空格数量，也就是诗句乘以2然后减去署名乘以2再减去横线（诗句和署名都是汉字或者汉字的标点符号占了2个空格），还有一种特殊情况是，有些署名中有符号的点（·），如<code>李商隐《无题·昨夜星辰昨夜风》</code>中的点，这个点占据了一个字符，我们要对这个点做特殊处理，特殊处理见第11到第13行代码，最后14行代码把空格也加上。后面打印的时候多了2个<code>console.log();</code>是为了换行，当然是用<code>\n</code>来换行也是可以的。需要说明的是我们这里使用字符串的拼接来做的，当然也可以使用ES6的模板字符串。最后看一下结果：</p><p><img src="/2019/09/06/10分钟开发一个npm全局依赖包（上）/3.png" alt="对齐处理"></p><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p>现在我们的代码基本上写的差不多了，然后试着按照全局包来处理。首先修改<code>package.json</code>文件，添加<code>bin</code>字段，<code>bin</code>字段的作用是告诉环境执行命令的时候执行哪个文件。如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"poem-cli"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"命令行随机打印一句诗词。"</span>,</span><br><span class="line">  <span class="attr">"bin"</span>: &#123;</span><br><span class="line">    <span class="attr">"poem-cli"</span>: <span class="string">"index.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node index"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"诗词"</span>,</span><br><span class="line">    <span class="string">"命令行"</span>,</span><br><span class="line">    <span class="string">"有趣"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Orange"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"axios"</span>: <span class="string">"^0.19.0"</span>,</span><br><span class="line">    <span class="attr">"colors-cli"</span>: <span class="string">"^1.0.26"</span>,</span><br><span class="line">    <span class="attr">"yargs"</span>: <span class="string">"^14.0.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述第5到7行可是重点哦，写了<code>bin</code>以后在<code>bin</code>的入口文件（也就是<code>index.js</code>文件）的最上方还要加一行代码，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 其他代码同上的index.js</span></span><br></pre></td></tr></table></figure><p><code>#!/usr/bin/env node</code>看着和注释很像，到底有什么作用呢？其实它声明了脚本文件的解释程序，脚本文件有很多，我们要运行这个<code>index.js</code>，就得告诉系统你是要用什么来执行我们的脚本，这里当然是使用node了。</p><p>把这两个地方修改后，我们基本上可以使用了，先测试一下看可以用不。使用<code>npm link</code>命令，它的作用是把当前文件夹拷贝到node全局包的安装环境下，当拷贝过去以后你就可以把他当成一个全局包使用了，拷贝完后直接使用<code>poem-cli</code>来运行脚本就可以了。</p><p><img src="/2019/09/06/10分钟开发一个npm全局依赖包（上）/4.png" alt="使用npm link"></p><h2 id="发布到npm仓库上"><a href="#发布到npm仓库上" class="headerlink" title="发布到npm仓库上"></a>发布到npm仓库上</h2><p><code>npm link</code>命令是把本地的文件夹放在全局目录下，但是为了更多的小伙伴使用我们的包，就需要把该包放在npm仓库中。首先需要去<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm官网</a>注册自己的账号，已有账号忽略这一步。此外由于国内一般使用的是淘宝的镜像，如果你使用的也是淘宝的或者其他的镜像，这里<strong>必须</strong>要切回到npm的镜像，强烈建议使用nrm来管理镜像源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nrm</span></span><br><span class="line">npm install -g nrm</span><br><span class="line"><span class="comment"># 切回到npm镜像源</span></span><br><span class="line">nrm use npm</span><br></pre></td></tr></table></figure><p>在提交的时候，往往有些东西是不希望提交的，那么可以新建一个<code>.npmignore</code>文件，作用类似于<code>.gitignore</code>，只是这个是提交npm仓库的时候忽略的，这里我们在该文件的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node_modules/</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">.gitignore</span><br><span class="line">.git</span><br></pre></td></tr></table></figure><p>当这个时候你只需要登录npm并且发布就好了，如果已经登录了就可以直接发布了（可以使用命令<code>npm whoami</code>来查看自己的登录信息，再次强调<strong>一定要切到npm镜像源</strong>）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录npm 需要数据用户名 密码 邮箱等</span></span><br><span class="line">npm login</span><br><span class="line"><span class="comment"># 发布</span></span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>发布的速度还是挺快的，当你发布完成以后就可以使用<code>npm install -g poem-cli</code>来安装全局包了，当然这个名字已经被我注册了，你需要换一个名字。最后使用<code>poem-cli</code>来运行就可以了，大功告成。此时你可以使用命令<code>nrm use taobao</code>切换到淘宝镜像了，往往淘宝镜像会在5分钟内从npm获取一下新的包，所以你切到淘宝的镜像，5分钟后也可以安装（其实一般情况下根本不到5分钟）。</p><p>十分钟的时间差不多到了，我们的全局依赖包已经做完了，是不是收获还不错，下一节我们再利用20分钟，让我们的全局安装包做的更好一点，同时也简绍命令行工具常用的2个工具库。可以点击<a href="https://www.kai666666.top/2019/09/07/10分钟开发一个npm全局依赖包（下）/#more">这里</a>进入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在逛网页的时候看到了一个&lt;a href=&quot;https://gushi.ci/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;古诗词的API&lt;/a&gt;，然后突发奇想，用了10分钟的时间做了一款npm全局依赖包。你可以使用&lt;code&gt;npm install 
      
    
    </summary>
    
    
      <category term="Node" scheme="https://www.kai666666.top/categories/Node/"/>
    
    
      <category term="Node" scheme="https://www.kai666666.top/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>快应用初探--把个人博客封装成快应用</title>
    <link href="https://www.kai666666.top/2019/08/25/%E5%BF%AB%E5%BA%94%E7%94%A8%E5%88%9D%E6%8E%A2-%E6%8A%8A%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B0%81%E8%A3%85%E6%88%90%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    <id>https://www.kai666666.top/2019/08/25/%E5%BF%AB%E5%BA%94%E7%94%A8%E5%88%9D%E6%8E%A2-%E6%8A%8A%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B0%81%E8%A3%85%E6%88%90%E5%BF%AB%E5%BA%94%E7%94%A8/</id>
    <published>2019-08-25T06:53:59.000Z</published>
    <updated>2019-10-29T10:15:16.670Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司在做快应用的需求，经过2周的努力，<code>淘粉吧快应用</code>已经上线了，现在借此机会跟大家聊聊快应用。</p><hr><h3 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h3><p>自从Java语言创立以后，一场跨平台软件的革命拉开了序幕，从此一份代码可以在不同的操作系统上运行了。近两年小程序更是把跨平台的应用推上了一个新的高度，<code>用完即走,不做停留</code>的理念更是深入人心。随着宽带的普及，移动流量费用的降低，现在的应用越来越快，同时越来越轻。就在这样的大环境下，国内手机厂商们不想微信一家独大，于是也搞了一个<code>用完即走,不做停留</code>的软件平台，这就是<code>快应用</code>。由于快应用比微信更加底层，所以理论上，快应用要更快，同时体验要更好；另一方便，快应用可以做像负一屏等小程序无法做的操作。更多快应用相关的内容可以直接去它的<a href="https://www.quickapp.cn/" target="_blank" rel="noopener">官网</a>查看。</p><h3 id="体验快应用"><a href="#体验快应用" class="headerlink" title="体验快应用"></a>体验快应用</h3><p>由于快应用是国内手机厂商们来支持的，所以快应用只<strong>支持安卓不支持iPhone</strong>，当然也不是所有的安卓机都支持，这里有一份<a href="https://doc.quickapp.cn/changelog/ecology.html" target="_blank" rel="noopener">生态数据</a>可以看看。虽然并不支持所有的机型，但是国产手机的用户也是一个很庞大的数字，所以有实力的公司研究一下快应用还是有些必要的。<br>那么用户怎么使用快应用呢？有没有什么例子？像我使用的是小米手机，小米手机是支持快应用的，在应用市场搜索<code>淘票票</code>，可以看到有一个秒开，这个秒开就是打开淘票票快应用，你可以先去体验一下。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/1.jpeg" alt="淘票票快应用"></p><h3 id="快应用环境搭建"><a href="#快应用环境搭建" class="headerlink" title="快应用环境搭建"></a>快应用环境搭建</h3><p>好了，说了这么多了，我们可以试着开发一个快应用了。在开发之前先搭建一下快应用的环境吧。<br>快应用的环境跟大多数前端应用一样也是基于<code>nodeJS</code>来启动的，<code>node</code>的安装这里就不说了，这里假设你已经安装<code>node</code>了。<br>首先需要下载3个东西，第一个就是快应用的开发工具，下载地址请点<a href="https://www.quickapp.cn/docCenter/post/95" target="_blank" rel="noopener">这里</a>，其实这个工具就是封装自<code>VSCode</code>，如果你一直用的是<code>VSCode</code>来做的开发，那么该开发工具应该很适合你。接下来要安装的是调试器和预览版，这两个都是用来调试用的，需要安装到你的安卓手机上，需要注意的是预览版可以下载不同的版本，最好下载你支持的最低版本，最后请点击这里<a href="https://www.quickapp.cn/docCenter/post/69" target="_blank" rel="noopener">下载</a>。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/2.png" alt="调试器和预览版"></p><p>通过上面的步骤基本软件已经安装了，然后我们来创建一个项目。首先来安装全局的命令行工具：</p><blockquote><p>npm install -g hap-toolkit</p></blockquote><p>这个只需要安装一次。然后我们初始化一个项目，项目名根据自己喜欢就可以了，比如这里我们叫做<code>blog-quickapp</code>，那么运行命令：</p><blockquote><p>hap init blog-quickapp</p></blockquote><p>项目生成好了以后我们用刚才下载的编辑器打开，点击<code>文件结构-&gt;打开文件夹</code>，也可以把刚才创建的文件夹拖进来。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/3.png" alt="打开项目"></p><p>然后在终端下输入<code>npm install</code> 这一步对于前端工程师来说一定不陌生。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/4.png" alt="安装项目"></p><p>稍等片刻，安装完成后再输入命令<code>npm run server</code>，同时再开一个终端，输入另一个命令<code>npm run watch</code>，其中前一个命令是启动服务的，第二个命令是启动实时编译的。重新开一个终端如下：</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/5.png" alt="启动实时编译"></p><p>然后打开<code>http://你的IP:8000</code>，如果看到一个二维码，说明项目已经起来了，点击底部的<code>打开 web 预览</code>开始查看网页预览版，也可以打开手机上刚才安装的<code>快应用调试器</code>，然后运行平台选择刚才安装的快应用预览版就可以了，最后点击<code>扫码安装</code>，扫这个二维码就可以了，需要注意的是手机和电脑必须要连人同一个WIFI。</p><h3 id="快应用与普通web应用的不同"><a href="#快应用与普通web应用的不同" class="headerlink" title="快应用与普通web应用的不同"></a>快应用与普通web应用的不同</h3><p>快应用和普通的web应用还是有很大的不同的，快应用采用前端的这套开发机制，但是又做了很多的限制，比如他强烈希望你使用flex布局，为此它把浮动和定位全部禁用了，如果你使用浮动和定位就会出现错误（而不是警告）。浮动的功能基本上flex可以代替，那么定位呢？他自己创建了一个<a href="https://doc.quickapp.cn/widgets/stack.html" target="_blank" rel="noopener">stack组件</a>来处理定位的问题。他的框架和<code>vue</code>或小程序非常类似，有<code>vue</code>或小程序开发经验的同学可以很快适应他的写法（可以看看<code>/src/Demo/index.ux</code>中的代码）。快应用对CSS的限制是非常大的，就比如颜色的继承它是不支持的，需要写在具体的标签上；div里面直接写文字，抱歉，也不行！你需要用text或span等标签包一层。这些限制刚开始你可能不太适应，或许开发的时候感觉有点痛苦，明明代码是对的，但是却不行，这时你就得多看看他在<code>npm run watch</code>命令下输出日志了。</p><p>我们可以看一下例子中的代码，在<code>/src/Demo/index.ux</code>文件中写了一个input标签，但是在真正运行时，代码中多了一个<code>style</code>，<code>style</code>属性的内容就是快应用框架把默认样式和自定义样式处理整合后的结果。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/6.png" alt="模板代码"></p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/7.png" alt="样式代码"></p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/8.png" alt="样式整合后的代码"></p><p>所以如果该标签没有写颜色等信息的时候就不会有了，这也是为什么颜色不能被继承的原因。另外快应用不支持CSS的<code>且选择器</code>，也就是<code>.class.class2{...}</code>。我们经常用不同的类选择器去覆盖正常的样式，就比如a标签正常的样式是<code>a-link</code>的颜色，假设它是绿色的，然后当点击以后class属性是<code>a-link active</code>，其中<code>active</code>表明颜色是红色的，如果<code>active</code>样式是且选择器的话（<code>.a-link.active{...}</code>），在快应用中就是不行的，通常需要写成2个样式（<code>.a-link{...}</code>和<code>.active{...}</code>）。</p><h3 id="封装博客成快应用"><a href="#封装博客成快应用" class="headerlink" title="封装博客成快应用"></a>封装博客成快应用</h3><p>快应用有自己的组件和自己的一些接口，可以使用这些组件来写页面。由于开发者往往都有自己的博客，一般使用<code>Github Pages</code>服务来做的，既然已经有博客了，那么博客页面就没必要开发了，直接使用web组件（类似于安卓中的webview）来加载页面就可以了。我们在src下建立一个文件夹叫<code>Webview</code>，然后再在该文件夹下新建一个<code>index.ux</code>，这时开始写自己的代码了，大概如下，你需要替换<code>protected</code>下的<code>url</code>为你自己的地址。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">web</span> <span class="attr">id</span>=<span class="string">"web"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">src</span>=<span class="string">"&#123;&#123;url&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">web</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@system.router'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> prompt <span class="keyword">from</span> <span class="string">'@system.prompt'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">private</span>: &#123;</span></span><br><span class="line"><span class="actionscript">    backTime: <span class="literal">null</span>,</span></span><br><span class="line"><span class="undefined">    maxBackTime: 1800</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">protected</span>: &#123;</span></span><br><span class="line"><span class="actionscript">    url: <span class="string">'https://www.kai666666.top'</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  onMenuPress() &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.$app.$def.showMenu()</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  onBackPress() &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.$element(<span class="string">'web'</span>).canBack(&#123;</span></span><br><span class="line"><span class="actionscript">      callback: <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (e) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 加载历史列表中的上一个 URL</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$element(<span class="string">'web'</span>).back()</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">if</span> (router.getLength() === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> currentTime = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (!<span class="keyword">this</span>.backTime || currentTime - <span class="keyword">this</span>.backTime &gt; <span class="keyword">this</span>.maxBackTime) &#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.backTime = currentTime</span></span><br><span class="line"><span class="undefined">              prompt.showToast(&#123;</span></span><br><span class="line"><span class="actionscript">                message: <span class="string">'再按一次退出程序'</span></span></span><br><span class="line"><span class="undefined">              &#125;)</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">return</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">          router.back()</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">      &#125;.bind(<span class="keyword">this</span>)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 阻止默认行为，等待异步操作</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>protected</code>下的字段是从url中传入的；<code>private</code>中的字段就是组件内部的字段，类似与vue中的data。<code>onBackPress</code>函数是当返回键按下以后的回调，返回true可以阻止默认行为，这里的作用是如果页面中可以返回的话直接使用页面级别的返回，否则使用应用级的返回，如果是最外层的页面那么连续2次返回才能退出程序。</p><p>最后新增加的页面需要在清单文件<code>/src/manifest.json</code>中声明一下，这里我把其他的页面删除了，此时清单文件如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"package"</span>: <span class="string">"top.kai666666.blog"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"橙光笔记"</span>,</span><br><span class="line">  <span class="attr">"versionName"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"versionCode"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"minPlatformVersion"</span>: <span class="string">"1020"</span>,</span><br><span class="line">  <span class="attr">"icon"</span>: <span class="string">"/Common/logo.png"</span>,</span><br><span class="line">  <span class="attr">"features"</span>: [&#123; <span class="attr">"name"</span>: <span class="string">"system.prompt"</span> &#125;, &#123; <span class="attr">"name"</span>: <span class="string">"system.router"</span> &#125;, &#123; <span class="attr">"name"</span>: <span class="string">"system.shortcut"</span> &#125;],</span><br><span class="line">  <span class="attr">"permissions"</span>: [&#123; <span class="attr">"origin"</span>: <span class="string">"*"</span> &#125;],</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"logLevel"</span>: <span class="string">"off"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"router"</span>: &#123;</span><br><span class="line">    <span class="attr">"entry"</span>: <span class="string">"Webview"</span>,</span><br><span class="line">    <span class="attr">"pages"</span>: &#123;</span><br><span class="line">      <span class="attr">"Webview"</span>: &#123;</span><br><span class="line">        <span class="attr">"component"</span>: <span class="string">"index"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"About"</span>: &#123;</span><br><span class="line">        <span class="attr">"component"</span>: <span class="string">"index"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"display"</span>: &#123;</span><br><span class="line">    <span class="attr">"titleBarBackgroundColor"</span>: <span class="string">"#f2f2f2"</span>,</span><br><span class="line">    <span class="attr">"titleBarTextColor"</span>: <span class="string">"#414141"</span>,</span><br><span class="line">    <span class="attr">"menu"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"pages"</span>: &#123;</span><br><span class="line">      <span class="attr">"Webview"</span>: &#123;</span><br><span class="line">        <span class="attr">"titleBarText"</span>: <span class="string">"橙光笔记"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"About"</span>: &#123;</span><br><span class="line">        <span class="attr">"menu"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的最后把<code>/src/Common/logo.png</code>下的图片换成我们的，然后生成一个桌面图标，最后出来的效果如下，简直和原生APP一模一样。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/9.gif" alt="完整版"></p><p>快应用版本的博客就做好了，当然你可以利用快应用的能力来新增更多的功能，也可以做自己喜欢的快应用。最后提交到应用市场上，让更多小伙伴访问。提交到应用市场无非就2步，一步就是<a href="https://www.quickapp.cn/docCenter/post/71" target="_blank" rel="noopener">注册</a>，另一步就是<a href="https://www.quickapp.cn/docCenter/post/72" target="_blank" rel="noopener">上传自己的快应用</a>。</p><blockquote><p>PS：通过亲测，发现单纯的用web标签包一层外部web页面是很难通过审核的。好在有像<a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="noopener">hexo-generator-json-content</a>这样的库，可以帮助生成一个关于博客信息的JSON对象，这样就可以包装一下我们的快应用，使得前几个页面不是单纯的外部web页面就可以了。通过几次尝试以后发现，只要<strong>前2级页面</strong>没有使用外部页面就可以通过的。现在本博客的快应用已经上线，如果你使用的是安卓手机，那么用原生的浏览器打开现在这个页面，就可能（具体还得看手机厂商和型号）会唤起本博客的快应用。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近公司在做快应用的需求，经过2周的努力，&lt;code&gt;淘粉吧快应用&lt;/code&gt;已经上线了，现在借此机会跟大家聊聊快应用。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;杂谈&quot;&gt;&lt;a href=&quot;#杂谈&quot; class=&quot;headerlink&quot; title=&quot;杂谈&quot;&gt;&lt;/a&gt;杂谈&lt;/h3
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.kai666666.top/categories/JavaScript/"/>
    
    
      <category term="前端技术" scheme="https://www.kai666666.top/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>跑步提速指南</title>
    <link href="https://www.kai666666.top/2019/08/10/%E8%B7%91%E6%AD%A5%E6%8F%90%E9%80%9F%E6%8C%87%E5%8D%97/"/>
    <id>https://www.kai666666.top/2019/08/10/%E8%B7%91%E6%AD%A5%E6%8F%90%E9%80%9F%E6%8C%87%E5%8D%97/</id>
    <published>2019-08-10T04:19:25.000Z</published>
    <updated>2019-09-30T02:40:48.848Z</updated>
    
    <content type="html"><![CDATA[<p>现在已经立秋了，天气渐渐转凉，马拉松赛事也逐渐开始报名了。随着全民健身的理念深入人心，越来越多的人开始跑步了，马拉松赛事也越来越火了。杭州马拉松报名首日就有82221名童鞋报名了，而本届马拉松参赛总人数为36000名，仅仅首日就远超这个数字。与杭州马拉松不同的是宁波马拉松采取先到先得的赛制（先报名的就可以参加，报名慢了就不可以报名了，这种赛制不需要抽签来决定是否参加），8月5日上午9时宁波马拉松开始报名，仅仅一个半小时后的10点35分，半程马拉松的名额就被抢完了；全程马拉松于11点30分也告罄了。由此可见马拉松现在变成一个非常火爆的运动，越来越多的人将在马拉松的赛场上突破自己，创造新的PB（个人最佳）。</p><p>最近我也在看一本名叫《跑步圣经2——针对速度的跑步训练计划》的跑步书籍，刚好可以更大家分享一下我所积累的跑步经验。同时希望我们程序猿可以在跑步上突破自己，同时拥有一个更好的身体。</p><p><img src="/2019/08/10/跑步提速指南/1.jpeg" alt="《跑步圣经2——针对速度的跑步训练计划》"></p><hr><h3 id="姿势篇"><a href="#姿势篇" class="headerlink" title="姿势篇"></a>姿势篇</h3><p>正确的跑步姿势：</p><blockquote><p>自己有种将要摔倒的感觉，不得不通过腿的快速移动来避免摔倒。头部静止不动，径直向前看。手臂应当有被往后拉的感觉——通过肩膀向后拉手臂，肩膀应当时刻保持放松。通过弯曲膝盖、抬高脚后跟使身体前倾，这样你的腿几乎能像自行车运动员一样移动。双脚应当轻轻地着地，快而轻地移动。</p></blockquote><p>我们来分析一下：</p><ol><li>要有快要摔倒的感觉，这就必须使身体向前倾，然后让重力使你向前跑，没错让重力推向你前进。著名的<code>姿势跑步法</code>最核心的理念就是这。</li><li>头部要向前看，不要低头与抬头，保持颈部自然，这样呼吸起来也顺畅，保持良好的呼吸。</li><li>手臂应该前后运动，而不是左右运动，减少左右方向的能量消耗。</li><li>膝盖保持弯曲，保持中心尽可能的靠近肚脐所在垂直位置，不要向前踢脚。</li><li>落地要轻盈，跑步高手往往都是轻盈地在跑步，不要发出砰砰砰的声音。同时你需要脚前掌先着地，这样具有缓冲的作用，同时可以跑得更快，还可以降低运动损伤。</li><li>快速地移动，需要提高步频，降低步幅，所以不要迈大步，保持小而快的步频。迈大步一方面会产生刹车效应，长时间迈大步对损伤自己的身体，另一方面迈大步会使得速度下降。</li></ol><h3 id="技巧篇"><a href="#技巧篇" class="headerlink" title="技巧篇"></a>技巧篇</h3><p>如何突破自己的里程？</p><blockquote><p>好多同学刚开始的时候可能只能跑2公里，甚至1公里。那么如果可以突破自己的里程呢？最简单的办法就是跑慢一点，没错只要跑慢一点，突破5公里是没问题的。</p></blockquote><p>如何跑的更快？</p><blockquote><p>当你可以达到某个里程的时候，你就可以试试是否可以跑得更快，跑的更快意味着你需要突破自己。在平时的训练中需要不断提高步频，快速跑向前去，没错就是很累的那种，同样的要保持呼吸的顺畅，最好四步一呼四步一吸。那如果跑的快了呼吸上不来怎么办？你可以短暂的休息一下（这里说的休息不是躺下来休息，往往跑完步心率会很快，直接休息对身体不好，更好的办法是用快走代替跑步），<code>法特莱克跑步法</code>是一种不错的选择（下面会讲）。<strong>一定要明白，只有突破自己，才会有提高，一个劲地匀速奔跑很难有所突破</strong>。</p></blockquote><p>快跑是不是非常累？</p><blockquote><p>上面说到训练中快跑是需要你尽全力去跑，那么自然快跑是很累的，但是如果你身体机能上去了，这样的快跑就不会那么累了。就像1个半小时完成半马的和3个小时完成半马的选手相比，你觉得哪个会更累呢？</p></blockquote><p>健身对跑步有影响吗？</p><blockquote><p>有很大的影响。好多童鞋认为跑步只是腿的运动，其实不是，跑步是全身的运动，如果你要有更好的成绩，那么就必须进行全身心的健身。好的选手不仅仅会锻炼腿部力量还会锻炼核心力量，甚至会锻炼手臂力量，整个身体变强壮你将会跑的更快更远。</p></blockquote><h3 id="提升篇"><a href="#提升篇" class="headerlink" title="提升篇"></a>提升篇</h3><p>上面提到法特莱克跑，keep就有法特莱克跑，法特莱克跑的意思是跑一段距离，然后快走或慢跑休息一小会，然后再开始跑，当然在训练中跑的时候最好是全力冲刺，这样有助于提高你的心肺能力，keep上的法特莱克跑是快走和慢跑交替进行的，下面是每段的距离，你也可以按照参照物来跑，比如跑到前面那棵树那边休息地走100米等。</p><p><img src="/2019/08/10/跑步提速指南/2.png" alt="法特莱克跑"></p><p>当然keep上还有更加进阶的法特莱克跑就是下面这四节课程，它是快跑和慢跑结合的法特莱克跑，对心肺的刺激会更强，所以达到一定水平的你可以去试试（不要一上来就去试哦）。<br><img src="/2019/08/10/跑步提速指南/3.jpeg" alt="挑战跑"></p><p>当然除了法特莱克跑还有一种有效的训练方式就是爬坡与下坡跑，这种训练也可以锻炼耐力和心肺能力，同时还可以锻炼脚步肌肉。往往爬坡的时候你需要减小步幅，加快步频（比水平路面上更小的步幅），这样有利于保持体力；在下坡时你需要，放慢步频，稍微加大步幅，虽然一直再强调减小步频但此时是需要放大步频的，因为下坡要远比上坡难，大一点的步频会更省力。</p><h3 id="系统篇"><a href="#系统篇" class="headerlink" title="系统篇"></a>系统篇</h3><p>跑步前需要热身。跑前热身往往是动态性的运动，目的是让身体热起来，心率提升起来，同时使得韧带等稍微拉伸一下。有同学认为跑步本来就是一种热身的运动，不需要再热身了，这是不对的，往往我们跑步来热身都是短距离慢跑，而专门出来跑步的时候，这个距离对你来说还是稍微有点挑战性的，所以提前就得让身体热起来，最重要的是让心率提升上来，直接开跑的话心率会瞬间提升，这样很容易产生岔气等身体问题。</p><p>跑步后要拉伸。拉伸往往是静态性的，其目的是为了提升自己身体的柔韧性（这里的柔韧不是身体变软，而是恢复速度变快并且肌肉有更好的伸缩性）。拉伸的另一个好处是可以降低运动损伤的风险，运动损伤往往是持续性对身体的某个部位产生压力而造成的，拉伸可以使得这些部位得到放松。所以，<strong>再怎么强调拉伸都不为过</strong>。</p><p>如果不知道怎么热身和拉伸的话，可以去keep上试试<code>跑前热身</code>和<code>跑后拉伸</code>课程。</p><h3 id="跑马篇"><a href="#跑马篇" class="headerlink" title="跑马篇"></a>跑马篇</h3><p>好多同学跑步是为了在马拉松上PB，那么就需要一些跑马的技巧。</p><p>跑前一周要减少训练量，保持一个更好的状态。</p><p>跑马前装备一定要带好，什么防晒的，什么防护的，最重要的是一双好的跑鞋，曾几何时我就因为跑鞋不给力而与PB失之交臂，甚至昨天打球因为鞋子不行，脚都磨破了，所以跑鞋真的很重要。多花点钱买一个好鞋绝对是值的的。</p><p>去跑马拉松的时候一定要带一个大书包，为什么呢？因为如果赞助商给力的时候会给你一堆羊毛，小书包根本装不下，所以书包最好拿大一点的，当然有车的可以忽略。</p><p>马拉松开跑那天早上的早餐一定要吃到4到7成饱，过多了会影响跑步，过少了会跑不下来，毕竟马拉松是一个高消耗的运动。</p><p>开始跑马前一定要在宾馆或者家里上个厕所，到跑马集合地的时候厕所基本上都是不够用的，即使够用也要等半天。开跑后的赛道上也是有厕所的，往往去赛道上的临时厕所是会影响PB，所以上厕所一定要提前。</p><p>跑马前一定要至少提前半个小时到赛场，不仅仅是为了熟悉集结地的环境，还可以做一组跑前热身运动。</p><p>跑马时一定要记得<strong>欲速则慢</strong>，也就是跑步开始的时候一定要慢一点，让心率平滑的升起来，同时保持更好的呼吸，往往呼吸在跑马时起了很大的作用。想想如果你上气不接下气了，你还会有力气冲刺吗？所以开始几公里一定要慢，有的赛道刚开始比较窄，开跑后比较慢，这种赛道往往更容易PB，就比如无锡马拉松的赛道，PB的人非常多。</p><p>跑马时看到补给时不要先去，除非补给处没有其他选手，往往选手看到补给后都兴冲冲地跑上去了，这样选手就会堆积到补给最前面，而往往后面的补给都是无人问津的。</p><p>马拉松后5公里是真正跟自己决一高下的时候，这个时候可以适当加速了，当然加速不是全力跑下去，而是保持一个可以跑得比较久但还是可以坚持下去的速度。另外如果觉得身体支撑不住了，千万不要坚持，<strong>身体比PB跟重要</strong>。</p><p>跑完后不要立刻停下来休息，先走走，让心率逐渐平滑的降下来，等心率降下来后可以好好拉伸一下，再强调一遍拉伸非常重要。</p><p>最后，在跑完后短信上会收到你的成绩，一两个星期内就可以在你参加的马拉松官网上下载自己的证书了，一两个月内可以在<a href="http://www.runchina.org.cn/" target="_blank" rel="noopener">中国马拉松官网</a>上查看你的马拉松成绩，并且你的成绩将永久收录在国家的数据库中，是不是很兴奋？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在已经立秋了，天气渐渐转凉，马拉松赛事也逐渐开始报名了。随着全民健身的理念深入人心，越来越多的人开始跑步了，马拉松赛事也越来越火了。杭州马拉松报名首日就有82221名童鞋报名了，而本届马拉松参赛总人数为36000名，仅仅首日就远超这个数字。与杭州马拉松不同的是宁波马拉松采
      
    
    </summary>
    
    
      <category term="运动与健身" scheme="https://www.kai666666.top/categories/%E8%BF%90%E5%8A%A8%E4%B8%8E%E5%81%A5%E8%BA%AB/"/>
    
    
      <category term="跑步" scheme="https://www.kai666666.top/tags/%E8%B7%91%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>使用Node在浏览器打开某个网页</title>
    <link href="https://www.kai666666.top/2019/07/29/%E4%BD%BF%E7%94%A8Node%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80%E6%9F%90%E4%B8%AA%E7%BD%91%E9%A1%B5/"/>
    <id>https://www.kai666666.top/2019/07/29/%E4%BD%BF%E7%94%A8Node%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80%E6%9F%90%E4%B8%AA%E7%BD%91%E9%A1%B5/</id>
    <published>2019-07-29T05:41:25.000Z</published>
    <updated>2019-07-29T06:59:30.822Z</updated>
    
    <content type="html"><![CDATA[<p>使用Node在浏览器打开某个网页，其实就是使用子进程来用命令行打开网页链接就可以了，需要注意的是<code>Mac</code>系统使用的是<code>open</code>命令，<code>Windows</code>系统使用的是<code>start</code>命令，Linux等系统使用<code>xdg-open</code>命令。针对不同的操作系统使用不同的命令。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>首先创建一个<code>index.js</code>文件，然后写我们的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> child_process = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openURL = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断平台</span></span><br><span class="line">  <span class="keyword">switch</span> (process.platform) &#123;</span><br><span class="line">    <span class="comment">// Mac 使用open</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"darwin"</span>:</span><br><span class="line">      child_process.spawn(<span class="string">'open'</span>, [url]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// Windows使用start</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"win32"</span>:</span><br><span class="line">      child_process.spawn(<span class="string">'start'</span>, [url]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// Linux等使用xdg-open</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      child_process.spawn(<span class="string">'xdg-open'</span>, [url]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">openURL(<span class="string">"https://www.kai666666.top/"</span>);</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在当前命令行运行下面命令，可以看到浏览器已经打开我们的网页了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>往往在代码中直接写死地址是不好的，我们使用传过来的参数视为打开的URL，修改<code>index.js</code>文件最后1行代码：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- openURL("https://www.kai666666.top/");</span></span><br><span class="line"><span class="addition">+ let url = process.argv[2];</span></span><br><span class="line"><span class="addition">+ if (url) &#123;</span></span><br><span class="line"><span class="addition">+   openURL(url);</span></span><br><span class="line"><span class="addition">+ &#125; else &#123;</span></span><br><span class="line"><span class="addition">+   console.log("请输入URL");</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><p>上面<code>process.argv</code>是一个数组，其中0下标的数据是node的路径，1下标的数据是执行文件也就是这里的<code>index.js</code>文件的路径，2到多下标中的数据是后面传入的数据，上面我们只检查2下标的数据。</p><p>最后使用下面命令启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js https://www.kai666666.top/</span><br></pre></td></tr></table></figure><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>看到上面这你会不会想到，自己封装一下打开网页的方法呢？其实已经有人这么做了，你可以看看<a href="https://github.com/sindresorhus/open" target="_blank" rel="noopener">open库</a>，它就是使用代码来打开网页的（其实不仅仅是网页），著名的webpack插件<a href="https://github.com/baldore/open-browser-webpack-plugin" target="_blank" rel="noopener">open-browser-webpack-plugin</a>就是使用它在启动的时候打开一个页面。当然它是需要用代码来启动的，你可能希望直接在命令行来启动，就像我们上面那样，那你可以看看open库作者的另一个库：<a href="https://github.com/sindresorhus/open-cli" target="_blank" rel="noopener">open-cli</a>，内部也是使用<code>open</code>库来启动的，只是封装了一层命令行传URL的过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用Node在浏览器打开某个网页，其实就是使用子进程来用命令行打开网页链接就可以了，需要注意的是&lt;code&gt;Mac&lt;/code&gt;系统使用的是&lt;code&gt;open&lt;/code&gt;命令，&lt;code&gt;Windows&lt;/code&gt;系统使用的是&lt;code&gt;start&lt;/code&gt;命令，
      
    
    </summary>
    
    
      <category term="Node" scheme="https://www.kai666666.top/categories/Node/"/>
    
    
      <category term="Node" scheme="https://www.kai666666.top/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>图片由彩色渐变到黑白动画</title>
    <link href="https://www.kai666666.top/2019/07/23/%E5%9B%BE%E7%89%87%E7%94%B1%E5%BD%A9%E8%89%B2%E6%B8%90%E5%8F%98%E5%88%B0%E9%BB%91%E7%99%BD%E5%8A%A8%E7%94%BB/"/>
    <id>https://www.kai666666.top/2019/07/23/%E5%9B%BE%E7%89%87%E7%94%B1%E5%BD%A9%E8%89%B2%E6%B8%90%E5%8F%98%E5%88%B0%E9%BB%91%E7%99%BD%E5%8A%A8%E7%94%BB/</id>
    <published>2019-07-23T06:41:37.000Z</published>
    <updated>2019-07-23T07:02:33.309Z</updated>
    
    <content type="html"><![CDATA[<p>把图片变成黑白的效果使用Canvas就可以实现，那如何使图片渐变成黑白色呢？其实Canvas完全可以胜任，但是有更简单的办法就是CSS的滤镜。</p><p>首先上一下HTML的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"https://www.kai666666.top/2019/06/29/Canvas系列（8）：像素操作/lufei.jpeg"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"pic"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>此时的效果如下：</p><p><img src="/2019/07/23/图片由彩色渐变到黑白动画/1.png" alt="原始效果"></p><p>CSS代码也很简单：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pic</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: filter .<span class="number">8s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pic</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(100%) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/07/23/图片由彩色渐变到黑白动画/2.gif" alt="添加滤镜的效果"></p><p>当然我们还可以添加多个滤镜，效果会更好，就比如再添加一个透明度变化的效果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pic</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: filter .<span class="number">8s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pic</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(100%) <span class="built_in">opacity</span>(66%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/07/23/图片由彩色渐变到黑白动画/3.gif" alt="添加透明度后的效果"></p><p>更多滤镜效果请看<a href="https://www.runoob.com/cssref/css3-pr-filter.html" target="_blank" rel="noopener">这里</a>，本示例代码请点击<a href="https://codepen.io/kaiorange/pen/NQxPyV" target="_blank" rel="noopener">这里</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;把图片变成黑白的效果使用Canvas就可以实现，那如何使图片渐变成黑白色呢？其实Canvas完全可以胜任，但是有更简单的办法就是CSS的滤镜。&lt;/p&gt;
&lt;p&gt;首先上一下HTML的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="CSS" scheme="https://www.kai666666.top/categories/CSS/"/>
    
    
      <category term="CSS效果" scheme="https://www.kai666666.top/tags/CSS%E6%95%88%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>构造方法或new返回该对象</title>
    <link href="https://www.kai666666.top/2019/07/18/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E6%88%96new%E8%BF%94%E5%9B%9E%E8%AF%A5%E5%AF%B9%E8%B1%A1/"/>
    <id>https://www.kai666666.top/2019/07/18/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E6%88%96new%E8%BF%94%E5%9B%9E%E8%AF%A5%E5%AF%B9%E8%B1%A1/</id>
    <published>2019-07-18T06:32:47.000Z</published>
    <updated>2019-07-18T06:37:58.997Z</updated>
    
    <content type="html"><![CDATA[<p>一个小技巧，调用构造方法或都new返回该对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不是new的时候this指向的是调用者 默认是window</span></span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Person)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lufei = Person();</span><br><span class="line">lufei.sayHello();</span><br><span class="line"><span class="keyword">var</span> nami = <span class="keyword">new</span> Person();</span><br><span class="line">nami.sayHello();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个小技巧，调用构造方法或都new返回该对象：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://www.kai666666.top/categories/JavaScript/"/>
    
    
      <category term="小技巧" scheme="https://www.kai666666.top/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>VSCode支持Vue自动保存格式化的配置</title>
    <link href="https://www.kai666666.top/2019/07/18/VSCode%E6%94%AF%E6%8C%81Vue%E8%87%AA%E5%8A%A8%E4%BF%9D%E5%AD%98%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.kai666666.top/2019/07/18/VSCode%E6%94%AF%E6%8C%81Vue%E8%87%AA%E5%8A%A8%E4%BF%9D%E5%AD%98%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%9A%84%E9%85%8D%E7%BD%AE/</id>
    <published>2019-07-18T06:03:46.000Z</published>
    <updated>2019-07-18T06:22:47.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>安装三个插件：<code>Prettier - Code formatter</code>、<code>ESLint</code>、<code>Vetur</code>。对应的插件图片如下：<br><img src="/2019/07/18/VSCode支持Vue自动保存格式化的配置/1.jpeg" alt="Prettier - Code formatter"><br><img src="/2019/07/18/VSCode支持Vue自动保存格式化的配置/2.jpeg" alt="ESLint"><br><img src="/2019/07/18/VSCode支持Vue自动保存格式化的配置/3.jpeg" alt="Vetur"></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>MacOS使用<code>Command + Sheft + P</code>，windows使用<code>Ctrl + Sheft + P</code>搜索<code>首选项:打开设置(json)</code>,然后把下面配置粘贴进去：</p><p><img src="/2019/07/18/VSCode支持Vue自动保存格式化的配置/4.jpeg" alt="首选项:打开设置(json)"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // 分号</span><br><span class="line">  "prettier.semi": false,</span><br><span class="line">  "prettier.eslintIntegration": true,</span><br><span class="line">  // 单引号包裹字符串</span><br><span class="line">  // 尽可能控制尾随逗号的打印</span><br><span class="line">  "prettier.trailingComma": "all",</span><br><span class="line">  "prettier.singleQuote": true,</span><br><span class="line">  "prettier.tabWidth": 2,</span><br><span class="line">  // 关闭自带的格式化</span><br><span class="line">  "javascript.format.enable": false,</span><br><span class="line">  // 让函数(名)和后面的括号之间加个空格</span><br><span class="line">  "javascript.format.insertSpaceBeforeFunctionParenthesis": true,</span><br><span class="line">  // 启用eslint</span><br><span class="line">  "eslint.enable": true,</span><br><span class="line">  "eslint.validate": [</span><br><span class="line">    "javascript",</span><br><span class="line">    "javascriptreact",</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  // 格式化.vue中html</span><br><span class="line">  "vetur.format.defaultFormatter.html": "js-beautify-html",</span><br><span class="line">  // 让vue中的js按编辑器自带的ts格式进行格式化</span><br><span class="line">  "vetur.format.defaultFormatter.js": "vscode-typescript",</span><br><span class="line">  "vetur.format.defaultFormatterOptions": &#123;</span><br><span class="line">    "js-beautify-html": &#123;</span><br><span class="line">      "wrap_attributes": "force-aligned" // 属性强制折行对齐</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "vetur.format.enable": true,</span><br><span class="line">  "eslint.options": &#123;</span><br><span class="line">    "extensions": [".js", ".vue"]</span><br><span class="line">  &#125;,</span><br><span class="line">  "eslint.autoFixOnSave": true,</span><br><span class="line">  "editor.tabSize": 2,</span><br><span class="line">  // 开启行数提示</span><br><span class="line">  "editor.lineNumbers": "on",</span><br><span class="line">  // 去掉 vscode 自带的自动保存 ，vscode 默认也是 false</span><br><span class="line">  "editor.formatOnSave": false,</span><br><span class="line">  // vscode默认启用了根据文件类型自动设置tabsize的选项</span><br><span class="line">  "editor.detectIndentation": false,</span><br><span class="line">  "editor.quickSuggestions": &#123;</span><br><span class="line">    //开启自动显示建议</span><br><span class="line">    "other": true,</span><br><span class="line">    "comments": true,</span><br><span class="line">    "strings": true</span><br><span class="line">  &#125;,</span><br><span class="line">  "extensions.ignoreRecommendations": false,</span><br><span class="line">  "window.zoomLevel": 1,</span><br><span class="line">  "files.autoGuessEncoding": false,</span><br><span class="line">  "workbench.sideBar.location": "left"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="确保和项目配置不冲突"><a href="#确保和项目配置不冲突" class="headerlink" title="确保和项目配置不冲突"></a>确保和项目配置不冲突</h2><p>如果项目配置和VSCode默认的配置有冲突可能会出现问题，请确保根目录下的<code>.vscode/settings.json</code>文件和上面的文件并不冲突，可以把<code>.vscode/settings.json</code>设置为一个空JSON。</p><p><img src="/2019/07/18/VSCode支持Vue自动保存格式化的配置/5.jpeg" alt=".vscode/settings.json"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装插件&quot;&gt;&lt;a href=&quot;#安装插件&quot; class=&quot;headerlink&quot; title=&quot;安装插件&quot;&gt;&lt;/a&gt;安装插件&lt;/h2&gt;&lt;p&gt;安装三个插件：&lt;code&gt;Prettier - Code formatter&lt;/code&gt;、&lt;code&gt;ESLint&lt;/co
      
    
    </summary>
    
    
      <category term="VSCode" scheme="https://www.kai666666.top/categories/VSCode/"/>
    
    
      <category term="配置" scheme="https://www.kai666666.top/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Canvas系列（13）：实战--星空连线图</title>
    <link href="https://www.kai666666.top/2019/07/17/Canvas%E7%B3%BB%E5%88%97%EF%BC%8813%EF%BC%89%EF%BC%9A%E5%AE%9E%E6%88%98-%E6%98%9F%E7%A9%BA%E8%BF%9E%E7%BA%BF%E5%9B%BE/"/>
    <id>https://www.kai666666.top/2019/07/17/Canvas%E7%B3%BB%E5%88%97%EF%BC%8813%EF%BC%89%EF%BC%9A%E5%AE%9E%E6%88%98-%E6%98%9F%E7%A9%BA%E8%BF%9E%E7%BA%BF%E5%9B%BE/</id>
    <published>2019-07-17T06:35:38.000Z</published>
    <updated>2019-07-17T07:57:06.129Z</updated>
    
    <content type="html"><![CDATA[<p>Canvas能做好多东西，本章就来一节实战性的东西吧。好多人来到这个博客的时候总是觉得后面这种点和线的背景很有意思，这种效果是怎么实现的呢，当然是使用Canvas了，我们这章就来实现一个简易版的这种星空连线图。</p><hr><h2 id="封装画点操作"><a href="#封装画点操作" class="headerlink" title="封装画点操作"></a>封装画点操作</h2><p>对于Canvas画图，好多大神都是使用面向对象的思想来做的，在游戏编程中，往往把拥有特定功能的对象称为精灵。我们这里先简单的对点这个对象做一定的封装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">canvas,options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.canvas = canvas;</span><br><span class="line">  <span class="keyword">this</span>.context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">  options = options || &#123;&#125;;</span><br><span class="line">  <span class="keyword">this</span>.x = options.x || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.y = options.y || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.radius = options.radius || <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// x轴的速度</span></span><br><span class="line">  <span class="keyword">this</span>.vx = options.vx || <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// y轴的速度</span></span><br><span class="line">  <span class="keyword">this</span>.vy = options.vy || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.color = options.color || <span class="string">'#000000'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.context.beginPath();</span><br><span class="line">    <span class="keyword">this</span>.context.arc(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.radius, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">360</span>);</span><br><span class="line">    <span class="keyword">this</span>.context.fillStyle=<span class="keyword">this</span>.color;</span><br><span class="line">    <span class="keyword">this</span>.context.fill();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 匀速运动</span></span><br><span class="line">    <span class="keyword">this</span>.x += <span class="keyword">this</span>.vx;</span><br><span class="line">    <span class="keyword">this</span>.y += <span class="keyword">this</span>.vy;</span><br><span class="line">    <span class="comment">// 超出边界反弹</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.x &lt; <span class="number">0</span> || <span class="keyword">this</span>.x &gt; canvas.width) &#123;</span><br><span class="line">      <span class="keyword">this</span>.vx = -<span class="keyword">this</span>.vx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.y &lt; <span class="number">0</span> || <span class="keyword">this</span>.y &gt; canvas.height) &#123;</span><br><span class="line">      <span class="keyword">this</span>.vy = -<span class="keyword">this</span>.vy;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们画点其实画的是一个半径很小的圆，当然也可以画长宽都很小的正方形，往往正方形只要<code>fillRect</code>一个API就可以了，而圆形往往需要好几个个API，所以效率上画正方形要比画圆更好，这里为了后面显示的更清楚就直接画圆了。</p><h2 id="初始化Canvas"><a href="#初始化Canvas" class="headerlink" title="初始化Canvas"></a>初始化Canvas</h2><p>我们现在通过DOM操作来初始化一个canvas，这样做的好处是有利于把星空连线图封装成一个组件，当然我们这里并不讲解如何封装成一个可复用的DOM组件，只讲解怎么实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自己创建canvas 并通过DOM操作添加到body中</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(canvas);</span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="comment">// 设置样式属性</span></span><br><span class="line">canvas.style.position = <span class="string">"fixed"</span>;</span><br><span class="line">canvas.style.top = <span class="number">0</span>;</span><br><span class="line">canvas.style.left = <span class="number">0</span>;</span><br><span class="line">canvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">canvas.height = <span class="built_in">window</span>.innerHeight;</span><br><span class="line">canvas.style.zIndex = <span class="string">"-1"</span>;</span><br></pre></td></tr></table></figure><p>我们手工创建一个Canvas并添加进来，最后设置宽高和样式，注意宽高使用<code>canvas.width</code>设置而不是<code>canvas.style.width</code>设置，这样不会缩放。</p><h2 id="画一个点"><a href="#画一个点" class="headerlink" title="画一个点"></a>画一个点</h2><p>很简单了，直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(canvas,&#123;</span><br><span class="line">    x: <span class="number">20</span>,</span><br><span class="line">    y: <span class="number">20</span>,</span><br><span class="line">    radius:<span class="number">10</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">p.draw();</span><br></pre></td></tr></table></figure><p>直接看效果：</p><p><img src="/2019/07/17/Canvas系列（13）：实战-星空连线图/1.jpeg" alt="画一个点"></p><h2 id="画20个点"><a href="#画20个点" class="headerlink" title="画20个点"></a>画20个点</h2><p>现在我们画20个点吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cWidth = canvas.width;</span><br><span class="line"><span class="keyword">var</span> cHeight = canvas.height;</span><br><span class="line"><span class="keyword">var</span> points = [];</span><br><span class="line"><span class="keyword">var</span> pointsLength = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pointsLength; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> Point(canvas,&#123;</span><br><span class="line">    x: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * cWidth),</span><br><span class="line">    y: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * cHeight),</span><br><span class="line">    radius:<span class="number">10</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  points.push(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> p = points[i];</span><br><span class="line">  p.draw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接看效果，当然点的位置可能会不一样，毕竟是随机的：</p><p><img src="/2019/07/17/Canvas系列（13）：实战-星空连线图/2.jpeg" alt="画20个点"></p><h2 id="让点动起来"><a href="#让点动起来" class="headerlink" title="让点动起来"></a>让点动起来</h2><p>有了上几章知识的铺垫让点动起来很简单，当然我们现在不用那么大的点了，就是用默认的就可以了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cWidth = canvas.width;</span><br><span class="line"><span class="keyword">var</span> cHeight = canvas.height;</span><br><span class="line"><span class="keyword">var</span> points = [];</span><br><span class="line"><span class="keyword">var</span> pointsLength = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pointsLength; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> Point(canvas,&#123;</span><br><span class="line">    x: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * cWidth),</span><br><span class="line">    y: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * cHeight),</span><br><span class="line">    vx: <span class="built_in">Math</span>.random() * <span class="number">4</span> - <span class="number">2</span>,</span><br><span class="line">    vy: <span class="built_in">Math</span>.random() * <span class="number">4</span> - <span class="number">2</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  points.push(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 清屏</span></span><br><span class="line">  context.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> p1 = points[i];</span><br><span class="line">    p1.update();</span><br><span class="line">    p1.draw();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归调用</span></span><br><span class="line">  requestAnimationFrame(animate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动动画</span></span><br><span class="line">requestAnimationFrame(animate);</span><br></pre></td></tr></table></figure><p>此时效果如下，图片有点放大：</p><p><img src="/2019/07/17/Canvas系列（13）：实战-星空连线图/3.gif" alt="对动的点"></p><h2 id="添加连线"><a href="#添加连线" class="headerlink" title="添加连线"></a>添加连线</h2><p>添加连线也很简单，直接看完整代码吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自己创建canvas 并通过DOM操作添加到body中</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(canvas);</span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="comment">// 设置样式属性</span></span><br><span class="line">canvas.style.position = <span class="string">"fixed"</span>;</span><br><span class="line">canvas.style.top = <span class="number">0</span>;</span><br><span class="line">canvas.style.left = <span class="number">0</span>;</span><br><span class="line">canvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">canvas.height = <span class="built_in">window</span>.innerHeight;</span><br><span class="line">canvas.style.zIndex = <span class="string">"-1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cWidth = canvas.width;</span><br><span class="line"><span class="keyword">var</span> cHeight = canvas.height;</span><br><span class="line"><span class="keyword">var</span> points = [];</span><br><span class="line"><span class="keyword">var</span> pointsLength = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> lineMaxLen = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pointsLength; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> Point(canvas,&#123;</span><br><span class="line">    x: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * cWidth),</span><br><span class="line">    y: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * cHeight),</span><br><span class="line">    vx: <span class="built_in">Math</span>.random() * <span class="number">4</span> - <span class="number">2</span>,</span><br><span class="line">    vy: <span class="built_in">Math</span>.random() * <span class="number">4</span> - <span class="number">2</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  points.push(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 清屏</span></span><br><span class="line">  context.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> p1 = points[i];</span><br><span class="line">    p1.update();</span><br><span class="line">    p1.draw();</span><br><span class="line">    <span class="comment">// 划线</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; points.length; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> p2 = points[j];</span><br><span class="line">      <span class="comment">// 勾股定理</span></span><br><span class="line">      <span class="keyword">var</span> l = <span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow(p2.x - p1.x,<span class="number">2</span>) + <span class="built_in">Math</span>.pow(p2.y - p1.y,<span class="number">2</span>));</span><br><span class="line">      <span class="keyword">if</span> (l &lt; lineMaxLen) &#123;</span><br><span class="line">        context.beginPath();</span><br><span class="line">        context.moveTo(p1.x, p1.y);</span><br><span class="line">        context.lineTo(p2.x, p2.y);</span><br><span class="line">        <span class="comment">// 越远颜色越淡</span></span><br><span class="line">        context.strokeStyle=<span class="string">'rgba(0,0,0,'</span> + ((lineMaxLen - l) / lineMaxLen) + <span class="string">')'</span>;</span><br><span class="line">        context.stroke();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归调用</span></span><br><span class="line">  requestAnimationFrame(animate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动动画</span></span><br><span class="line">requestAnimationFrame(animate);</span><br></pre></td></tr></table></figure><p>此时效果如下：</p><p><img src="/2019/07/17/Canvas系列（13）：实战-星空连线图/4.gif" alt="完整效果"></p><p>源码请点击<a href="https://github.com/KaiOrange/canvas-demo/tree/master/13" target="_blank" rel="noopener">这里</a>。</p><p>我们已经大致实现了我们的效果，当然还需要做的是监听<code>window.resize</code>事件，以动态设置Canvas的宽高；也可以自己添加事件，让鼠标顶点的位置也加一个点；甚至可以改变速度，当两个点靠近的时候速度加大，远离的时候速度减小；当然可以把这个效果封装成一个可以复用的组件，放在你的项目中。这些后续事情就交给你了，相信你可以的。</p><p>我们博客背景中使用的是<a href="https://github.com/hustcc/canvas-nest.js" target="_blank" rel="noopener">canvas-nest.js</a>，你也可以观摩一下它源码，实现方式和我们的大同小异。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Canvas能做好多东西，本章就来一节实战性的东西吧。好多人来到这个博客的时候总是觉得后面这种点和线的背景很有意思，这种效果是怎么实现的呢，当然是使用Canvas了，我们这章就来实现一个简易版的这种星空连线图。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;封装画点操作&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="Canvas" scheme="https://www.kai666666.top/categories/Canvas/"/>
    
    
      <category term="Canvas" scheme="https://www.kai666666.top/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>Canvas系列（12）：动画高级</title>
    <link href="https://www.kai666666.top/2019/06/30/Canvas%E7%B3%BB%E5%88%97%EF%BC%8812%EF%BC%89%EF%BC%9A%E5%8A%A8%E7%94%BB%E9%AB%98%E7%BA%A7/"/>
    <id>https://www.kai666666.top/2019/06/30/Canvas%E7%B3%BB%E5%88%97%EF%BC%8812%EF%BC%89%EF%BC%9A%E5%8A%A8%E7%94%BB%E9%AB%98%E7%BA%A7/</id>
    <published>2019-06-30T08:03:54.000Z</published>
    <updated>2019-07-11T09:55:55.824Z</updated>
    
    <content type="html"><![CDATA[<p>通过前面章节的学习，我们已经学会了直线和部分曲线运动，同时我们也学会了加速、减速、摩擦力等操作。那么动画还有什么需要深入研究下去的呢？当然有，那就是让动画更加平滑，更细滑。</p><hr><h2 id="缓动动画"><a href="#缓动动画" class="headerlink" title="缓动动画"></a>缓动动画</h2><p>在使用CSS3做变化的时候我们经常使用<code>transition-timing-function</code>，其中最有名的两个值就是<code>ease-in</code>和<code>ease-out</code>，那canvas种怎么实现这中如丝般细滑的缓动动画呢？看完本章你就知道了。缓动的公式如下：</p><blockquote><p>当前速度 = (最终位置 - 当前位置) * 缓动系数。<br>新的位置 = 当前位置 + 当前速度。</p></blockquote><p>我们看一个简单的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置x的值放在最左边</span></span><br><span class="line"><span class="keyword">var</span> ballX = ballRadius;</span><br><span class="line"><span class="keyword">var</span> ballY = centerY;</span><br><span class="line"><span class="comment">// x的速度 具体是多少在update的时候计算</span></span><br><span class="line"><span class="keyword">var</span> vx;</span><br><span class="line"><span class="comment">// 缓动系数</span></span><br><span class="line"><span class="keyword">var</span> easing = <span class="number">0.03</span>;</span><br><span class="line"><span class="comment">// 最终位置 在最右边</span></span><br><span class="line"><span class="keyword">var</span> targetX = canvas.width - ballRadius;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 当前速度 = (最终位置 - 当前位置) * 缓动系数</span></span><br><span class="line">  vx = (targetX - ballX) * easing;</span><br><span class="line">  <span class="comment">// 新的位置 = 当前位置 + 当前速度</span></span><br><span class="line">  ballX += vx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（12）：动画高级/1.gif" alt="缓动动画"></p><p>由上面公式中我们可以知道，缓动系数越大运动的越快。</p><h2 id="带有角度的缓动动画"><a href="#带有角度的缓动动画" class="headerlink" title="带有角度的缓动动画"></a>带有角度的缓动动画</h2><p>带有角度的缓动动画也是一样的，只要把y轴上的分量也计算进去就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置起始位置在左上角</span></span><br><span class="line"><span class="keyword">var</span> ballX = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> ballY = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 速度 具体是多少在update的时候计算</span></span><br><span class="line"><span class="keyword">var</span> vx,vy;</span><br><span class="line"><span class="comment">// 缓动系数</span></span><br><span class="line"><span class="keyword">var</span> easing = <span class="number">0.03</span>;</span><br><span class="line"><span class="comment">// 最终位置 在右下角</span></span><br><span class="line"><span class="keyword">var</span> targetX = canvas.width - ballRadius;</span><br><span class="line"><span class="keyword">var</span> targetY = canvas.height - ballRadius;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 当前速度 = (最终位置 - 当前位置) * 缓动系数</span></span><br><span class="line">  vx = (targetX - ballX) * easing;</span><br><span class="line">  vy = (targetY - ballY) * easing;</span><br><span class="line">  <span class="comment">// 新的位置 = 当前位置 + 当前速度</span></span><br><span class="line">  ballX += vx;</span><br><span class="line">  ballY += vy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（12）：动画高级/2.gif" alt="带有角度的缓动动画"></p><p>由上可以，缓动动画只需要根据给定结束的位置就可以了，无需根据角度再进行计算，使用起来非常方便。通常由于缓动动画比摩擦力更细滑，所以减速后停来下的动画，基本上都用缓动动画。</p><h2 id="缓动动画的其他使用场景"><a href="#缓动动画的其他使用场景" class="headerlink" title="缓动动画的其他使用场景"></a>缓动动画的其他使用场景</h2><p>缓动动画计算的过程其实一个简单数学推到，本身并不是什么高深的东西（当然做出来的效果确实很好）。我们的思维不能定势到只能做物体移动的动画，只要有从状态A平滑变化到状态B的场景都可以使用缓动动画，就比如宽高的变化，颜色的变化，透明度的变化等等。我们这里给一个小球半径变化的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小球画在中间位置</span></span><br><span class="line"><span class="keyword">var</span> ballX = centerX;</span><br><span class="line"><span class="keyword">var</span> ballY = centerY;</span><br><span class="line"><span class="comment">// 缓动系数</span></span><br><span class="line"><span class="keyword">var</span> easing = <span class="number">0.03</span>;</span><br><span class="line"><span class="comment">// 最终位置 在右下角</span></span><br><span class="line"><span class="keyword">var</span> targetBallRadius = <span class="number">70</span>;</span><br><span class="line"><span class="comment">// 半径变化速度</span></span><br><span class="line"><span class="keyword">var</span> vRadius;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 当前速度 = (最终位置 - 当前位置) * 缓动系数</span></span><br><span class="line">  vRadius = (targetBallRadius - ballRadius) * easing;</span><br><span class="line">  <span class="comment">// 新的位置 = 当前位置 + 当前速度</span></span><br><span class="line">  ballRadius += vRadius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（12）：动画高级/3.gif" alt="缓动动画的其他使用场景"></p><h2 id="弹性动画"><a href="#弹性动画" class="headerlink" title="弹性动画"></a>弹性动画</h2><p>缓动动画，当物体运动到终点的位置就会停下来；弹性动画，当物体运动到终点位置，会继续往前运动一下，然后反弹过来。那么怎么实现弹性动画呢？说出来你可能会不相信，缓动动画是速度使用缓动方程，而弹性动画是加速度使用缓动方程。也就是说：</p><blockquote><p>当前加速度 = (最终位置 - 当前位置) * 弹性系数。<br>新的速度 = 当前速度 + 当前加速度。<br>新的位置 = 当前的位置 + 新的速度。</p></blockquote><p>我们先来看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置起始位置在左边</span></span><br><span class="line"><span class="keyword">var</span> ballX = ballRadius;</span><br><span class="line"><span class="keyword">var</span> ballY = centerY;</span><br><span class="line"><span class="comment">// 初始速度</span></span><br><span class="line"><span class="keyword">var</span> vx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> vy = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 加速度</span></span><br><span class="line"><span class="keyword">var</span> ax;</span><br><span class="line"><span class="comment">// 弹性动画系数</span></span><br><span class="line"><span class="keyword">var</span> spring = <span class="number">0.01</span>;</span><br><span class="line"><span class="comment">// 最终位置 在最右边</span></span><br><span class="line"><span class="keyword">var</span> targetX = centerX;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 当前加速度 = (最终位置 - 当前位置) * 弹性系数</span></span><br><span class="line">  ax = (targetX - ballX) * spring;</span><br><span class="line">  <span class="comment">// 新的速度 = 当前速度 + 当前加速度</span></span><br><span class="line">  vx += ax;</span><br><span class="line">  <span class="comment">// 新的位置 = 当前的位置 + 新的速度</span></span><br><span class="line">  ballX += vx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（12）：动画高级/4.gif" alt="弹性动画"></p><p>小球从左边，走到了中间，到中间的时候加速度是0，再往右一点，加速度是负数也就是减速，等减速到最右边的时候速度为0，然后向左边加速。通过上面公式我们发现第一个公式跟缓动公式是一样的，只是结果一个是加速度一个是速度，至于系数虽然这里叫的不一样，其实代表的含义差不多。</p><h2 id="带有摩擦力的弹性动画"><a href="#带有摩擦力的弹性动画" class="headerlink" title="带有摩擦力的弹性动画"></a>带有摩擦力的弹性动画</h2><p>上面的弹性动画是理想状态下的，就是物理上所说的绝对光滑的情况下才会发生，而现实中往往是具有摩擦力的。摩擦力我们之前学过，弹性动画我们也学过，如果把两者结合起来就是带有摩擦力的弹性动画，公式如下：</p><blockquote><p>当前加速度 = (最终位置 - 当前位置) * 弹性系数。<br>没有摩擦力的新的速度 = 当前速度 + 当前加速度。<br>带有摩擦力的新的速度 = 没有摩擦力的新的速度 * 摩擦系数。<br>新的位置 = 当前的位置 + 带有摩擦力的新的速度</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置起始位置在左边</span></span><br><span class="line"><span class="keyword">var</span> ballX = ballRadius;</span><br><span class="line"><span class="keyword">var</span> ballY = centerY;</span><br><span class="line"><span class="comment">// 初始速度</span></span><br><span class="line"><span class="keyword">var</span> vx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> vy = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 加速度</span></span><br><span class="line"><span class="keyword">var</span> ax;</span><br><span class="line"><span class="comment">// 弹性动画系数</span></span><br><span class="line"><span class="keyword">var</span> spring = <span class="number">0.01</span>;</span><br><span class="line"><span class="comment">// 摩擦力系数</span></span><br><span class="line"><span class="keyword">var</span> friction = <span class="number">0.98</span>;</span><br><span class="line"><span class="comment">// 最终位置 在最右边</span></span><br><span class="line"><span class="keyword">var</span> targetX = centerX;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 当前加速度 = (最终位置 - 当前位置) * 弹性系数</span></span><br><span class="line">  ax = (targetX - ballX) * spring;</span><br><span class="line">  <span class="comment">// 没有摩擦力的新的速度 = 当前速度 + 当前加速度</span></span><br><span class="line">  vx += ax;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 带有摩擦力的新的速度 = 没有摩擦力的新的速度 * 摩擦系数</span></span><br><span class="line">  vx *= friction;</span><br><span class="line">  <span class="comment">// 新的位置 = 当前的位置 + 带有摩擦力的新的速度</span></span><br><span class="line">  ballX += vx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（12）：动画高级/5.gif" alt="带有摩擦力的弹性动画"></p><p>建议你自己写一写代码，或者自己把代码下载下来运行一下，代码地址：<a href="https://github.com/KaiOrange/canvas-demo" target="_blank" rel="noopener">https://github.com/KaiOrange/canvas-demo</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过前面章节的学习，我们已经学会了直线和部分曲线运动，同时我们也学会了加速、减速、摩擦力等操作。那么动画还有什么需要深入研究下去的呢？当然有，那就是让动画更加平滑，更细滑。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;缓动动画&quot;&gt;&lt;a href=&quot;#缓动动画&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Canvas" scheme="https://www.kai666666.top/categories/Canvas/"/>
    
    
      <category term="Canvas" scheme="https://www.kai666666.top/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>Canvas系列（11）：动画中级</title>
    <link href="https://www.kai666666.top/2019/06/30/Canvas%E7%B3%BB%E5%88%97%EF%BC%8811%EF%BC%89%EF%BC%9A%E5%8A%A8%E7%94%BB%E4%B8%AD%E7%BA%A7/"/>
    <id>https://www.kai666666.top/2019/06/30/Canvas%E7%B3%BB%E5%88%97%EF%BC%8811%EF%BC%89%EF%BC%9A%E5%8A%A8%E7%94%BB%E4%B8%AD%E7%BA%A7/</id>
    <published>2019-06-30T06:47:10.000Z</published>
    <updated>2019-06-30T08:01:09.120Z</updated>
    
    <content type="html"><![CDATA[<p>上一章我们讲了简单的动画是如何绘制的，如果没有看上一章的童鞋，请点<a href="/2019/06/30/Canvas系列（10）：动画初级/#more">这里</a>，本章的内容也是接着上一章的内容，代码也只修改其中部分。</p><hr><h2 id="加速运动"><a href="#加速运动" class="headerlink" title="加速运动"></a>加速运动</h2><p>我上章中，涉及直线的运动，其速度都是恒定的，现在我们做一下加速的运行，同样的我们只给出核心的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置x的值放在最左边</span></span><br><span class="line"><span class="keyword">var</span> ballX = ballRadius;</span><br><span class="line"><span class="keyword">var</span> ballY = centerY;</span><br><span class="line"><span class="comment">// x的速度 初始值是0 然后逐渐加速</span></span><br><span class="line"><span class="keyword">var</span> vx = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 加速度</span></span><br><span class="line"><span class="keyword">var</span> ax = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX += vx;</span><br><span class="line">  <span class="comment">// 改变速度</span></span><br><span class="line">  vx += ax;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（11）：动画中级/1.gif" alt="加速运动"></p><p>那么减速运动怎么做呢？没错只要把加速度改一下就可以了，当然我们肯定要给一个初始速度：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置x的值放在最左边</span></span><br><span class="line"><span class="keyword">var</span> ballX = ballRadius;</span><br><span class="line"><span class="keyword">var</span> ballY = centerY;</span><br><span class="line"><span class="comment">// x的速度 初始值是0 然后逐渐加速</span></span><br><span class="line"><span class="keyword">var</span> vx = <span class="number">7</span>;</span><br><span class="line"><span class="comment">// 加速度</span></span><br><span class="line"><span class="keyword">var</span> ax = <span class="number">-0.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX += vx;</span><br><span class="line">  <span class="comment">// 改变速度</span></span><br><span class="line">  vx += ax;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（11）：动画中级/2.gif" alt="减速运动"></p><p>我们看到，小球先向右减速，当速度减到0的时候，然后又像左加速了，和物理课上讲的是一样的。</p><h2 id="带角度的加速运动"><a href="#带角度的加速运动" class="headerlink" title="带角度的加速运动"></a>带角度的加速运动</h2><p>带角度的加速运动，和之前的一样，由于加速度不变，我们需要对加速度分解。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置球的起始位置在左上角</span></span><br><span class="line"><span class="keyword">var</span> ballX = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> ballY = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 初始速度</span></span><br><span class="line"><span class="keyword">var</span> vx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> vy = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 角度</span></span><br><span class="line"><span class="keyword">var</span> angle = <span class="number">45</span>;</span><br><span class="line"><span class="comment">// 加速度是0,1</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0.1</span>;</span><br><span class="line"><span class="comment">// 计算加速度分量</span></span><br><span class="line"><span class="keyword">var</span> ax = a * <span class="built_in">Math</span>.cos(angle * <span class="built_in">Math</span>.PI / <span class="number">180</span>);</span><br><span class="line"><span class="keyword">var</span> ay = a * <span class="built_in">Math</span>.sin(angle * <span class="built_in">Math</span>.PI / <span class="number">180</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX += vx;</span><br><span class="line">  ballY += vy;</span><br><span class="line">  <span class="comment">// 改变速度</span></span><br><span class="line">  vx += ax;</span><br><span class="line">  vy += ay;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（11）：动画中级/3.gif" alt="带角度的运动"></p><h2 id="抛物线运动"><a href="#抛物线运动" class="headerlink" title="抛物线运动"></a>抛物线运动</h2><p>看到刚才的加速运动，我想问你自由落体运动怎么做？自由落体运动就是初速度为0，然后y方向上有一个加速度，我们第一个例子是x方向上的加速度，相信以你现在的实力，做出来是完全没问题的。现在我们看一下抛物线运动，抛物线运动是水平方向上的匀速直线运动，就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置球的起始位置在左下角</span></span><br><span class="line"><span class="keyword">var</span> ballX = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> ballY = canvas.height;</span><br><span class="line"><span class="comment">// 初始速度</span></span><br><span class="line"><span class="keyword">var</span> vx = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// y方向初始速度向上</span></span><br><span class="line"><span class="keyword">var</span> vy = <span class="number">-5</span>;</span><br><span class="line"><span class="comment">// y方向上的加速度是0.1（9.8太大了，所以就用了一个小的加速度）</span></span><br><span class="line"><span class="keyword">var</span> ay = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX += vx;</span><br><span class="line">  ballY += vy;</span><br><span class="line">  <span class="comment">// 改变y方向上的速度</span></span><br><span class="line">  vy += ay;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（11）：动画中级/4.gif" alt="抛物线运动"></p><h2 id="带反弹的抛物线运动"><a href="#带反弹的抛物线运动" class="headerlink" title="带反弹的抛物线运动"></a>带反弹的抛物线运动</h2><p>增加一点难度，小球触碰到最下面那么将反弹，通常反弹会损失一点能量，我们就设置每次反弹后的速度是原来的80%。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置球的起始位置在左下角</span></span><br><span class="line"><span class="keyword">var</span> ballX = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// y先抬高一点</span></span><br><span class="line"><span class="keyword">var</span> ballY = canvas.height - ballRadius;</span><br><span class="line"><span class="comment">// 初始速度</span></span><br><span class="line"><span class="keyword">var</span> vx = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// y方向初始速度向上</span></span><br><span class="line"><span class="keyword">var</span> vy = <span class="number">-4</span>;</span><br><span class="line"><span class="comment">// y方向上的加速度是0.1（9.8太大了，所以就用了一个小的加速度）</span></span><br><span class="line"><span class="keyword">var</span> ay = <span class="number">0.1</span>;</span><br><span class="line"><span class="comment">// 符号表示方向 反弹后速度减小</span></span><br><span class="line"><span class="keyword">var</span> bounce = <span class="number">-0.8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX += vx;</span><br><span class="line">  ballY += vy;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果小球的高度 到最下面了 那么就设置最下面你的值 并且就反弹</span></span><br><span class="line">  <span class="keyword">if</span> (ballY &gt; canvas.height - ballRadius) &#123;</span><br><span class="line">    ballY = canvas.height - ballRadius;</span><br><span class="line">    vy = vy * bounce;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 改变y方向上的速度</span></span><br><span class="line">  vy += ay;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（11）：动画中级/5.gif" alt="带反弹的抛物线运动"></p><h2 id="摩擦力"><a href="#摩擦力" class="headerlink" title="摩擦力"></a>摩擦力</h2><p>带有摩擦力的运动往往速度会逐渐变小直到为0（我们这里不考虑其他外力的作用），这和上面带有反方向加速度的减速运动很相似，但是减速运动速度为0的时候会反方向加速，带有摩擦力的运动不会反向加速。我们就改一改上面的那个减速的运动，直接把加速度改成摩擦力。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置x的值放在最左边</span></span><br><span class="line"><span class="keyword">var</span> ballX = ballRadius;</span><br><span class="line"><span class="keyword">var</span> ballY = centerY;</span><br><span class="line"><span class="comment">// x的速度 初始值是0 然后逐渐加速</span></span><br><span class="line"><span class="keyword">var</span> vx = <span class="number">7</span>;</span><br><span class="line"><span class="comment">// 摩擦力系数</span></span><br><span class="line"><span class="keyword">var</span> friction = <span class="number">0.97</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX += vx;</span><br><span class="line">  <span class="comment">// 速度减小</span></span><br><span class="line">  vx *= friction;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（11）：动画中级/6.gif" alt="摩擦力"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一章我们讲了简单的动画是如何绘制的，如果没有看上一章的童鞋，请点&lt;a href=&quot;/2019/06/30/Canvas系列（10）：动画初级/#more&quot;&gt;这里&lt;/a&gt;，本章的内容也是接着上一章的内容，代码也只修改其中部分。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;加速运动&quot;&gt;
      
    
    </summary>
    
    
      <category term="Canvas" scheme="https://www.kai666666.top/categories/Canvas/"/>
    
    
      <category term="Canvas" scheme="https://www.kai666666.top/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>Canvas系列（10）：动画初级</title>
    <link href="https://www.kai666666.top/2019/06/30/Canvas%E7%B3%BB%E5%88%97%EF%BC%8810%EF%BC%89%EF%BC%9A%E5%8A%A8%E7%94%BB%E5%88%9D%E7%BA%A7/"/>
    <id>https://www.kai666666.top/2019/06/30/Canvas%E7%B3%BB%E5%88%97%EF%BC%8810%EF%BC%89%EF%BC%9A%E5%8A%A8%E7%94%BB%E5%88%9D%E7%BA%A7/</id>
    <published>2019-06-30T00:38:59.000Z</published>
    <updated>2019-07-18T09:57:08.500Z</updated>
    
    <content type="html"><![CDATA[<p>今天开始就要讲一些进阶的东西了，是不是很兴奋呢？</p><hr><h2 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h2><p>所谓动画其实就是快读绘制图片，由于人的眼睛更不上屏幕绘制的速率，所以看到的就好像连着的一样，也就形成了动画，动画片就是这个原理，canvas中的动画也是这个原理。提到动画就不得不说一个函数了，那就是<code>requestAnimationFrame</code>。这是一个定时执行的函数，类似于<code>setTimeout</code>，只是间隔时间不再有我们自己手动去设定，而是由计算机自己去计算，这样比我们直接设定的误差更小（通常我们是定1000/60，约等于16.7毫秒，因为CPU的频率一般是60Hz，也就是1秒最多可以刷新60次界面）。但是往往浏览器对<code>requestAnimationFrame</code>的支持不够友好，那这就需要polyfill，通常一种简单的polyfill可以这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Date</span>.now)</span><br><span class="line">    <span class="built_in">Date</span>.now = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> lastTime = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span>  <span class="built_in">window</span>.requestAnimationFrame       ||</span><br><span class="line">          <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">          <span class="built_in">window</span>.mozRequestAnimationFrame    ||</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">            <span class="keyword">var</span> nextTime = <span class="built_in">Math</span>.max(lastTime + <span class="number">16</span>, now);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              callback(lastTime = nextTime);</span><br><span class="line">            &#125;,nextTime - now);</span><br><span class="line">          &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与之对应的清空定时器的polyfill</span></span><br><span class="line"><span class="built_in">window</span>.cancelAnimationFrame = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>  <span class="built_in">window</span>.cancelAnimationFrame       ||</span><br><span class="line">          <span class="built_in">window</span>.webkitCancelAnimationFrame ||</span><br><span class="line">          <span class="built_in">window</span>.mozCancelAnimationFrame    ||</span><br><span class="line">          <span class="built_in">window</span>.clearTimeout</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>我们可以看到，他的做法是如果没有<code>requestAnimationFrame</code>那么使用<code>setTimeout</code>来做回退处理。通过上面我们可以看到<code>callback</code>有一个参数，就是时间，通常对于游戏等精度要求比较高的情况下我们使用这个时间和速度来计算当前帧的位置，这样可以有效避免，硬件配置所带来的优势。举个例子，比如我配置高可能比配置低的多画了几帧，那么同样的速度我就比别人走的快，而基于这个时间来计算的话就不会有问题了，如果配置低的少绘制几帧，那么时间间隔会变大相同的速度，距离也会边远。这就相当于直接跳过了中间几帧。当然对于这个时间的值不同浏览器实现的方式可能不一样，就比如谷歌的是从0毫秒开始逐渐递增的，有的浏览器是当前的毫秒数逐渐递增的，对于绘制图像的时候我们更多的是关注时间差，所以影响不是很大，就比如谷歌的第一帧传的时间可能是0，第二帧可能传的是17，而某些浏览器可能第一帧传的是1561859029000，第二帧传的是1561859029017，我们计算的时候往往是根据两者的差17来计算下一帧的位置。当然，对于一些简单与时间无关的动画特效，也可以不用关注这个时间，直接根据每次绘制时增加的速度去计算就好了，我们这里为了简单起见就不去动这个事件了。同时为了减少代码的长度我们就不使用polyfill了，如果是一个上线的项目最好使用上。</p><h2 id="匀速直线运动"><a href="#匀速直线运动" class="headerlink" title="匀速直线运动"></a>匀速直线运动</h2><p>匀速直线运动是最简单的动画，由于我们现在需要不断地檫除然后重新绘制，所以我们需要重新给出我们此时的JavaScript代码，如下，也可以在<a href="https://github.com/KaiOrange/canvas-demo" target="_blank" rel="noopener">这里</a>查看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="keyword">var</span> sW = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> lW = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> spacing = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制坐标系</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawCoordinate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.beginPath();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; canvas.width; x+=spacing) &#123;</span><br><span class="line">    context.moveTo(x, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(x % (spacing * <span class="number">5</span>) === <span class="number">0</span>)&#123;</span><br><span class="line">      context.lineTo(x, lW);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      context.lineTo(x, sW);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; canvas.height; y+=spacing) &#123;</span><br><span class="line">    context.moveTo(<span class="number">0</span>, y);</span><br><span class="line">    <span class="keyword">if</span>(y % (spacing * <span class="number">5</span>) === <span class="number">0</span>)&#123;</span><br><span class="line">      context.lineTo(lW, y);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      context.lineTo(sW, y);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  context.strokeStyle=<span class="string">'black'</span>;</span><br><span class="line">  context.stroke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 中心坐标(centerX,centerY)</span></span><br><span class="line"><span class="keyword">var</span> centerX = canvas.width / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> centerY = canvas.height / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小球圆心的坐标</span></span><br><span class="line"><span class="keyword">var</span> ballX = centerX;</span><br><span class="line"><span class="keyword">var</span> ballY = centerY;</span><br><span class="line"><span class="comment">// 小球的半径</span></span><br><span class="line"><span class="keyword">var</span> ballRadius = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX += <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 如果超出去 那么回到初始位置</span></span><br><span class="line">  <span class="keyword">if</span> (ballX &gt; <span class="number">300</span> + ballRadius) &#123;</span><br><span class="line">    ballX = -ballRadius;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.arc(ballX, ballY, ballRadius, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">360</span>);</span><br><span class="line">  context.closePath();</span><br><span class="line">  context.fillStyle=<span class="string">'orange'</span>;</span><br><span class="line">  context.fill();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时没有轨迹的绘制 所以就是一个空函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawLocus</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 清屏</span></span><br><span class="line">  context.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绘制坐标系</span></span><br><span class="line">  drawCoordinate();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//绘制轨迹 有可能会用到 当前是空</span></span><br><span class="line">  drawLocus();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新小球位置</span></span><br><span class="line">  updateBall();</span><br><span class="line">  <span class="comment">// 绘制球</span></span><br><span class="line">  drawBall();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归调用</span></span><br><span class="line">  requestAnimationFrame(animate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动动画</span></span><br><span class="line">requestAnimationFrame(animate);</span><br></pre></td></tr></table></figure><p>看到<code>animate</code>还是了吗，此函数是canvas动画的“套路”，一定要熟悉它，几乎所有动画相关的代码都有该函数的身影。此时的效果如下：</p><p><img src="/2019/06/30/Canvas系列（10）：动画初级/1.gif" alt="匀速直线运动"></p><h2 id="匀速圆周运动"><a href="#匀速圆周运动" class="headerlink" title="匀速圆周运动"></a>匀速圆周运动</h2><p>匀速圆周运动和匀速直线运动代码差不多，唯一不同的地方就是<code>drawBall</code>和<code>updateBall</code>这两个方法，当然涉及到一点小小的数学计算，这里直接给出变动的部分，变动的代码大多数也是相似的，你只要把注意力放在<code>updateBall</code>中就好了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆周运动半径</span></span><br><span class="line"><span class="keyword">var</span> radius = <span class="number">50</span>;</span><br><span class="line"><span class="comment">// 小球的角度</span></span><br><span class="line"><span class="keyword">var</span> angle = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX = centerX + <span class="built_in">Math</span>.cos(angle) * radius;</span><br><span class="line">  ballY = centerY + <span class="built_in">Math</span>.sin(angle) * radius;</span><br><span class="line">  <span class="comment">// 需要注意的是Math.cos和Math.sin中的参数是弧度而不是角度</span></span><br><span class="line">  <span class="comment">// 也就是说2*Math.PI是一周约等于6.28 这里每次加0.08弧度</span></span><br><span class="line">  angle += <span class="number">0.08</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制轨迹</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawLocus</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.arc(centerX, centerY, radius, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">360</span>);</span><br><span class="line">  context.closePath();</span><br><span class="line">  context.strokeStyle=<span class="string">'red'</span>;</span><br><span class="line">  context.stroke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>出来的效果如下：</p><p><img src="/2019/06/30/Canvas系列（10）：动画初级/2.gif" alt="匀速圆周运动"></p><h2 id="椭圆运动"><a href="#椭圆运动" class="headerlink" title="椭圆运动"></a>椭圆运动</h2><p>圆周运动和椭圆运动很相似，直接给代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 椭圆运动半径</span></span><br><span class="line"><span class="keyword">var</span> radiusX = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> radiusY = <span class="number">50</span>;</span><br><span class="line"><span class="comment">// 小球的角度</span></span><br><span class="line"><span class="keyword">var</span> angle = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX = centerX + <span class="built_in">Math</span>.cos(angle) * radiusX;</span><br><span class="line">  ballY = centerY + <span class="built_in">Math</span>.sin(angle) * radiusY;</span><br><span class="line">  angle += <span class="number">0.08</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轨迹</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawLocus</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 绘制椭圆</span></span><br><span class="line">  context.save();</span><br><span class="line">  context.beginPath();</span><br><span class="line">  <span class="comment">// 将坐标系平移到圆心位置</span></span><br><span class="line">  context.translate(centerX, centerY );</span><br><span class="line">  <span class="comment">// 把圆缩放后使之形成椭圆</span></span><br><span class="line">  context.scale(<span class="number">1</span>, radiusY / radiusX);</span><br><span class="line">  <span class="comment">// 此时(0,0)是平移后的位置 也就是原坐标系的(centerX, centerY)</span></span><br><span class="line">  context.arc(<span class="number">0</span>, <span class="number">0</span>, radiusX, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">360</span>);</span><br><span class="line">  context.strokeStyle=<span class="string">'red'</span>;</span><br><span class="line">  context.stroke();</span><br><span class="line">  context.restore();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>出来的效果如下：</p><p><img src="/2019/06/30/Canvas系列（10）：动画初级/3.gif" alt="椭圆运动"></p><h2 id="左右来回运动"><a href="#左右来回运动" class="headerlink" title="左右来回运动"></a>左右来回运动</h2><p>通过观察我们可以发现，椭圆运动和圆周运动的区别就是椭圆运动的某一个轴的半径和另一个轴的半径是不同的，那么如果某一个周的半径是0会发生什么情况呢。这就是左右来回的运动。我们修改一下代码，并且把绘制轨迹的函数<code>drawCoordinate</code>去掉吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 小球的角度</span></span><br><span class="line"><span class="keyword">var</span> angle = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> radiusX = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX = centerX + <span class="built_in">Math</span>.sin(angle) * radiusX;</span><br><span class="line">  angle += <span class="number">0.08</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出来的效果如下：</p><p><img src="/2019/06/30/Canvas系列（10）：动画初级/4.gif" alt="左右来回运动"></p><h2 id="正弦运动"><a href="#正弦运动" class="headerlink" title="正弦运动"></a>正弦运动</h2><p>上面是y不变，x利用三角函数计算的值，现在我们x每次增加一点，然后y轴使用三角函数，那就是正弦运动了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 小球的角度</span></span><br><span class="line"><span class="keyword">var</span> angle = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> radiusX = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> radiusY = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> ballRadius = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX += <span class="number">2</span>;</span><br><span class="line">  ballY = centerY + <span class="built_in">Math</span>.sin(angle) * radiusY;</span><br><span class="line">  angle += <span class="number">0.08</span>;</span><br><span class="line">  <span class="comment">// 超出去以后左边显示</span></span><br><span class="line">  <span class="keyword">if</span> (ballX &gt; <span class="number">300</span> + ballRadius) &#123;</span><br><span class="line">    ballX = -ballRadius;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出来的效果如下：</p><p><img src="/2019/06/30/Canvas系列（10）：动画初级/5.gif" alt="正弦运动"></p><h2 id="带角度的匀速运动"><a href="#带角度的匀速运动" class="headerlink" title="带角度的匀速运动"></a>带角度的匀速运动</h2><p>更多的时候我们会遇到带有一定角度的匀速运动，比如速度是每次更新2个像素，那么实际上x和y都是他的一个分量，现在看一下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 小球圆心的坐标</span></span><br><span class="line"><span class="keyword">var</span> ballX = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> ballY = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 小球的半径</span></span><br><span class="line"><span class="keyword">var</span> ballRadius = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里写角度看起来比较直观</span></span><br><span class="line"><span class="keyword">var</span> angle = <span class="number">45</span>;</span><br><span class="line"><span class="keyword">var</span> spend = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 绘制的时候需要把角度转换为弧度</span></span><br><span class="line">  <span class="keyword">var</span> vx = <span class="built_in">Math</span>.cos(angle * <span class="built_in">Math</span>.PI / <span class="number">180</span>) * spend;</span><br><span class="line">  <span class="keyword">var</span> vy = <span class="built_in">Math</span>.sin(angle * <span class="built_in">Math</span>.PI / <span class="number">180</span>) * spend;</span><br><span class="line">  ballX += vx;</span><br><span class="line">  ballY += vy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出来的效果如下：</p><p><img src="/2019/06/30/Canvas系列（10）：动画初级/6.gif" alt="匀速直线运动"></p><p>我们可以看到小球在二维坐标系中的运动和速度的分解与合成有很大的关系。良好的数学和物理知识将帮助我们在这条路上走的更远。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天开始就要讲一些进阶的东西了，是不是很兴奋呢？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;requestAnimationFrame&quot;&gt;&lt;a href=&quot;#requestAnimationFrame&quot; class=&quot;headerlink&quot; title=&quot;requestAnimat
      
    
    </summary>
    
    
      <category term="Canvas" scheme="https://www.kai666666.top/categories/Canvas/"/>
    
    
      <category term="Canvas" scheme="https://www.kai666666.top/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>Canvas系列（9）：其他API</title>
    <link href="https://www.kai666666.top/2019/06/29/Canvas%E7%B3%BB%E5%88%97%EF%BC%889%EF%BC%89%EF%BC%9A%E5%85%B6%E4%BB%96API/"/>
    <id>https://www.kai666666.top/2019/06/29/Canvas%E7%B3%BB%E5%88%97%EF%BC%889%EF%BC%89%EF%BC%9A%E5%85%B6%E4%BB%96API/</id>
    <published>2019-06-29T05:03:31.000Z</published>
    <updated>2019-06-29T06:34:38.088Z</updated>
    
    <content type="html"><![CDATA[<p>前面的内容讲了不少Canva的API，这章把剩下的API一讲吧。这个系列中以后基本不糊涉及新的API了，因为，这章完了我们就真的学完了！</p><hr><h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><p>Canvas中的阴影和CSS3中的阴影很像，通过本系列课程的学习，估计你已经发现了，CSS3的好多知识和Canvas是相通的。我们直接看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 阴影X偏移量 默认0</span></span><br><span class="line">context.shadowOffsetX=<span class="number">5</span>;</span><br><span class="line"><span class="comment">// 阴影Y偏移量 默认0</span></span><br><span class="line">context.shadowOffsetY=<span class="number">5</span>;</span><br><span class="line"><span class="comment">// 阴影颜色 默认透明</span></span><br><span class="line">context.shadowColor=<span class="string">'orange'</span>;</span><br><span class="line"><span class="comment">// 阴影模糊值 默认0</span></span><br><span class="line">context.shadowBlur=<span class="number">5</span>;</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阴影不模糊</span></span><br><span class="line">context.shadowBlur=<span class="number">0</span>;</span><br><span class="line">context.fillRect(<span class="number">80</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">context.shadowBlur=<span class="number">5</span>;</span><br><span class="line"><span class="comment">// 使用在描边上</span></span><br><span class="line">context.strokeRect(<span class="number">150</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">context.font=<span class="string">'bold 30px 微软雅黑'</span>;</span><br><span class="line">context.shadowBlur=<span class="number">3</span>;</span><br><span class="line"><span class="comment">// 使用在文字上</span></span><br><span class="line">context.fillText(<span class="string">"文字模糊"</span>, <span class="number">10</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2019/06/29/Canvas系列（9）：其他API/1.jpeg" alt="模糊"></p><p>由我们可以看到，阴影其实就是当前区域往左边偏移了一点，再往右边偏移了一点，然后给个颜色，给个模糊就可以了。当然偏移量可以是负值，表示方向，这个就不说了。同样由上我们可以知道阴影可以用在图形上也可以用在文字上，那么可以用在图片上吗？其实是不可以的，但是有方法可以，就是具有阴影地描边一个与图片大小位置全相同的矩形就可以了。</p><h2 id="globalAlpha"><a href="#globalAlpha" class="headerlink" title="globalAlpha"></a>globalAlpha</h2><p><code>globalAlpha</code>是设置全局的透明度，取值范围是<code>0~1</code>，0表示透明，1表示不透明。我们之前没有设置所绘制的图形的透明度，但是都是不透明的，所以猜都能猜出来默认值是1。它的值可以是字符串类型，也可以数值类型，我们直接在上面代码中第十行中加入代码<code>context.globalAlpha=0.5;</code>看到的效果如下：</p><p><img src="/2019/06/29/Canvas系列（9）：其他API/2.jpeg" alt="globalAlpha"></p><p>可以看到<code>globalAlpha</code>对它和它后面所绘制的图形是生效的，那么如何绘制完后恢复状态呢，还记得前面的内容吗？</p><h2 id="globalCompositeOperation"><a href="#globalCompositeOperation" class="headerlink" title="globalCompositeOperation"></a>globalCompositeOperation</h2><p><code>globalCompositeOperation</code>描述了2个图形交叉的时候是什么样子，它的值有很多，这里就盗一张很经典的图：</p><p><img src="/2019/06/29/Canvas系列（9）：其他API/3.jpeg" alt="globalCompositeOperation取值"></p><p>我们这里就给一个值为<code>xor（异或）</code>的例子吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">context.globalCompositeOperation=<span class="string">'xor'</span>;</span><br><span class="line"></span><br><span class="line">context.fillStyle=<span class="string">'orange'</span>;</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">context.fillStyle=<span class="string">'blue'</span>;</span><br><span class="line">context.fillRect(<span class="number">35</span>,<span class="number">35</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2019/06/29/Canvas系列（9）：其他API/4.jpeg" alt="xor"></p><h2 id="clearRect"><a href="#clearRect" class="headerlink" title="clearRect"></a>clearRect</h2><p>在<a href="/2019/06/16/Canvas系列（3）：路径与状态/#more">路径与状态那一章</a>我们使用clip来裁剪区域，与裁剪相似的还有一个clearRect用来清空区域，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">context.fillStyle=<span class="string">'orange'</span>;</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">context.fillStyle=<span class="string">'blue'</span>;</span><br><span class="line">context.fillRect(<span class="number">35</span>,<span class="number">35</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空一个小区域</span></span><br><span class="line">context.clearRect(<span class="number">60</span>, <span class="number">60</span>, <span class="number">25</span>, <span class="number">25</span>);</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2019/06/29/Canvas系列（9）：其他API/5.jpeg" alt="清空区域"></p><p><code>clearRect</code>用的挺多的，通常做动画的时候使用它来清空整个屏幕，然后再重新绘制图案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清空整个canvas</span></span><br><span class="line">context.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br></pre></td></tr></table></figure><h2 id="toDataURL"><a href="#toDataURL" class="headerlink" title="toDataURL"></a>toDataURL</h2><p>与上面不同的是<code>toDataURL</code>并不是context上的方法，而是canvas对象的方法，来看个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">context.fillStyle=<span class="string">'orange'</span>;</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">context.fillStyle=<span class="string">'blue'</span>;</span><br><span class="line">context.fillRect(<span class="number">35</span>,<span class="number">35</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> src = canvas.toDataURL(<span class="string">"image/png"</span>);</span><br><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = src;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(image)</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2019/06/29/Canvas系列（9）：其他API/6.jpeg" alt="toDataURL"></p><p><code>canvas.toDataURL</code>会转换为Base64格式的字符串，然后图片可以直接使用它，以显示出来。上面我们可以看到背景是不一样的，因为左侧的背景是我们通过CSS来设置的，而不是Canvas来绘制出来的。</p><hr><p>至此，我们学完了Canvas几乎全部的API，恭喜你啊。此时，你又什么感想呢？是成就满满？还是感觉并没有学到些什么？如果你感觉成就满满，说明你是真的是学到了东西，如果还感觉没学到什么，也不要灰心，因为Canvas的学习并不仅仅是API，更多的是编程的一些技巧。好多时候我们学习编程其实学的只是一些语法和API而更多的经验还需要不断地在实践中去历练，往往一些编程技巧比语法和API要更重要，现在你学习的是HTML5中的Canvas，其实安卓、Java中的Swing、C++中的MFC（都是老技术了，新技术真心快学不懂了）等等绘制图片的技能都相差无几。我们后面的课程就会深入这些技能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面的内容讲了不少Canva的API，这章把剩下的API一讲吧。这个系列中以后基本不糊涉及新的API了，因为，这章完了我们就真的学完了！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;阴影&quot;&gt;&lt;a href=&quot;#阴影&quot; class=&quot;headerlink&quot; title=&quot;阴影&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="Canvas" scheme="https://www.kai666666.top/categories/Canvas/"/>
    
    
      <category term="Canvas" scheme="https://www.kai666666.top/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>Canvas系列（8）：像素操作</title>
    <link href="https://www.kai666666.top/2019/06/29/Canvas%E7%B3%BB%E5%88%97%EF%BC%888%EF%BC%89%EF%BC%9A%E5%83%8F%E7%B4%A0%E6%93%8D%E4%BD%9C/"/>
    <id>https://www.kai666666.top/2019/06/29/Canvas%E7%B3%BB%E5%88%97%EF%BC%888%EF%BC%89%EF%BC%9A%E5%83%8F%E7%B4%A0%E6%93%8D%E4%BD%9C/</id>
    <published>2019-06-29T02:39:05.000Z</published>
    <updated>2019-06-29T04:48:32.373Z</updated>
    
    <content type="html"><![CDATA[<p>经常拍照的同学会使用图片处理软件，给自己的照片加上各种效果。图片处理软件也是软件，同样也是由代码写的，那么如何实现图片处理呢，这章我们就探讨一下这个问题。</p><hr><p>canvas中像素处理涉及到3个方法，我们先来看一下API吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取ImageDate 参数是左上角的左边(sx, sy)以及获取像素的宽度sw 和 高度sh</span></span><br><span class="line"><span class="comment">// 他返回一个ImageData对象</span></span><br><span class="line">context.getImageData(sx, sy, sw, sh);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 将处理后的ImageData设置到canvas中 由于是覆盖了canvas其中部分区域</span></span><br><span class="line"><span class="comment">// 所以用的是put而不是set（并没有setImageData，put全部覆盖就可以相当于set）</span></span><br><span class="line">context.putImageData(imagedata, dx, dy);</span><br><span class="line"><span class="comment">// 该方法还有可选参数</span></span><br><span class="line">context.putImageData(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建一个宽width 高height的ImageData对象</span></span><br><span class="line">context.createImageData(width, height);</span><br><span class="line"><span class="comment">// 也可以根据已有的ImageData对象来创建</span></span><br><span class="line">context.createImageData(imagedata);</span><br></pre></td></tr></table></figure><p>这几个API中，过来过去绕不过一个对象就是<code>ImageData</code>，<code>ImageData</code>对象到底是什么呢？他是一个描述了图片信息的对象，拥有三个属性：<code>width</code>、<code>height</code>、<code>data</code>。其中<code>width</code>、<code>height</code>就不用说了，分别是图片的宽度和高度，重点是这个<code>data</code>属性，他是一个<code>Uint8ClampedArray</code>对象，这个对象没听过？完全没问题，你就把他当做数组来处理，就可以了。这个“数组”是一个很长很长的一维数组，内容大概是<code>[r0,g0,b0,a0,r1,g1,b1,a1...]</code>这种形式的，其中<code>r0,g0,b0,a0</code>分别是图片左上角第一个像素的红绿蓝和透明度的值，后面分别是第二个像素，第三个像素等等的值。其中rgbb取值都是<code>0~255</code>，a如果是255表示不透明，之所以不按100来算是为了处理起来方便。</p><h2 id="底片效果"><a href="#底片效果" class="headerlink" title="底片效果"></a>底片效果</h2><p>在写底片效果代码之前我们先绘制一张图片。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = <span class="string">"lufei.jpeg"</span>;</span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.drawImage(image, <span class="number">0</span>, <span class="number">0</span>,image.width / <span class="number">2</span>, image.height / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们的图片比较大，我们就缩小一半来展示（虽然此时图片仍然未显示完，不过不影响），此时的效果是这个样子的：</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/1.jpeg" alt="初始值"></p><p>现在做底片处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = <span class="string">"lufei.jpeg"</span>;</span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.drawImage(image, <span class="number">0</span>, <span class="number">0</span>,image.width / <span class="number">2</span>, image.height / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">  <span class="comment">// 获取像素数据</span></span><br><span class="line">  <span class="keyword">var</span> data = imageData.data;</span><br><span class="line">  <span class="comment">// 循环每次加4表示一个一个像素的处理，这个是常用套路</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i+=<span class="number">4</span>) &#123;</span><br><span class="line">    data[i + <span class="number">0</span>] = <span class="number">255</span> - data[i + <span class="number">0</span>];</span><br><span class="line">    data[i + <span class="number">1</span>] = <span class="number">255</span> - data[i + <span class="number">1</span>];</span><br><span class="line">    data[i + <span class="number">2</span>] = <span class="number">255</span> - data[i + <span class="number">2</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置像素数据</span></span><br><span class="line">  context.putImageData(imageData, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出来的效果如下：</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/2.jpeg" alt="底片效果"></p><p>你或许会问为什么<code>putImageData</code>没有传入图片的宽度和高度呢，其实<code>ImageData</code>对象中本来就有高度和宽度，所以就无需传入了。另外还有一点需要注意，如果你在<code>getImageData</code>的时候控制台报这样的错误说明你跨域了：</p><blockquote><p>Uncaught DOMException: Failed to execute ‘getImageData’ on ‘CanvasRenderingContext2D’: The canvas has been tainted by cross-origin data.</p></blockquote><p><code>getImageData</code>不允许访问非本域的图片，解决办法是自己启动一个服务，比如是用<code>anywhere</code>，使用方法就是在你的<code>index.html</code>所在的目录下的，使用终端输入下面两行命令，这样就可以使用服务打开了，记得把图片放在同一级目录下，图片在<a href="lufei.jpeg">这里</a>，点右键另存为同级目录下就可以了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g anywhere</span><br><span class="line">anywhere</span><br></pre></td></tr></table></figure><h2 id="黑白效果"><a href="#黑白效果" class="headerlink" title="黑白效果"></a>黑白效果</h2><p>直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = <span class="string">"lufei.jpeg"</span>;</span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.drawImage(image, <span class="number">0</span>, <span class="number">0</span>,image.width / <span class="number">2</span>, image.height / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">  <span class="comment">// 获取像素数据</span></span><br><span class="line">  <span class="keyword">var</span> data = imageData.data;</span><br><span class="line">  <span class="comment">// 循环每次加4表示一个一个像素的过，这个是常用套路</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i+=<span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> average = ( data[i + <span class="number">0</span>] + data[i + <span class="number">1</span>] + data[i + <span class="number">2</span>] ) / <span class="number">3</span>;</span><br><span class="line">    data[i + <span class="number">0</span>] = average;</span><br><span class="line">    data[i + <span class="number">1</span>] = average;</span><br><span class="line">    data[i + <span class="number">2</span>] = average;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置像素数据</span></span><br><span class="line">  context.putImageData(imageData, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如你看到的，像素处理都是一个模式，只是把中间处理像素的算法换了一下，此时的效果如下，是不是很酷？</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/3.jpeg" alt="黑白效果"></p><p>当然黑白效果还可以使用加权平均数来处理，这种网上推崇的比较多，毕竟上面这种比较泛白，处理起来也很简单，只需要把计算<code>average</code>的代码换一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> average = data[i + <span class="number">0</span>] * <span class="number">0.3</span> + data[i + <span class="number">1</span>] * <span class="number">0.6</span> + data[i + <span class="number">2</span>] * <span class="number">0.1</span>;</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/2019/06/29/Canvas系列（8）：像素操作/4.jpeg" alt="加权后的黑白效果"></p><h2 id="变亮与变暗"><a href="#变亮与变暗" class="headerlink" title="变亮与变暗"></a>变亮与变暗</h2><p>变量就是每个像素的颜色加上一个值，直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = <span class="string">"lufei.jpeg"</span>;</span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.drawImage(image, <span class="number">0</span>, <span class="number">0</span>,image.width / <span class="number">2</span>, image.height / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">  <span class="keyword">var</span> data = imageData.data;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i+=<span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> brightness = <span class="number">50</span>;</span><br><span class="line">    data[i + <span class="number">0</span>] += brightness;</span><br><span class="line">    data[i + <span class="number">1</span>] += brightness;</span><br><span class="line">    data[i + <span class="number">2</span>] += brightness;</span><br><span class="line">  &#125;</span><br><span class="line">  context.putImageData(imageData, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的效果如下：</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/5.jpeg" alt="变亮"></p><p>你猜猜变暗是怎么处理的？没错就是减去一个值，你挺聪明的！！！直接修改<code>var brightness = -50;</code>，效果如下：</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/6.jpeg" alt="变暗"></p><h2 id="复古效果"><a href="#复古效果" class="headerlink" title="复古效果"></a>复古效果</h2><p>复古效果算法比较复杂，需要每一个颜色做加权处理，其算法是别人研究好久得出的，我们都是站在巨人的肩膀上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = <span class="string">"lufei.jpeg"</span>;</span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.drawImage(image, <span class="number">0</span>, <span class="number">0</span>,image.width / <span class="number">2</span>, image.height / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">  <span class="keyword">var</span> data = imageData.data;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i+=<span class="number">4</span>) &#123;</span><br><span class="line">    data[i + <span class="number">0</span>] = <span class="number">0.39</span> * data[i + <span class="number">0</span>] + <span class="number">0.76</span> * data[i + <span class="number">1</span>] + <span class="number">0.18</span> * data[i + <span class="number">2</span>];</span><br><span class="line">    data[i + <span class="number">1</span>] = <span class="number">0.35</span> * data[i + <span class="number">0</span>] + <span class="number">0.68</span> * data[i + <span class="number">1</span>] + <span class="number">0.16</span> * data[i + <span class="number">2</span>];;</span><br><span class="line">    data[i + <span class="number">2</span>] = <span class="number">0.27</span> * data[i + <span class="number">0</span>] + <span class="number">0.53</span> * data[i + <span class="number">1</span>] + <span class="number">0.13</span> * data[i + <span class="number">2</span>];;</span><br><span class="line">  &#125;</span><br><span class="line">  context.putImageData(imageData, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/7.jpeg" alt="复古效果"></p><h2 id="蒙层"><a href="#蒙层" class="headerlink" title="蒙层"></a>蒙层</h2><p>蒙层就是某一个色道取平均值，另外2个色道为0就可以了，以红色蒙层为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = <span class="string">"lufei.jpeg"</span>;</span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.drawImage(image, <span class="number">0</span>, <span class="number">0</span>,image.width / <span class="number">2</span>, image.height / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">  <span class="keyword">var</span> data = imageData.data;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i+=<span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> average = ( data[i + <span class="number">0</span>] + data[i + <span class="number">1</span>] + data[i + <span class="number">2</span>] ) / <span class="number">3</span>;</span><br><span class="line">    data[i + <span class="number">0</span>] = average;</span><br><span class="line">    data[i + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    data[i + <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  context.putImageData(imageData, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/8.jpeg" alt="红色蒙层"></p><p>绿色蒙层和蓝色蒙层我相信你也会了，这里就不再给代码了。</p><h2 id="透明效果"><a href="#透明效果" class="headerlink" title="透明效果"></a>透明效果</h2><p>我们说了这么多，都是以色道为例的，从来没有涉及到透明度，现在就给一个透明度的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = <span class="string">"lufei.jpeg"</span>;</span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.drawImage(image, <span class="number">0</span>, <span class="number">0</span>,image.width / <span class="number">2</span>, image.height / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">  <span class="keyword">var</span> data = imageData.data;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i+=<span class="number">4</span>) &#123;</span><br><span class="line">    data[i + <span class="number">3</span>] = <span class="number">0.5</span> * data[i + <span class="number">3</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  context.putImageData(imageData, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/9.jpeg" alt="透明效果"></p><p>我们这里给的透明度细数是0.5，所以透明度变为原来的50%，你也可以修改为自己喜欢的数值。</p><h2 id="创建ImageData"><a href="#创建ImageData" class="headerlink" title="创建ImageData"></a>创建ImageData</h2><p>上面我们一直在玩<code>getImageData</code>和<code>putImageData</code>，至于<code>createImageData</code>都没有说过，其实这个用的也并不多，这里给一个例子结束本章吧：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imageData = context.createImageData(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> data = imageData.data;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i+=<span class="number">4</span>) &#123;</span><br><span class="line">  data[i + <span class="number">0</span>] = <span class="number">255</span>;</span><br><span class="line">  <span class="comment">// 下面这行很重要，默认创建后rgba的值都是0，所以也就是透明的</span></span><br><span class="line">  data[i + <span class="number">3</span>] = <span class="number">255</span>;</span><br><span class="line">&#125;</span><br><span class="line">context.putImageData(imageData, <span class="number">10</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><p>效果如下，是不是又学会了一种画正方形的方法了？</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/10.jpeg" alt="createImageData"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经常拍照的同学会使用图片处理软件，给自己的照片加上各种效果。图片处理软件也是软件，同样也是由代码写的，那么如何实现图片处理呢，这章我们就探讨一下这个问题。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;canvas中像素处理涉及到3个方法，我们先来看一下API吧：&lt;/p&gt;
&lt;figure cla
      
    
    </summary>
    
    
      <category term="Canvas" scheme="https://www.kai666666.top/categories/Canvas/"/>
    
    
      <category term="Canvas" scheme="https://www.kai666666.top/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>证明0.999999999...等于1</title>
    <link href="https://www.kai666666.top/2019/06/29/%E8%AF%81%E6%98%8E0-999999999-%E7%AD%89%E4%BA%8E1/"/>
    <id>https://www.kai666666.top/2019/06/29/%E8%AF%81%E6%98%8E0-999999999-%E7%AD%89%E4%BA%8E1/</id>
    <published>2019-06-29T01:34:37.000Z</published>
    <updated>2019-06-29T04:32:59.650Z</updated>
    
    <content type="html"><![CDATA[<p>最近看了一本书叫《极简算法史》，非常薄的一本书，里面的内容也是挺有意思的，现在分享一道证明题<strong>如何证明无限循环小数0.999999999…等于1</strong>，没错是等于1，高数上就是这么写的。</p><p><img src="/2019/06/29/证明0-999999999-等于1/1.jpg" alt="《极简算法史》"></p><hr><p>设<code>x = 0.999999999...</code>，那么<code>10x = 9.999999999...</code>。如果我们从10x减去x，可以得到：</p><blockquote><p>10x - x = 9x = 9.999999999… - 0.999999999… = 9.000000000…</p></blockquote><p>也就是<code>9x = 9.000000000...</code>因此<code>x = 1</code>，证明完毕。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近看了一本书叫《极简算法史》，非常薄的一本书，里面的内容也是挺有意思的，现在分享一道证明题&lt;strong&gt;如何证明无限循环小数0.999999999…等于1&lt;/strong&gt;，没错是等于1，高数上就是这么写的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/06/29/证
      
    
    </summary>
    
    
      <category term="算法" scheme="https://www.kai666666.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://www.kai666666.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Canvas系列（7）：形变</title>
    <link href="https://www.kai666666.top/2019/06/22/Canvas%E7%B3%BB%E5%88%97%EF%BC%887%EF%BC%89%EF%BC%9A%E5%BD%A2%E5%8F%98/"/>
    <id>https://www.kai666666.top/2019/06/22/Canvas%E7%B3%BB%E5%88%97%EF%BC%887%EF%BC%89%EF%BC%9A%E5%BD%A2%E5%8F%98/</id>
    <published>2019-06-22T05:54:04.000Z</published>
    <updated>2019-06-29T02:37:39.751Z</updated>
    
    <content type="html"><![CDATA[<p>CSS3中有一个很重要的点，就是形变。他分为移动，缩放、旋转和倾斜。在Canvas中，形变都是基于坐标做的，所以，并没有直接的API支持倾斜，其它几种都是有独立的API来支持，命名和CSS是一样的。今天我们就看一下这几种吧。</p><hr><h2 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h2><p>平移是最简单的一种形变，我们直接来看一个例子吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// x平移20px y平移20px</span></span><br><span class="line">context.translate(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">context.translate(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/2019/06/22/Canvas系列（7）：形变/1.jpeg" alt="平移形变"></p><p>通过上面我们可以看到，<strong>平移（形变）移动的是坐标系，移动以后会以新的坐标系进行绘图，当多次平移（形变）以后每次都会以上一次的坐标系为准。</strong>此时你可能会问，那形变不是很危险吗，每次使用了形变就会使用新的坐标系，以后所有绘制的图片都会受到影响？没错是这样的，那改怎么解决呢？还记得之前的<a href="/2019/06/16/Canvas系列（3）：路径与状态/#more">状态</a>吗？现在给一个简单的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 形变前往往需要保存状态</span></span><br><span class="line">context.save();</span><br><span class="line"></span><br><span class="line">context.translate(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 形变结束，恢复之前的状态</span></span><br><span class="line">context.restore();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时以之前的坐标系绘制</span></span><br><span class="line">context.beginPath();</span><br><span class="line">context.fillStyle=<span class="string">'red'</span>;</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/2019/06/22/Canvas系列（7）：形变/2.jpeg" alt="使用保存状态"></p><h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><p>缩放也是相对于坐标系来说的，看一下这个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">context.strokeStyle=<span class="string">'red'</span>;</span><br><span class="line">context.lineWidth=<span class="number">10</span>;</span><br><span class="line">context.strokeRect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">context.beginPath();</span><br><span class="line"><span class="comment">// x是原来的1.5倍 y是原来的1.5倍</span></span><br><span class="line">context.save();</span><br><span class="line">context.scale(<span class="number">1.5</span>, <span class="number">1.5</span>);</span><br><span class="line">context.strokeStyle=<span class="string">'blue'</span>;</span><br><span class="line">context.strokeRect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">context.restore();</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/2019/06/22/Canvas系列（7）：形变/3.jpeg" alt="缩放"></p><p>可以看到，缩放改变的也是坐标系，在新的坐标系系中，宽度也放大了，一个像素已经不再是真正的一个像素了，而是放大以后的大小。所以可以看到都是10个像素的边框，宽度也不一样了。需要注意的是缩放的值大于1的时候是放大，0~1之间是缩小，1和原来是一样大的。</p><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">context.strokeStyle=<span class="string">'red'</span>;</span><br><span class="line">context.lineWidth=<span class="number">10</span>;</span><br><span class="line">context.strokeRect(<span class="number">80</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">context.beginPath();</span><br><span class="line"><span class="comment">// x是原来的1.5倍 y是原来的1.5倍</span></span><br><span class="line">context.save();</span><br><span class="line">context.rotate(<span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">45</span>);</span><br><span class="line"></span><br><span class="line">context.strokeStyle=<span class="string">'blue'</span>;</span><br><span class="line">context.strokeRect(<span class="number">80</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">context.restore();</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/2019/06/22/Canvas系列（7）：形变/4.jpeg" alt="旋转"></p><p>可以看到旋转是基于<strong>坐标的原点的</strong>，如果不希望按照原点旋转的话，可以先平移再旋转。另外旋转也是根据弧度来旋转的而不是角度。</p><h2 id="矩阵变换"><a href="#矩阵变换" class="headerlink" title="矩阵变换"></a>矩阵变换</h2><p>矩阵变换使用的API是<code>context.transform(a, b, c, d, e, f);</code>，所对应的矩阵的位置是下面这个样子：</p><p>$$\left[<br>\begin{matrix}<br>a &amp; c &amp; e \\<br>b &amp; d &amp; f \\<br>0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right] $$</p><p>什么，看不懂？前方高能！！！多年前欠下的线性代数债，现在要还了。</p><p>对于形变，假设开始的坐标是($x_0$,$y_0$)，结束的坐标是($x_1$,$y_1$)，那么假如($x_1$,$y_1$)是$x_0$平移了e个单位，$y_0$平移了f个单位后得到的结果，那么$x_1$和$y_1$就等于如下：<br>$$<br>  x_1 = x_0 + e \\<br>  y_1 = y_0 + f<br>$$</p><p>使用矩阵的笛卡尔积（左边值的第几行第几列中的值，就是右边第一个矩阵的第几行与第二个矩阵的第几列的乘积之和就是）的样子就是这个样子：</p><p>$$\left[<br>\begin{matrix}<br>x_1 \\<br>y_1 \\<br>1 \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; e \\<br>0 &amp; 1 &amp; f \\<br>0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>x_0 \\<br>y_0 \\<br>1 \\<br>\end{matrix}<br>\right] $$</p><p>上面矩阵是平移时候的矩阵，将中间的矩阵带入矩阵的API有：<code>context.transform(1, 0, 0, 1, e, f);</code>。也就是说<code>context.translate(e, f);</code>等价于<code>context.transform(1, 0, 0, 1, e, f);</code>。</p><p>对于缩放，同样假设开始的坐标是($x_0$,$y_0$)，结束的坐标是($x_1$,$y_1$)，那么假如$x_0$缩放了a个单位，$y_0$缩放d个单位，那么$x_1$和$y_1$就等于如下：<br>$$<br>  x_1 = a * x_0 \\<br>  y_1 = d * y_0<br>$$</p><p>使用矩阵的笛卡尔积就是这个样子：</p><p>$$\left[<br>\begin{matrix}<br>x_1 \\<br>y_1 \\<br>1 \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>a &amp; 0 &amp; 0 \\<br>0 &amp; d &amp; 0 \\<br>0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>x_0 \\<br>y_0 \\<br>1 \\<br>\end{matrix}<br>\right] $$</p><p>也就是说<code>context.scale(a, d);</code>等价于<code>context.transform(a, 0, 0, d, 0, 0);</code>。</p><p>旋转有点复杂，坐标($x_0$,$y_0$)和($x_1$,$y_1$)的意义和上面一下，旋转有如下公式（可以自行推到，并不难）：</p><p>$$<br>  x_1 = x_0 * cos\theta - y_0 * sin\theta \\<br>  y_1 = x_0 * sin\theta + y_0 * cos\theta<br>$$</p><p>使用矩阵的笛卡尔积就是这个样子：</p><p>$$\left[<br>\begin{matrix}<br>x_1 \\<br>y_1 \\<br>1 \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>cos\theta &amp; -sin\theta &amp; 0 \\<br>sin\theta &amp; cos\theta &amp; 0 \\<br>0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>x_0 \\<br>y_0 \\<br>1 \\<br>\end{matrix}<br>\right] $$</p><p>也就是说<code>context.rotate(angle);</code>等价于<code>context.transform(cos(angle), sin(angle), -sin(angle), cos(angle), 0, 0);</code>。</p><p>所以我们上面的几个例子，我们做下面的等价替换，效果是一样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">context.translate(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">context.transform(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">context.scale(<span class="number">1.5</span>, <span class="number">1.5</span>);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">context.transform(<span class="number">1.5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.5</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">context.rotate(<span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">45</span>);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> theta = <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">45</span>;</span><br><span class="line">context.transform(<span class="built_in">Math</span>.cos(theta), <span class="built_in">Math</span>.sin(theta), - <span class="built_in">Math</span>.sin(theta), <span class="built_in">Math</span>.cos(theta), <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>除了<code>transform</code>外还有一个矩阵变换的方法叫<code>setTransform</code>，参数是一模一样的<code>context.setTransform(a, b, c, d, e, f);</code>。两者的区别是后者始终以最初的坐标做为参照，而<code>transform</code>以上次变换后的坐标做为参照（类似于前面的三个API）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSS3中有一个很重要的点，就是形变。他分为移动，缩放、旋转和倾斜。在Canvas中，形变都是基于坐标做的，所以，并没有直接的API支持倾斜，其它几种都是有独立的API来支持，命名和CSS是一样的。今天我们就看一下这几种吧。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;平移&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="Canvas" scheme="https://www.kai666666.top/categories/Canvas/"/>
    
    
      <category term="Canvas" scheme="https://www.kai666666.top/tags/Canvas/"/>
    
  </entry>
  
</feed>
