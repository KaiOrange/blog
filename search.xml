<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>10分钟开发一个npm全局依赖包（下）</title>
      <link href="/2019/09/07/10%E5%88%86%E9%92%9F%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAnpm%E5%85%A8%E5%B1%80%E4%BE%9D%E8%B5%96%E5%8C%85%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2019/09/07/10%E5%88%86%E9%92%9F%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAnpm%E5%85%A8%E5%B1%80%E4%BE%9D%E8%B5%96%E5%8C%85%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://kai666666.top/2019/09/06/10分钟开发一个npm全局依赖包（上）/#more" target="_blank" rel="noopener">上一篇</a>中我们用了10分钟实现了一个完整的古诗词命令行工具，本章中我们主要简绍2个命令行工具开发中常用的库，整个代码大概用时20分钟。</p><hr><h2 id="修改命令行颜色"><a href="#修改命令行颜色" class="headerlink" title="修改命令行颜色"></a>修改命令行颜色</h2><p>第一个简绍的库就是<a href="https://github.com/jaywcjlove/colors-cli" target="_blank" rel="noopener">‘colors-cli’</a>，他支持修改打印出来的文字的样式。<br>首先安装一下这个依赖<code>npm install colors-cli</code>，新建一个文件<code>test-color.js</code>，测试一下它的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="built_in">require</span>(<span class="string">'colors-cli/safe'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(color.red.bold(<span class="string">'Error!'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(color.yellow.magenta_b(<span class="string">'Warning'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(color.blue.underline(<span class="string">'Notice'</span>));</span><br></pre></td></tr></table></figure><p>引入<code>color</code>库的时候可以使用<code>var color = require(&#39;colors-cli/safe&#39;)</code>，也可以使用<code>var color = require(&#39;colors-cli&#39;)</code>，推荐使用前者，因为前者可以支持链式调用，使用起来更方便。上面运行结果如下：</p><p><img src="/2019/09/07/10分钟开发一个npm全局依赖包（下）/1.png" alt="修改颜色"></p><p>他是怎么实现的呢？其实是把文字用特殊符号包了一层，命令行对这种特殊符号会处理成样式，就比如<code>color.red.bold(&#39;Error!&#39;)</code>其实最后会返回一个字符串<code>&#39;[1m[31m[31mError![0m[0m[0m&#39;</code>，所以上面三行log代码和下面的结果是一样的，你可以直接用node运行一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'[1m[31m[31mError![0m[0m[0m'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'[45m[33m[33mWarning[0m[0m[0m'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'[4m[34m[34mNotice[0m[0m[0m'</span>);</span><br></pre></td></tr></table></figure><h2 id="处理用户输入"><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h2><p>在使用命令行的时候往往需要根据用户的参数给出友好的提示，<a href="https://github.com/yargs/yargs" target="_blank" rel="noopener">yargs</a>就是处理这种情况的一个优质的库。<br>有关<code>yargs</code>的具体使用可以直接看官方的文档，这里就不展开说了。现在我们做一个需求，就是根据用户传入的值，来改变诗词、作者、来源的颜色。代码大致是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"><span class="keyword">const</span> color = <span class="built_in">require</span>(<span class="string">'colors-cli/safe'</span>);</span><br><span class="line"><span class="keyword">let</span> argv = <span class="built_in">require</span>(<span class="string">'yargs'</span>)</span><br><span class="line">  .option(<span class="string">'ps'</span>, &#123;</span><br><span class="line">    alias: <span class="string">'poem-style'</span>,</span><br><span class="line">    demand: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'blue_bt'</span>,</span><br><span class="line">    describe: <span class="string">'诗词样式，如--ps=blue_bt'</span>,</span><br><span class="line">    type: <span class="string">'string'</span></span><br><span class="line">  &#125;).option(<span class="string">'as'</span>, &#123;</span><br><span class="line">    alias: <span class="string">'author-style'</span>,</span><br><span class="line">    demand: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'green_bt'</span>,</span><br><span class="line">    describe: <span class="string">'作者样式，如--as=green_bt'</span>,</span><br><span class="line">    type: <span class="string">'string'</span></span><br><span class="line">  &#125;).option(<span class="string">'os'</span>, &#123;</span><br><span class="line">    alias: <span class="string">'origin-style'</span>,</span><br><span class="line">    demand: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">'cyan'</span>,</span><br><span class="line">    describe: <span class="string">'来源颜色，如--os=cyan'</span>,</span><br><span class="line">    type: <span class="string">'string'</span></span><br><span class="line">  &#125;).option(<span class="string">'h'</span>, &#123;</span><br><span class="line">    alias: <span class="string">'help'</span>,</span><br><span class="line">    demand: <span class="literal">false</span>,</span><br><span class="line">    boolean: <span class="literal">true</span>,</span><br><span class="line">    describe: <span class="string">'帮助'</span>,</span><br><span class="line">  &#125;).option(<span class="string">'v'</span>, &#123;</span><br><span class="line">    alias: <span class="string">'version'</span>,</span><br><span class="line">    demand: <span class="literal">false</span>,</span><br><span class="line">    boolean: <span class="literal">true</span>,</span><br><span class="line">    describe: <span class="string">'版本号'</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .argv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColorMethod</span>(<span class="params">commandStr = <span class="string">''</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> command = commandStr.replace(<span class="regexp">/\,/g</span>,<span class="string">'.'</span>).split(<span class="string">"."</span>);</span><br><span class="line">  <span class="keyword">let</span> colorMethod = color</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; command.length; i++) &#123;</span><br><span class="line">    colorMethod = colorMethod[command[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> colorMethod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'https://api.gushi.ci/all.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = response.data || &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> signature = data.author + <span class="string">'《'</span> + data.origin + <span class="string">'》'</span>;</span><br><span class="line">    <span class="keyword">let</span> prefix =  <span class="string">'———— '</span>;</span><br><span class="line">    <span class="keyword">let</span> paddingSpacing = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> spacingLength = data.content.length * <span class="number">2</span> - signature.length * <span class="number">2</span> - prefix.length;</span><br><span class="line">    <span class="keyword">if</span> (spacingLength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.origin.indexOf(<span class="string">'·'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">        spacingLength++;</span><br><span class="line">      &#125;</span><br><span class="line">      paddingSpacing = <span class="keyword">new</span> <span class="built_in">Array</span>(spacingLength).fill(<span class="string">' '</span>).join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    signature = getColorMethod(argv.as)(data.author) + <span class="string">'《'</span> + getColorMethod(argv.os)(data.origin) + <span class="string">'》'</span>;</span><br><span class="line">    signature = (paddingSpacing + prefix) + signature</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    <span class="built_in">console</span>.log(getColorMethod(argv.ps)(data.content));</span><br><span class="line">    <span class="built_in">console</span>.log(signature);</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2019/09/07/10分钟开发一个npm全局依赖包（下）/2.png" alt="支持修改颜色"></p><p>代码还是在可以控制的行数范围内，上述代码中4~34行，是<code>yargs</code>的处理，也是通用的一种写法，这里面有2个属性比较特殊一个是<code>help</code>另一个是<code>version</code>，从下面的结果我们可以看到，当输入这两个的时候都会阻止代码的执行，并直接返回相应的信息，如运行<code>node index -h</code>会返回帮助信息、<code>node index -v</code>会返回版本信息。在代码中我们可以使用<code>argv.ps</code>、<code>argv.as</code>、<code>argv.os</code>等（其实就是option函数的第一个值）来获取参数的值。<code>getColorMethod</code>运行使用英文的点或者逗号来拆分以添加多个样式。</p><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><p>上述代码中<code>getColorMethod</code>方法其实可以抽取出去，另外<code>color</code>库并不是支持输入任何参数，比如你输入<code>node index --as=123</code>就会报错，因为123并不是<code>color</code>所支持的样式，所以我们有必要对颜色相关的操作抽取成一个文件，另外检测一下<code>color</code>库是否支持这个颜色，不支持的话给出有好地提示，现在新建<code>color-util.js</code>文件。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> color = <span class="built_in">require</span>(<span class="string">'colors-cli/safe'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> COLOR_TITLE = [<span class="string">'样式'</span>,<span class="string">'前景色'</span>,<span class="string">'背景色'</span>,<span class="string">'前景色（明亮）'</span>,<span class="string">'背景色（明亮）'</span>];</span><br><span class="line"><span class="keyword">const</span> COLOR_STYLE = [<span class="string">'bold'</span>, <span class="string">'faint'</span>, <span class="string">'italic'</span>, <span class="string">'underline'</span>, <span class="string">'blink'</span>, <span class="string">'overline'</span>, <span class="string">'inverse'</span>, <span class="string">'conceal'</span>, <span class="string">'strike'</span>];</span><br><span class="line"><span class="keyword">const</span> COLOR_FOREGROUND = [<span class="string">'black'</span>, <span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'yellow'</span>, <span class="string">'blue'</span>, <span class="string">'magenta'</span>, <span class="string">'cyan'</span>, <span class="string">'white'</span>];</span><br><span class="line"><span class="keyword">const</span> COLOR_BACKGROUND = [<span class="string">'black_b'</span>, <span class="string">'red_b'</span>, <span class="string">'green_b'</span>, <span class="string">'yellow_b'</span>, <span class="string">'blue_b'</span>, <span class="string">'magenta_b'</span>, <span class="string">'cyan_b'</span>, <span class="string">'white_b'</span>];</span><br><span class="line"><span class="keyword">const</span> COLOR_FOREGROUND_BRIGHT = [<span class="string">'black_bt'</span>, <span class="string">'red_bt'</span>, <span class="string">'green_bt'</span>, <span class="string">'yellow_bt'</span>, <span class="string">'blue_bt'</span>, <span class="string">'magenta_bt'</span>, <span class="string">'cyan_bt'</span>, <span class="string">'white_bt'</span>];</span><br><span class="line"><span class="keyword">const</span> COLOR_BACKGROUND_BRIGHT = [<span class="string">'black_bbt'</span>, <span class="string">'red_bbt'</span>, <span class="string">'green_bbt'</span>, <span class="string">'yellow_bbt'</span>, <span class="string">'blue_bbt'</span>, <span class="string">'magenta_bbt'</span>, <span class="string">'cyan_bbt'</span>, <span class="string">'white_bbt'</span>];</span><br><span class="line"><span class="keyword">const</span> STYLE = [ COLOR_STYLE, COLOR_FOREGROUND, COLOR_BACKGROUND, COLOR_FOREGROUND_BRIGHT, COLOR_BACKGROUND_BRIGHT];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printSupportStyle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'所支持的样式有：\n'</span>);</span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; COLOR_TITLE.length; i++) &#123;</span><br><span class="line">    message = STYLE[i].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">pre,next</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> pre + color[next](next) + <span class="string">' '</span></span><br><span class="line">    &#125;, COLOR_TITLE[i] + <span class="string">"： "</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 换行</span></span><br><span class="line">  <span class="built_in">console</span>.log();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStyle</span>(<span class="params">styleName</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> STYLE.join(<span class="string">','</span>).split(<span class="string">','</span>).indexOf(styleName) !== <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColorMethod</span>(<span class="params">commandStr = <span class="string">''</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> command = commandStr.replace(<span class="regexp">/\,/g</span>,<span class="string">'.'</span>).split(<span class="string">"."</span>);</span><br><span class="line">  <span class="keyword">let</span> colorMethod = color</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; command.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (checkStyle(command[i])) &#123;</span><br><span class="line">      colorMethod = colorMethod[command[i]];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'\n不支持的样式：'</span> + command[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> colorMethod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  color,</span><br><span class="line">  printSupportStyle,</span><br><span class="line">  checkStyle,</span><br><span class="line">  getColorMethod</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求接口的地方我们也可以封装成一个方法，这样可以减少耦合，另外也可以支持模块直接引入（直接使用require引入）。新建<code>random-poem.js</code>文件，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    axios.get(<span class="string">'https://api.gushi.ci/all.json'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">      resolve(response.data || &#123;&#125;)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>)</span>&#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为网络请求是异步的，所以需要使用回调或者<code>Promise</code>来处理，我们这里就使用<code>Promise</code>吧。此时还需要修改一下<code>package.json</code>文件，添加<code>main</code>字段，该字段是用来告诉直接模块引入的时候引入哪个文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"poem-cli"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"命令行随机打印一句诗词。"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"random-poem.js"</span>,</span><br><span class="line">  <span class="attr">"bin"</span>: &#123;</span><br><span class="line">    <span class="attr">"poem-cli"</span>: <span class="string">"index.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node index"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"诗词"</span>,</span><br><span class="line">    <span class="string">"命令行"</span>,</span><br><span class="line">    <span class="string">"有趣"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Orange"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"axios"</span>: <span class="string">"^0.19.0"</span>,</span><br><span class="line">    <span class="attr">"colors-cli"</span>: <span class="string">"^1.0.26"</span>,</span><br><span class="line">    <span class="attr">"yargs"</span>: <span class="string">"^14.0.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时需要注意第5行代码。最后修改<code>index.js</code>文件，使用这些封装的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> colorUtil = <span class="built_in">require</span>(<span class="string">'./color-util'</span>)</span><br><span class="line"><span class="keyword">const</span> randomPoem = <span class="built_in">require</span>(<span class="string">'./random-poem'</span>)</span><br><span class="line"><span class="keyword">let</span> argv = <span class="built_in">require</span>(<span class="string">'yargs'</span>)</span><br><span class="line">    .option(<span class="string">'s'</span>, &#123;</span><br><span class="line">      alias: <span class="string">'style'</span>,</span><br><span class="line">      demand: <span class="literal">false</span>,</span><br><span class="line">      boolean: <span class="literal">true</span>,</span><br><span class="line">      describe: <span class="string">'显示所支持的样式'</span>,</span><br><span class="line">    &#125;).option(<span class="string">'ps'</span>, &#123;</span><br><span class="line">        alias: <span class="string">'poem-style'</span>,</span><br><span class="line">        demand: <span class="literal">false</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'blue_bt'</span>,</span><br><span class="line">        describe: <span class="string">'诗词样式，如--ps=blue_bt'</span>,</span><br><span class="line">        type: <span class="string">'string'</span></span><br><span class="line">    &#125;).option(<span class="string">'as'</span>, &#123;</span><br><span class="line">        alias: <span class="string">'author-style'</span>,</span><br><span class="line">        demand: <span class="literal">false</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'green_bt'</span>,</span><br><span class="line">        describe: <span class="string">'作者样式，如--as=green_bt'</span>,</span><br><span class="line">        type: <span class="string">'string'</span></span><br><span class="line">    &#125;).option(<span class="string">'os'</span>, &#123;</span><br><span class="line">      alias: <span class="string">'origin-style'</span>,</span><br><span class="line">      demand: <span class="literal">false</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'cyan'</span>,</span><br><span class="line">      describe: <span class="string">'来源颜色，如--os=cyan'</span>,</span><br><span class="line">      type: <span class="string">'string'</span></span><br><span class="line">    &#125;).option(<span class="string">'h'</span>, &#123;</span><br><span class="line">      alias: <span class="string">'help'</span>,</span><br><span class="line">      demand: <span class="literal">false</span>,</span><br><span class="line">      boolean: <span class="literal">true</span>,</span><br><span class="line">      describe: <span class="string">'帮助'</span>,</span><br><span class="line">    &#125;).option(<span class="string">'v'</span>, &#123;</span><br><span class="line">      alias: <span class="string">'version'</span>,</span><br><span class="line">      demand: <span class="literal">false</span>,</span><br><span class="line">      boolean: <span class="literal">true</span>,</span><br><span class="line">      describe: <span class="string">'版本号'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .argv;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示所支持的样式</span></span><br><span class="line"><span class="keyword">if</span> (!!argv.s) &#123;</span><br><span class="line">  colorUtil.printSupportStyle();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  randomPoem().then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> signature = data.author + <span class="string">'《'</span> + data.origin + <span class="string">'》'</span>;</span><br><span class="line">    <span class="keyword">let</span> prefix =  <span class="string">'———— '</span>;</span><br><span class="line">    <span class="keyword">let</span> paddingSpacing = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> spacingLength = data.content.length * <span class="number">2</span> - signature.length * <span class="number">2</span> - prefix.length;</span><br><span class="line">    <span class="keyword">if</span> (spacingLength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.origin.indexOf(<span class="string">'·'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">        spacingLength++;</span><br><span class="line">      &#125;</span><br><span class="line">      paddingSpacing = <span class="keyword">new</span> <span class="built_in">Array</span>(spacingLength).fill(<span class="string">' '</span>).join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 添加颜色</span></span><br><span class="line">      signature = colorUtil.getColorMethod(argv.as)(data.author) + <span class="string">'《'</span> + colorUtil.getColorMethod(argv.os)(data.origin) + <span class="string">'》'</span>;</span><br><span class="line">      signature = (paddingSpacing + prefix) + signature</span><br><span class="line">      <span class="built_in">console</span>.log();</span><br><span class="line">      <span class="built_in">console</span>.log(colorUtil.getColorMethod(argv.ps)(data.content));</span><br><span class="line">      <span class="built_in">console</span>.log(signature);</span><br><span class="line">      <span class="built_in">console</span>.log();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// 错误处理</span></span><br><span class="line">      <span class="built_in">console</span>.log(colorUtil.color.red(error.message));</span><br><span class="line">      colorUtil.printSupportStyle();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下输入不支持的情况，你会发现提示的信息已经很友好了：</p><p><img src="/2019/09/07/10分钟开发一个npm全局依赖包（下）/3.png" alt="完整版"></p><p>最后把多余的<code>test-color.js</code>文件删除了就可以提交了。</p><p>就这样我们把一个功能完善的古诗词命令行工具做完了，需要注意一点再次提交的时候，也就是运行<code>npm publish</code>前，需要修改一下<code>package.json</code>中的<code>version</code>字段，而且必须大于当前的版本号，建议使用<code>npm version 1.0.1</code>这样的命令去修改，因为该命令会顺带把<code>package-lock.json</code>文件中的版本号也改了。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10分钟开发一个npm全局依赖包（上）</title>
      <link href="/2019/09/06/10%E5%88%86%E9%92%9F%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAnpm%E5%85%A8%E5%B1%80%E4%BE%9D%E8%B5%96%E5%8C%85%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2019/09/06/10%E5%88%86%E9%92%9F%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAnpm%E5%85%A8%E5%B1%80%E4%BE%9D%E8%B5%96%E5%8C%85%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>今天在逛网页的时候看到了一个<a href="https://gushi.ci/" target="_blank" rel="noopener">古诗词的API</a>，然后突发奇想，用了10分钟的时间做了一款npm全局依赖包。你可以使用<code>npm install -g pome-cli</code>来先玩一玩。有好东西当然要跟大家分享一下啦，现在从0开始给大家简绍打造这款全局依赖包。</p><hr><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>首先创建一个文件夹，比如<code>poem-cli</code>（这里以<code>poem-cli</code>来讲，在你开发的时候换一个名字，因为这个名字已经被我注册了），然后进入该文件夹，命令行输入<code>npm init</code>，里面的选项根据自己的喜好来设置就可以了，默认的话回车就行。等命令行输完以后，会在该目录下自动创建一个<code>package.json</code>文件，这个文件大家一定不陌生吧。</p><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>由于我们的数据是走网络请求的，<a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a>是一个可以在浏览器环境和Node环境同时运行的一个HTTP框架。我们这里也引入这个库来简化我们的发送请求过程，命令行输入<code>npm install axios</code>。新建一个<code>index.js</code>文件写入请求的代码，由于我们目前对API的结构不太了解，就直接打印出返回的数据就行了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'https://api.gushi.ci/all.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.data || &#123;&#125;)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>在命令行输入<code>node index</code>来运行一下上面的代码，可以看到打印的结果如下，当然具体的内容可能有点不太一样：</p><p><img src="/2019/09/06/10分钟开发一个npm全局依赖包（上）/1.png" alt="首次运行"></p><p>我们可以看到返回的数据是一个JSON对象，那么我们就好处理了，只要稍微修改一下代码，让显示的更好看一点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'https://api.gushi.ci/all.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = response.data || &#123;&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(data.content);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"———— "</span> + data.author + <span class="string">"《"</span> + data.origin + <span class="string">"》"</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>此时的效果如下：</p><p><img src="/2019/09/06/10分钟开发一个npm全局依赖包（上）/2.png" alt="处理后的效果"></p><p>当然我们经常看到的诗句，署名往往是右对齐的，我们这里也稍微处理一下对于没有诗句长的署名，让署名右对齐。要想右对齐其实很简单就是左边加空格填充呗：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'https://api.gushi.ci/all.json'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data = response.data || &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> signature = data.author + <span class="string">'《'</span> + data.origin + <span class="string">'》'</span>;</span><br><span class="line">    <span class="keyword">let</span> prefix =  <span class="string">'———— '</span>;</span><br><span class="line">    <span class="keyword">let</span> paddingSpacing = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> spacingLength = data.content.length * <span class="number">2</span> - signature.length * <span class="number">2</span> - prefix.length;</span><br><span class="line">    <span class="keyword">if</span> (spacingLength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.origin.indexOf(<span class="string">'·'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">        spacingLength++;</span><br><span class="line">      &#125;</span><br><span class="line">      paddingSpacing = <span class="keyword">new</span> <span class="built_in">Array</span>(spacingLength).fill(<span class="string">' '</span>).join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    signature = (paddingSpacing + prefix) + signature</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    <span class="built_in">console</span>.log(data.content);</span><br><span class="line">    <span class="built_in">console</span>.log(signature);</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>现在代码已经很多了，代码第6行和第7行我们把署名和横线拆分成2个变量，因为一个汉字相当于2个空格而一个横线是一个字符，上面的<code>prefix</code>中其实是4个短横线和一个空格组成的。然后在代码的第9行我们计算了一下需要填充的空格数量，也就是诗句乘以2然后减去署名乘以2再减去横线（诗句和署名都是汉字或者汉字的标点符号占了2个空格），还有一种特殊情况是，有些署名中有符号的点（·），如<code>李商隐《无题·昨夜星辰昨夜风》</code>中的点，这个点占据了一个字符，我们要对这个点做特殊处理，特殊处理见第11到第13行代码，最后14行代码把空格也加上。后面打印的时候多了2个<code>console.log();</code>是为了换行，当然是用<code>\n</code>来换行也是可以的。需要说明的是我们这里使用字符串的拼接来做的，当然也可以使用ES6的模板字符串。最后看一下结果：</p><p><img src="/2019/09/06/10分钟开发一个npm全局依赖包（上）/3.png" alt="对齐处理"></p><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p>现在我们的代码基本上写的差不多了，然后试着按照全局包来处理。首先修改<code>package.json</code>文件，添加<code>bin</code>字段，<code>bin</code>字段的作用是告诉环境执行命令的时候执行哪个文件。如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"poem-cli"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"命令行随机打印一句诗词。"</span>,</span><br><span class="line">  <span class="attr">"bin"</span>: &#123;</span><br><span class="line">    <span class="attr">"poem-cli"</span>: <span class="string">"index.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node index"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"诗词"</span>,</span><br><span class="line">    <span class="string">"命令行"</span>,</span><br><span class="line">    <span class="string">"有趣"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Orange"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"axios"</span>: <span class="string">"^0.19.0"</span>,</span><br><span class="line">    <span class="attr">"colors-cli"</span>: <span class="string">"^1.0.26"</span>,</span><br><span class="line">    <span class="attr">"yargs"</span>: <span class="string">"^14.0.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述第5到7行可是重点哦，写了<code>bin</code>以后在<code>bin</code>的入口文件（也就是<code>index.js</code>文件）的最上方还要加一行代码，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 其他代码同上的index.js</span></span><br></pre></td></tr></table></figure><p><code>#!/usr/bin/env node</code>看着和注释很像，到底有什么作用呢？其实它声明了脚本文件的解释程序，脚本文件有很多，我们要运行这个<code>index.js</code>，就得告诉系统你是要用什么来执行我们的脚本，这里当然是使用node了。</p><p>把这两个地方修改后，我们基本上可以使用了，先测试一下看可以用不。使用<code>npm link</code>命令，它的作用是把当前文件夹拷贝到node全局包的安装环境下，当拷贝过去以后你就可以把他当成一个全局包使用了，拷贝完后直接使用<code>poem-cli</code>来运行脚本就可以了。</p><p><img src="/2019/09/06/10分钟开发一个npm全局依赖包（上）/4.png" alt="使用npm link"></p><h2 id="发布到npm仓库上"><a href="#发布到npm仓库上" class="headerlink" title="发布到npm仓库上"></a>发布到npm仓库上</h2><p><code>npm link</code>命令是把本地的文件夹放在全局目录下，但是为了更多的小伙伴使用我们的包，就需要把该包放在npm仓库中。首先需要去<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm官网</a>注册自己的账号，已有账号忽略这一步。此外由于国内一般使用的是淘宝的镜像，如果你使用的也是淘宝的或者其他的镜像，这里<strong>必须</strong>要切回到npm的镜像，强烈建议使用nrm来管理镜像源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nrm</span></span><br><span class="line">npm install -g nrm</span><br><span class="line"><span class="comment"># 切回到npm镜像源</span></span><br><span class="line">nrm use npm</span><br></pre></td></tr></table></figure><p>在提交的时候，往往有些东西是不希望提交的，那么可以新建一个<code>.npmignore</code>文件，作用类似于<code>.gitignore</code>，只是这个是提交npm仓库的时候忽略的，这里我们在该文件的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node_modules/</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">.gitignore</span><br><span class="line">.git</span><br></pre></td></tr></table></figure><p>当这个时候你只需要登录npm并且发布就好了，如果已经登录了就可以直接发布了（可以使用命令<code>npm whoami</code>来查看自己的登录信息，再次强调<strong>一定要切到npm镜像源</strong>）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录npm 需要数据用户名 密码 邮箱等</span></span><br><span class="line">npm login</span><br><span class="line"><span class="comment"># 发布</span></span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>发布的速度还是挺快的，当你发布完成以后就可以使用<code>npm install -g poem-cli</code>来安装全局包了，当然这个名字已经被我注册了，你需要换一个名字。最后使用<code>poem-cli</code>来运行就可以了，大功告成。此时你可以使用命令<code>nrm use taobao</code>切换到淘宝镜像了，往往淘宝镜像会在5分钟内从npm获取一下新的包，所以你切到淘宝的镜像，5分钟后也可以安装（其实一般情况下根本不到5分钟）。</p><p>十分钟的时间差不多到了，我们的全局依赖包已经做完了，是不是收获还不错，下一节我们再利用20分钟，让我们的全局安装包做的更好一点，同时也简绍命令行工具常用的2个工具库。可以点击<a href="https://www.kai666666.top/2019/09/07/10分钟开发一个npm全局依赖包（下）/#more">这里</a>进入。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快应用初探--把个人博客封装成快应用</title>
      <link href="/2019/08/25/%E5%BF%AB%E5%BA%94%E7%94%A8%E5%88%9D%E6%8E%A2-%E6%8A%8A%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B0%81%E8%A3%85%E6%88%90%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
      <url>/2019/08/25/%E5%BF%AB%E5%BA%94%E7%94%A8%E5%88%9D%E6%8E%A2-%E6%8A%8A%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B0%81%E8%A3%85%E6%88%90%E5%BF%AB%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>最近公司在做快应用的需求，经过2周的努力，<code>淘粉吧快应用</code>已经上线了，现在借此机会跟大家聊聊快应用。</p><hr><h3 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h3><p>自从Java语言创立以后，一场跨平台软件的革命拉开了序幕，从此一份代码可以在不同的操作系统上运行了。近两年小程序更是把跨平台的应用推上了一个新的高度，<code>用完即走,不做停留</code>的理念更是深入人心。随着宽带的普及，移动流量费用的降低，现在的应用越来越快，同时越来越轻。就在这样的大环境下，国内手机厂商们不想微信一家独大，于是也搞了一个<code>用完即走,不做停留</code>的软件平台，这就是<code>快应用</code>。由于快应用比微信更加底层，所以理论上，快应用要更快，同时体验要更好；另一方便，快应用可以做像负一屏等小程序无法做的操作。更多快应用相关的内容可以直接去它的<a href="https://www.quickapp.cn/" target="_blank" rel="noopener">官网</a>查看。</p><h3 id="体验快应用"><a href="#体验快应用" class="headerlink" title="体验快应用"></a>体验快应用</h3><p>由于快应用是国内手机厂商们来支持的，所以快应用只<strong>支持安卓不支持iPhone</strong>，当然也不是所有的安卓机都支持，这里有一份<a href="https://doc.quickapp.cn/changelog/ecology.html" target="_blank" rel="noopener">生态数据</a>可以看看。虽然并不支持所有的机型，但是国产手机的用户也是一个很庞大的数字，所以有实力的公司研究一下快应用还是有些必要的。<br>那么用户怎么使用快应用呢？有没有什么例子？像我使用的是小米手机，小米手机是支持快应用的，在应用市场搜索<code>淘票票</code>，可以看到有一个秒开，这个秒开就是打开淘票票快应用，你可以先去体验一下。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/1.jpeg" alt="淘票票快应用"></p><h3 id="快应用环境搭建"><a href="#快应用环境搭建" class="headerlink" title="快应用环境搭建"></a>快应用环境搭建</h3><p>好了，说了这么多了，我们可以试着开发一个快应用了。在开发之前先搭建一下快应用的环境吧。<br>快应用的环境跟大多数前端应用一样也是基于<code>nodeJS</code>来启动的，<code>node</code>的安装这里就不说了，这里假设你已经安装<code>node</code>了。<br>首先需要下载3个东西，第一个就是快应用的开发工具，下载地址请点<a href="https://www.quickapp.cn/docCenter/post/95" target="_blank" rel="noopener">这里</a>，其实这个工具就是封装自<code>VSCode</code>，如果你一直用的是<code>VSCode</code>来做的开发，那么该开发工具应该很适合你。接下来要安装的是调试器和预览版，这两个都是用来调试用的，需要安装到你的安卓手机上，需要注意的是预览版可以下载不同的版本，最好下载你支持的最低版本，最后请点击这里<a href="https://www.quickapp.cn/docCenter/post/69" target="_blank" rel="noopener">下载</a>。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/2.png" alt="调试器和预览版"></p><p>通过上面的步骤基本软件已经安装了，然后我们来创建一个项目。首先来安装全局的命令行工具：</p><blockquote><p>npm install -g hap-toolkit</p></blockquote><p>这个只需要安装一次。然后我们初始化一个项目，项目名根据自己喜欢就可以了，比如这里我们叫做<code>blog-quickapp</code>，那么运行命令：</p><blockquote><p>hap init blog-quickapp</p></blockquote><p>项目生成好了以后我们用刚才下载的编辑器打开，点击<code>文件结构-&gt;打开文件夹</code>，也可以把刚才创建的文件夹拖进来。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/3.png" alt="打开项目"></p><p>然后在终端下输入<code>npm install</code> 这一步对于前端工程师来说一定不陌生。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/4.png" alt="安装项目"></p><p>稍等片刻，安装完成后再输入命令<code>npm run server</code>，同时再开一个终端，输入另一个命令<code>npm run watch</code>，其中前一个命令是启动服务的，第二个命令是启动实时编译的。重新开一个终端如下：</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/5.png" alt="启动实时编译"></p><p>然后打开<code>http://你的IP:8000</code>，如果看到一个二维码，说明项目已经起来了，点击底部的<code>打开 web 预览</code>开始查看网页预览版，也可以打开手机上刚才安装的<code>快应用调试器</code>，然后运行平台选择刚才安装的快应用预览版就可以了，最后点击<code>扫码安装</code>，扫这个二维码就可以了，需要注意的是手机和电脑必须要连人同一个WIFI。</p><h3 id="快应用与普通web应用的不同"><a href="#快应用与普通web应用的不同" class="headerlink" title="快应用与普通web应用的不同"></a>快应用与普通web应用的不同</h3><p>快应用和普通的web应用还是有很大的不同的，快应用采用前端的这套开发机制，但是又做了很多的限制，比如他强烈希望你使用flex布局，为此它把浮动和定位全部禁用了，如果你使用浮动和定位就会出现错误（而不是警告）。浮动的功能基本上flex可以代替，那么定位呢？他自己创建了一个<a href="https://doc.quickapp.cn/widgets/stack.html" target="_blank" rel="noopener">stack组件</a>来处理定位的问题。他的框架和<code>vue</code>或小程序非常类似，有<code>vue</code>或小程序开发经验的同学可以很快适应他的写法（可以看看<code>/src/Demo/index.ux</code>中的代码）。快应用对CSS的限制是非常大的，就比如颜色的继承它是不支持的，需要写在具体的标签上；div里面直接写文字，抱歉，也不行！你需要用text或span等标签包一层。这些限制刚开始你可能不太适应，或许开发的时候感觉有点痛苦，明明代码是对的，但是却不行，这时你就得多看看他在<code>npm run watch</code>命令下输出日志了。</p><p>我们可以看一下例子中的代码，在<code>/src/Demo/index.ux</code>文件中写了一个input标签，但是在真正运行时，代码中多了一个<code>style</code>，<code>style</code>属性的内容就是快应用框架把默认样式和自定义样式处理整合后的结果。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/6.png" alt="模板代码"></p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/7.png" alt="样式代码"></p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/8.png" alt="样式整合后的代码"></p><p>所以如果该标签没有写颜色等信息的时候就不会有了，这也是为什么颜色不能被继承的原因。另外快应用不支持CSS的<code>且选择器</code>，也就是<code>.class.class2{...}</code>。我们经常用不同的类选择器去覆盖正常的样式，就比如a标签正常的样式是<code>a-link</code>的颜色，假设它是绿色的，然后当点击以后class属性是<code>a-link active</code>，其中<code>active</code>表明颜色是红色的，如果<code>active</code>样式是且选择器的话（<code>.a-link.active{...}</code>），在快应用中就是不行的，通常需要写成2个样式（<code>.a-link{...}</code>和<code>.active{...}</code>）。</p><h3 id="封装博客成快应用"><a href="#封装博客成快应用" class="headerlink" title="封装博客成快应用"></a>封装博客成快应用</h3><p>快应用有自己的组件和自己的一些接口，可以使用这些组件来写页面。由于开发者往往都有自己的博客，一般使用<code>Github Pages</code>服务来做的，既然已经有博客了，那么博客页面就没必要开发了，直接使用web组件（类似于安卓中的webview）来加载页面就可以了。我们在src下建立一个文件夹叫<code>Webview</code>，然后再在该文件夹下新建一个<code>index.ux</code>，这时开始写自己的代码了，大概如下，你需要替换<code>protected</code>下的<code>url</code>为你自己的地址。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">web</span> <span class="attr">id</span>=<span class="string">"web"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">src</span>=<span class="string">"&#123;&#123;url&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">web</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@system.router'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> prompt <span class="keyword">from</span> <span class="string">'@system.prompt'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  private: &#123;</span></span><br><span class="line"><span class="javascript">    backTime: <span class="literal">null</span>,</span></span><br><span class="line"><span class="undefined">    maxBackTime: 1800</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖</span></span></span><br><span class="line"><span class="undefined">  protected: &#123;</span></span><br><span class="line"><span class="javascript">    url: <span class="string">'https://www.kai666666.top'</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  onMenuPress() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.$app.$def.showMenu()</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  onBackPress() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.$element(<span class="string">'web'</span>).canBack(&#123;</span></span><br><span class="line"><span class="javascript">      callback: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 加载历史列表中的上一个 URL</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$element(<span class="string">'web'</span>).back()</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (router.getLength() === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> currentTime = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (!<span class="keyword">this</span>.backTime || currentTime - <span class="keyword">this</span>.backTime &gt; <span class="keyword">this</span>.maxBackTime) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.backTime = currentTime</span></span><br><span class="line"><span class="undefined">              prompt.showToast(&#123;</span></span><br><span class="line"><span class="javascript">                message: <span class="string">'再按一次退出程序'</span></span></span><br><span class="line"><span class="undefined">              &#125;)</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">          router.back()</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">      &#125;.bind(<span class="keyword">this</span>)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 阻止默认行为，等待异步操作</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>protected</code>下的字段是从url中传入的；<code>private</code>中的字段就是组件内部的字段，类似与vue中的data。<code>onBackPress</code>函数是当返回键按下以后的回调，返回true可以阻止默认行为，这里的作用是如果页面中可以返回的话直接使用页面级别的返回，否则使用应用级的返回，如果是最外层的页面那么连续2次返回才能退出程序。</p><p>最后新增加的页面需要在清单文件<code>/src/manifest.json</code>中声明一下，这里我把其他的页面删除了，此时清单文件如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"package"</span>: <span class="string">"top.kai666666.blog"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"橙光笔记"</span>,</span><br><span class="line">  <span class="attr">"versionName"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"versionCode"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"minPlatformVersion"</span>: <span class="string">"1020"</span>,</span><br><span class="line">  <span class="attr">"icon"</span>: <span class="string">"/Common/logo.png"</span>,</span><br><span class="line">  <span class="attr">"features"</span>: [&#123; <span class="attr">"name"</span>: <span class="string">"system.prompt"</span> &#125;, &#123; <span class="attr">"name"</span>: <span class="string">"system.router"</span> &#125;, &#123; <span class="attr">"name"</span>: <span class="string">"system.shortcut"</span> &#125;],</span><br><span class="line">  <span class="attr">"permissions"</span>: [&#123; <span class="attr">"origin"</span>: <span class="string">"*"</span> &#125;],</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"logLevel"</span>: <span class="string">"off"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"router"</span>: &#123;</span><br><span class="line">    <span class="attr">"entry"</span>: <span class="string">"Webview"</span>,</span><br><span class="line">    <span class="attr">"pages"</span>: &#123;</span><br><span class="line">      <span class="attr">"Webview"</span>: &#123;</span><br><span class="line">        <span class="attr">"component"</span>: <span class="string">"index"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"About"</span>: &#123;</span><br><span class="line">        <span class="attr">"component"</span>: <span class="string">"index"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"display"</span>: &#123;</span><br><span class="line">    <span class="attr">"titleBarBackgroundColor"</span>: <span class="string">"#f2f2f2"</span>,</span><br><span class="line">    <span class="attr">"titleBarTextColor"</span>: <span class="string">"#414141"</span>,</span><br><span class="line">    <span class="attr">"menu"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"pages"</span>: &#123;</span><br><span class="line">      <span class="attr">"Webview"</span>: &#123;</span><br><span class="line">        <span class="attr">"titleBarText"</span>: <span class="string">"橙光笔记"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"About"</span>: &#123;</span><br><span class="line">        <span class="attr">"menu"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的最后把<code>/src/Common/logo.png</code>下的图片换成我们的，然后生成一个桌面图标，最后出来的效果如下，简直和原生APP一模一样。</p><p><img src="/2019/08/25/快应用初探-把个人博客封装成快应用/9.gif" alt="完整版"></p><p>快应用版本的博客就做好了，当然你可以利用快应用的能力来新增更多的功能，也可以做自己喜欢的快应用。最后提交到应用市场上，让更多小伙伴访问。提交到应用市场无非就2步，一步就是<a href="https://www.quickapp.cn/docCenter/post/71" target="_blank" rel="noopener">注册</a>，另一步就是<a href="https://www.quickapp.cn/docCenter/post/72" target="_blank" rel="noopener">上传自己的快应用</a>。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跑步提速指南</title>
      <link href="/2019/08/10/%E8%B7%91%E6%AD%A5%E6%8F%90%E9%80%9F%E6%8C%87%E5%8D%97/"/>
      <url>/2019/08/10/%E8%B7%91%E6%AD%A5%E6%8F%90%E9%80%9F%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>现在已经立秋了，天气渐渐转凉，马拉松赛事也逐渐开始报名了。随着全民健身的理念深入人心，越来越多的人开始跑步了，马拉松赛事也越来越火了。杭州马拉松报名首日就有82221名童鞋报名了，而本届马拉松参赛总人数为36000名，仅仅首日就远超这个数字。与杭州马拉松不同的是宁波马拉松采取先到先得的赛制（先报名的就可以参加，报名慢了就不可以报名了，这种赛制不需要抽签来决定是否参加），8月5日上午9时宁波马拉松开始报名，仅仅一个半小时后的10点35分，半程马拉松的名额就被抢完了；全程马拉松于11点30分也告罄了。由此可见马拉松现在变成一个非常火爆的运动，越来越多的人将在马拉松的赛场上突破自己，创造新的PB（个人最佳）。</p><p>最近我也在看一本名叫《跑步圣经2——针对速度的跑步训练计划》的跑步书籍，刚好可以更大家分享一下我所积累的跑步经验。同时希望我们程序猿可以在跑步上突破自己，同时拥有一个更好的身体。</p><p><img src="/2019/08/10/跑步提速指南/1.jpeg" alt="《跑步圣经2——针对速度的跑步训练计划》"></p><hr><h3 id="姿势篇"><a href="#姿势篇" class="headerlink" title="姿势篇"></a>姿势篇</h3><p>正确的跑步姿势：</p><blockquote><p>自己有种将要摔倒的感觉，不得不通过腿的快速移动来避免摔倒。头部静止不动，径直向前看。手臂应当有被往后拉的感觉——通过肩膀向后拉手臂，肩膀应当时刻保持放松。通过弯曲膝盖、抬高脚后跟使身体前倾，这样你的腿几乎能像自行车运动员一样移动。双脚应当轻轻地着地，快而轻地移动。</p></blockquote><p>我们来分析一下：</p><ol><li>要有快要摔倒的感觉，这就必须使身体向前倾，然后让重力使你向前跑，没错让重力推向你向前进。著名的<code>姿势跑步法</code>最核心的理念就是这。</li><li>头部要向前看，不要低头与抬头，保持颈部自然，这样呼吸起来也顺畅，保持良好的呼吸。</li><li>手臂应该前后运动，而不是左右运动，减少左右方向的能量消耗。</li><li>膝盖保持弯曲，保持中心尽可能的靠近肚脐所在垂直位置，不要向前踢脚。</li><li>落地要轻盈，跑步高手往往都是轻盈地在跑步，不要发出砰砰砰的声音。同时你需要脚前掌先着地，这样具有缓存的作用，同时可以跑得更快，还可以降低运动损伤。</li><li>快速地移动，需要提高步频，降低步幅，所以不要迈大步，保持小而快的步频。迈大步一方面会产生刹车效应，长时间迈大步对损伤自己的身体，另一方面迈大步会使得速度下降。</li></ol><h3 id="技巧篇"><a href="#技巧篇" class="headerlink" title="技巧篇"></a>技巧篇</h3><p>如何突破自己的里程？</p><blockquote><p>好多同学刚开始的时候可能只能跑2公里，甚至1公里。那么如果可以突破自己的里程呢？最简单的办法就是跑慢一点，没错只要跑慢一点，突破5公里是没问题的。</p></blockquote><p>如何跑的更快？</p><blockquote><p>当你可以达到某个里程的时候，你就可以试试是否可以跑得更快，跑的更快意味着你需要突破自己。在平时的训练中需要不断提高步频，快速跑向前去，没错就是很累的那种，同样的要保持呼吸的顺畅，最好四步一呼四步一吸。那如果跑的快了呼吸不上来怎么办，你可以短暂的休息一下（这里说的休息不是躺下来休息，往往跑完步心率会很快直接休息对身体不好，更好的办法是用快走代替跑步），<code>法特莱克跑步法</code>是一种不错的选择（下面会讲）。<strong>一定要明白，只有突破自己，才会有提高，一个劲地匀速奔跑很难有所突破</strong>。</p></blockquote><p>快跑是不是非常累？</p><blockquote><p>上面说到训练中快跑是需要你尽全力去跑，那么自然快跑是很累的，但是如果你身体机能上去了，这样的快跑就不会那么累了。就像1个半小时完成半马的和3个小时完成半马的选手相比，你觉得哪个会更累呢？</p></blockquote><p>健身对跑步有影响吗？</p><blockquote><p>有很大的影响。好多童鞋认为跑步只是腿的运动，其实不是，跑步是全身的运动，如果你要有更好的成绩，那么就必须进行全身心的健身。好的选手不仅仅会锻炼腿部力量还会锻炼核心力量，甚至对锻炼手臂力量，整个身体变强壮你将会跑的更快更远。</p></blockquote><h3 id="提升篇"><a href="#提升篇" class="headerlink" title="提升篇"></a>提升篇</h3><p>上面提到法特莱克跑，keep就有法特莱克跑，法特莱克跑的意思是跑一段距离，然后快走或慢跑休息一小会，然后再开始跑，当然在训练中跑的时候最好是全力冲刺，这样有助于提高你的心肺能力，keep上的法特莱克跑是快走和慢跑交替进行的，下面是每段的距离，你也可以按照参照物来跑，比如跑到前面那棵树那边休息地走100米等。</p><p><img src="/2019/08/10/跑步提速指南/2.png" alt="法特莱克跑"></p><p>当然keep上还有更加进阶的法特莱克跑就是下面这四节课程，它是快跑和慢跑结合的法特莱克跑，对心肺的刺激会更强，所以达到一定水平的你可以去试试（不要一上来就去试哦）。<br><img src="/2019/08/10/跑步提速指南/3.jpeg" alt="挑战跑"></p><p>当然除了法特莱克跑还要一种有效的训练方式就是爬坡与下坡跑，这种训练也可以锻炼耐力和心肺能力，同时还可以锻炼脚步肌肉。往往爬坡的时候你需要减小步幅，加快步频（比水平路面上更小的步幅），这样有利于保持体力；在下坡时你需要，放慢步频，稍微加大步幅，虽然一直再强调减小步频但此时是需要放大步频的，因为下坡要远比上坡难，大一点的步频会更省力。</p><h3 id="系统篇"><a href="#系统篇" class="headerlink" title="系统篇"></a>系统篇</h3><p>跑步前需要热身。跑前热身往往是动态性的运动，目的是让身体热起来，心率提神起来，同时使得韧带等稍微拉伸一下。有同学认为跑步本来就是一种热身的运动，不需要再热身了，这是不对的，往往我们跑步来热身都是短距离慢跑，而专门出来跑步的时候，这个距离对你来说还是稍微有点挑战性的，所以提前就得让身体热起来，最重要的是让心率提升上来，直接开跑的话心率会瞬间提升，这样很容易产生岔气等身体问题。</p><p>跑步后要拉伸。拉伸往往是静态性的，其目的是为了提升自己身体的柔韧性（这里的柔韧不是身体变软，而是恢复速度变快并且肌肉有更好的伸缩性）。拉伸的另一个好处是可以降低运动损伤的风险，运动损伤往往是持续性对身体的某个部位产生压力而造成的，拉伸可以使得这些部位得到放松。所以，<strong>再怎么强调拉伸都不为过</strong>。</p><p>如果不知道怎么热身和拉伸的话，可以去keep上试试<code>跑前热身</code>和<code>跑后拉伸</code>课程。</p><h3 id="跑马篇"><a href="#跑马篇" class="headerlink" title="跑马篇"></a>跑马篇</h3><p>好多同学跑步是为了在马拉松上PB，那么就需要一些跑马的技巧。</p><p>跑前一周要减少训练量，保持一个更好的状态。</p><p>跑马前装备一定要带好，什么防晒的，什么防护的，最重要的是一双好的跑鞋，曾几何时我就因为跑鞋不给力而与PB惨痛失利，甚至昨天打球因为鞋子不行，脚都磨破了，所以跑鞋真的很重要。多花点钱买一个好鞋绝对是值的的。</p><p>去跑马拉松的时候一定要带一个大书包，为什么呢？因为如果赞助商给力的时候会给你一堆羊毛，小书包根本装不下，所以书包最好拿大一点的，当然有车的可以忽略。</p><p>马拉松开跑那天早上的早餐一定要吃到4到7成饱，过多了会影响跑步，过少了会跑不下来，毕竟马拉松是一个高消耗的运动。</p><p>开始跑马前一定要在宾馆或者家里上个厕所，到跑马集合地的时候厕所基本上都是不够用的，即使够用也要等半天。开跑后的赛道上也是有厕所的，往往去赛道上的临时厕所是会影响PB，所以上厕所一定要提前。</p><p>跑马前一定要至少提前半个小时到赛场，不仅仅是为了熟悉集结地的环境，还可以做一组跑前热身运动。</p><p>跑马时一定要记得<strong>欲速则慢</strong>，也就是跑步开始的时候一定要慢一点，让心率平滑的升起来，同时保持更好的呼吸，往往呼吸在跑马时起了很大的作用。想想如果你上气不接下气了，你还会有力气冲刺吗？所以开始几公里一定要慢，有的赛道刚开始比较窄，开跑后比较慢，这种赛道往往更容易PB，就比如无锡马拉松的赛道，PB的人非常多。</p><p>跑马时看到补给时不要先去，除非补给处没有其他选手，往往选手看到补给后都兴冲冲地跑上去了，这样选手就会堆积到补给最前面，而往往后面的补给都是无人问津的。</p><p>马拉松后5公里是真正跟自己决一高下的时候，这个时候可以适当加速了，当然加速不是全力跑下去，而是保持一个可以跑得比较久但还是可以坚持下去的速度。另外如果觉得身体支撑不住了，千万不要坚持，<strong>身体比PB跟重要</strong>。</p><p>跑完后不要立刻停下来休息，先走走，让心率逐渐平滑的降下来，等心率降下来后可以好好拉伸一下，再强调一遍拉伸非常重要。</p><p>最后，在跑完后短信上会收到你的成绩，一两个星期内就可以在你参加的马拉松官网上下载自己的证书了，一两个月内可以在<a href="http://www.runchina.org.cn/" target="_blank" rel="noopener">中国马拉松官网</a>上查看你的马拉松成绩，并且你的成绩将永久收录在国家的数据库中，是不是很兴奋？</p>]]></content>
      
      
      <categories>
          
          <category> 运动与健身 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跑步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Node在浏览器打开某个网页</title>
      <link href="/2019/07/29/%E4%BD%BF%E7%94%A8Node%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80%E6%9F%90%E4%B8%AA%E7%BD%91%E9%A1%B5/"/>
      <url>/2019/07/29/%E4%BD%BF%E7%94%A8Node%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80%E6%9F%90%E4%B8%AA%E7%BD%91%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>使用Node在浏览器打开某个网页，其实就是使用子进程来用命令行打开网页链接就可以了，需要注意的是<code>Mac</code>系统使用的是<code>open</code>命令，<code>Windows</code>系统使用的是<code>start</code>命令，Linux等系统使用<code>xdg-open</code>命令。针对不同的操作系统使用不同的命令。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>首先创建一个<code>index.js</code>文件，然后写我们的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> child_process = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openURL = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断平台</span></span><br><span class="line">  <span class="keyword">switch</span> (process.platform) &#123;</span><br><span class="line">    <span class="comment">// Mac 使用open</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"darwin"</span>:</span><br><span class="line">      child_process.spawn(<span class="string">'open'</span>, [url]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// Windows使用start</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"win32"</span>:</span><br><span class="line">      child_process.spawn(<span class="string">'start'</span>, [url]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// Linux等使用xdg-open</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      child_process.spawn(<span class="string">'xdg-open'</span>, [url]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">openURL(<span class="string">"https://www.kai666666.top/"</span>);</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在当前命令行运行下面命令，可以看到浏览器已经打开我们的网页了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>往往在代码中直接写死地址是不好的，我们使用传过来的参数视为打开的URL，修改<code>index.js</code>文件最后1行代码：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- openURL("https://www.kai666666.top/");</span></span><br><span class="line"><span class="addition">+ let url = process.argv[2];</span></span><br><span class="line"><span class="addition">+ if (url) &#123;</span></span><br><span class="line"><span class="addition">+   openURL(url);</span></span><br><span class="line"><span class="addition">+ &#125; else &#123;</span></span><br><span class="line"><span class="addition">+   console.log("请输入URL");</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><p>上面<code>process.argv</code>是一个数组，其中0下标的数据是node的路径，1下标的数据是执行文件也就是这里的<code>index.js</code>文件的路径，2到多下标中的数据是后面传入的数据，上面我们只检查2下标的数据。</p><p>最后使用下面命令启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js https://www.kai666666.top/</span><br></pre></td></tr></table></figure><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>看到上面这你会不会想到，自己封装一下打开网页的方法呢？其实已经有人这么做了，你可以看看<a href="https://github.com/sindresorhus/open" target="_blank" rel="noopener">open库</a>，它就是使用代码来打开网页的（其实不仅仅是网页），著名的webpack插件<a href="https://github.com/baldore/open-browser-webpack-plugin" target="_blank" rel="noopener">open-browser-webpack-plugin</a>就是使用它在启动的时候打开一个页面。当然它是需要用代码来启动的，你可能希望直接在命令行来启动，就像我们上面那样，那你可以看看open库作者的另一个库：<a href="https://github.com/sindresorhus/open-cli" target="_blank" rel="noopener">open-cli</a>，内部也是使用<code>open</code>库来启动的，只是封装了一层命令行传URL的过程。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片由彩色渐变到黑白动画</title>
      <link href="/2019/07/23/%E5%9B%BE%E7%89%87%E7%94%B1%E5%BD%A9%E8%89%B2%E6%B8%90%E5%8F%98%E5%88%B0%E9%BB%91%E7%99%BD%E5%8A%A8%E7%94%BB/"/>
      <url>/2019/07/23/%E5%9B%BE%E7%89%87%E7%94%B1%E5%BD%A9%E8%89%B2%E6%B8%90%E5%8F%98%E5%88%B0%E9%BB%91%E7%99%BD%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>把图片变成黑白的效果使用Canvas就可以实现，那如何使图片渐变成黑白色呢？其实Canvas完全可以胜任，但是有更简单的办法就是CSS的滤镜。</p><p>首先上一下HTML的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"https://www.kai666666.top/2019/06/29/Canvas系列（8）：像素操作/lufei.jpeg"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"pic"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>此时的效果如下：</p><p><img src="/2019/07/23/图片由彩色渐变到黑白动画/1.png" alt="原始效果"></p><p>CSS代码也很简单：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pic</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: filter .<span class="number">8s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pic</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(100%) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/07/23/图片由彩色渐变到黑白动画/2.gif" alt="添加滤镜的效果"></p><p>当然我们还可以添加多个滤镜，效果会更好，就比如再添加一个透明度变化的效果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pic</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: filter .<span class="number">8s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pic</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(100%) <span class="built_in">opacity</span>(66%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/07/23/图片由彩色渐变到黑白动画/3.gif" alt="添加透明度后的效果"></p><p>更多滤镜效果请看<a href="https://www.runoob.com/cssref/css3-pr-filter.html" target="_blank" rel="noopener">这里</a>，本示例代码请点击<a href="https://codepen.io/kaiorange/pen/NQxPyV" target="_blank" rel="noopener">这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS效果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造方法或new返回该对象</title>
      <link href="/2019/07/18/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E6%88%96new%E8%BF%94%E5%9B%9E%E8%AF%A5%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/07/18/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E6%88%96new%E8%BF%94%E5%9B%9E%E8%AF%A5%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>一个小技巧，调用构造方法或都new返回该对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不是new的时候this指向的是调用者 默认是window</span></span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Person)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lufei = Person();</span><br><span class="line">lufei.sayHello();</span><br><span class="line"><span class="keyword">var</span> nami = <span class="keyword">new</span> Person();</span><br><span class="line">nami.sayHello();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode支持Vue自动保存格式化的配置</title>
      <link href="/2019/07/18/VSCode%E6%94%AF%E6%8C%81Vue%E8%87%AA%E5%8A%A8%E4%BF%9D%E5%AD%98%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/07/18/VSCode%E6%94%AF%E6%8C%81Vue%E8%87%AA%E5%8A%A8%E4%BF%9D%E5%AD%98%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>安装三个插件：<code>Prettier - Code formatter</code>、<code>ESLint</code>、<code>Vetur</code>。对应的插件图片如下：<br><img src="/2019/07/18/VSCode支持Vue自动保存格式化的配置/1.jpeg" alt="Prettier - Code formatter"><br><img src="/2019/07/18/VSCode支持Vue自动保存格式化的配置/2.jpeg" alt="ESLint"><br><img src="/2019/07/18/VSCode支持Vue自动保存格式化的配置/3.jpeg" alt="Vetur"></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>MacOS使用<code>Command + Sheft + P</code>，windows使用<code>Ctrl + Sheft + P</code>搜索<code>首选项:打开设置(json)</code>,然后把下面配置粘贴进去：</p><p><img src="/2019/07/18/VSCode支持Vue自动保存格式化的配置/4.jpeg" alt="首选项:打开设置(json)"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // 分号</span><br><span class="line">  "prettier.semi": false,</span><br><span class="line">  "prettier.eslintIntegration": true,</span><br><span class="line">  // 单引号包裹字符串</span><br><span class="line">  // 尽可能控制尾随逗号的打印</span><br><span class="line">  "prettier.trailingComma": "all",</span><br><span class="line">  "prettier.singleQuote": true,</span><br><span class="line">  "prettier.tabWidth": 2,</span><br><span class="line">  // 关闭自带的格式化</span><br><span class="line">  "javascript.format.enable": false,</span><br><span class="line">  // 让函数(名)和后面的括号之间加个空格</span><br><span class="line">  "javascript.format.insertSpaceBeforeFunctionParenthesis": true,</span><br><span class="line">  // 启用eslint</span><br><span class="line">  "eslint.enable": true,</span><br><span class="line">  "eslint.validate": [</span><br><span class="line">    "javascript",</span><br><span class="line">    "javascriptreact",</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  // 格式化.vue中html</span><br><span class="line">  "vetur.format.defaultFormatter.html": "js-beautify-html",</span><br><span class="line">  // 让vue中的js按编辑器自带的ts格式进行格式化</span><br><span class="line">  "vetur.format.defaultFormatter.js": "vscode-typescript",</span><br><span class="line">  "vetur.format.defaultFormatterOptions": &#123;</span><br><span class="line">    "js-beautify-html": &#123;</span><br><span class="line">      "wrap_attributes": "force-aligned" // 属性强制折行对齐</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "vetur.format.enable": true,</span><br><span class="line">  "eslint.options": &#123;</span><br><span class="line">    "extensions": [".js", ".vue"]</span><br><span class="line">  &#125;,</span><br><span class="line">  "eslint.autoFixOnSave": true,</span><br><span class="line">  "editor.tabSize": 2,</span><br><span class="line">  // 开启行数提示</span><br><span class="line">  "editor.lineNumbers": "on",</span><br><span class="line">  // 去掉 vscode 自带的自动保存 ，vscode 默认也是 false</span><br><span class="line">  "editor.formatOnSave": false,</span><br><span class="line">  // vscode默认启用了根据文件类型自动设置tabsize的选项</span><br><span class="line">  "editor.detectIndentation": false,</span><br><span class="line">  "editor.quickSuggestions": &#123;</span><br><span class="line">    //开启自动显示建议</span><br><span class="line">    "other": true,</span><br><span class="line">    "comments": true,</span><br><span class="line">    "strings": true</span><br><span class="line">  &#125;,</span><br><span class="line">  "extensions.ignoreRecommendations": false,</span><br><span class="line">  "window.zoomLevel": 1,</span><br><span class="line">  "files.autoGuessEncoding": false,</span><br><span class="line">  "workbench.sideBar.location": "left"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="确保和项目配置不冲突"><a href="#确保和项目配置不冲突" class="headerlink" title="确保和项目配置不冲突"></a>确保和项目配置不冲突</h2><p>如果项目配置和VSCode默认的配置有冲突可能会出现问题，请确保根目录下的<code>.vscode/settings.json</code>文件和上面的文件并不冲突，可以把<code>.vscode/settings.json</code>设置为一个空JSON。</p><p><img src="/2019/07/18/VSCode支持Vue自动保存格式化的配置/5.jpeg" alt=".vscode/settings.json"></p>]]></content>
      
      
      <categories>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas系列（13）：实战--星空连线图</title>
      <link href="/2019/07/17/Canvas%E7%B3%BB%E5%88%97%EF%BC%8813%EF%BC%89%EF%BC%9A%E5%AE%9E%E6%88%98-%E6%98%9F%E7%A9%BA%E8%BF%9E%E7%BA%BF%E5%9B%BE/"/>
      <url>/2019/07/17/Canvas%E7%B3%BB%E5%88%97%EF%BC%8813%EF%BC%89%EF%BC%9A%E5%AE%9E%E6%88%98-%E6%98%9F%E7%A9%BA%E8%BF%9E%E7%BA%BF%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>Canvas能做好多东西，本章就来一节实战性的东西吧。好多人来到这个博客的时候总是觉得后面这种点和线的背景很有意思，这种效果是怎么实现的呢，当然是使用Canvas了，我们这章就来实现一个简易版的这种星空连线图。</p><hr><h2 id="封装画点操作"><a href="#封装画点操作" class="headerlink" title="封装画点操作"></a>封装画点操作</h2><p>对于Canvas画图，好多大神都是使用面向对象的思想来做的，在游戏编程中，往往把拥有特定功能的对象称为精灵。我们这里先简单的对点这个对象做一定的封装：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">canvas,options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.canvas = canvas;</span><br><span class="line">  <span class="keyword">this</span>.context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">  options = options || &#123;&#125;;</span><br><span class="line">  <span class="keyword">this</span>.x = options.x || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.y = options.y || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.radius = options.radius || <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// x轴的速度</span></span><br><span class="line">  <span class="keyword">this</span>.vx = options.vx || <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// y轴的速度</span></span><br><span class="line">  <span class="keyword">this</span>.vy = options.vy || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.color = options.color || <span class="string">'#000000'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.context.beginPath();</span><br><span class="line">    <span class="keyword">this</span>.context.arc(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.radius, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">360</span>);</span><br><span class="line">    <span class="keyword">this</span>.context.fillStyle=<span class="keyword">this</span>.color;</span><br><span class="line">    <span class="keyword">this</span>.context.fill();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 匀速运动</span></span><br><span class="line">    <span class="keyword">this</span>.x += <span class="keyword">this</span>.vx;</span><br><span class="line">    <span class="keyword">this</span>.y += <span class="keyword">this</span>.vy;</span><br><span class="line">    <span class="comment">// 超出边界反弹</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.x &lt; <span class="number">0</span> || <span class="keyword">this</span>.x &gt; canvas.width) &#123;</span><br><span class="line">      <span class="keyword">this</span>.vx = -<span class="keyword">this</span>.vx;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.y &lt; <span class="number">0</span> || <span class="keyword">this</span>.y &gt; canvas.height) &#123;</span><br><span class="line">      <span class="keyword">this</span>.vy = -<span class="keyword">this</span>.vy;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们画点其实画的是一个半径很小的圆，当然也可以画长宽都很小的正方形，往往正方形只要<code>fillRect</code>一个API就可以了，而圆形往往需要好几个个API，所以效率上画正方形要比画圆更好，这里为了后面显示的更清楚就直接画圆了。</p><h2 id="初始化Canvas"><a href="#初始化Canvas" class="headerlink" title="初始化Canvas"></a>初始化Canvas</h2><p>我们现在通过DOM操作来初始化一个canvas，这样做的好处是有利于把星空连线图封装成一个组件，当然我们这里并不讲解如何封装成一个可复用的DOM组件，只讲解怎么实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自己创建canvas 并通过DOM操作添加到body中</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(canvas);</span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="comment">// 设置样式属性</span></span><br><span class="line">canvas.style.position = <span class="string">"fixed"</span>;</span><br><span class="line">canvas.style.top = <span class="number">0</span>;</span><br><span class="line">canvas.style.left = <span class="number">0</span>;</span><br><span class="line">canvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">canvas.height = <span class="built_in">window</span>.innerHeight;</span><br><span class="line">canvas.style.zIndex = <span class="string">"-1"</span>;</span><br></pre></td></tr></table></figure><p>我们手工创建一个Canvas并添加进来，最后设置宽高和样式，注意宽高使用<code>canvas.width</code>设置而不是<code>canvas.style.width</code>设置，这样不会缩放。</p><h2 id="画一个点"><a href="#画一个点" class="headerlink" title="画一个点"></a>画一个点</h2><p>很简单了，直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(canvas,&#123;</span><br><span class="line">    x: <span class="number">20</span>,</span><br><span class="line">    y: <span class="number">20</span>,</span><br><span class="line">    radius:<span class="number">10</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">p.draw();</span><br></pre></td></tr></table></figure><p>直接看效果：</p><p><img src="/2019/07/17/Canvas系列（13）：实战-星空连线图/1.jpeg" alt="画一个点"></p><h2 id="画20个点"><a href="#画20个点" class="headerlink" title="画20个点"></a>画20个点</h2><p>现在我们画20个点吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cWidth = canvas.width;</span><br><span class="line"><span class="keyword">var</span> cHeight = canvas.height;</span><br><span class="line"><span class="keyword">var</span> points = [];</span><br><span class="line"><span class="keyword">var</span> pointsLength = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pointsLength; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> Point(canvas,&#123;</span><br><span class="line">    x: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * cWidth),</span><br><span class="line">    y: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * cHeight),</span><br><span class="line">    radius:<span class="number">10</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  points.push(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> p = points[i];</span><br><span class="line">  p.draw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接看效果，当然点的位置可能会不一样，毕竟是随机的：</p><p><img src="/2019/07/17/Canvas系列（13）：实战-星空连线图/2.jpeg" alt="画20个点"></p><h2 id="让点动起来"><a href="#让点动起来" class="headerlink" title="让点动起来"></a>让点动起来</h2><p>有了上几章知识的铺垫让点动起来很简单，当然我们现在不用那么大的点了，就是用默认的就可以了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cWidth = canvas.width;</span><br><span class="line"><span class="keyword">var</span> cHeight = canvas.height;</span><br><span class="line"><span class="keyword">var</span> points = [];</span><br><span class="line"><span class="keyword">var</span> pointsLength = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pointsLength; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> Point(canvas,&#123;</span><br><span class="line">    x: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * cWidth),</span><br><span class="line">    y: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * cHeight),</span><br><span class="line">    vx: <span class="built_in">Math</span>.random() * <span class="number">4</span> - <span class="number">2</span>,</span><br><span class="line">    vy: <span class="built_in">Math</span>.random() * <span class="number">4</span> - <span class="number">2</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  points.push(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 清屏</span></span><br><span class="line">  context.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> p1 = points[i];</span><br><span class="line">    p1.update();</span><br><span class="line">    p1.draw();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归调用</span></span><br><span class="line">  requestAnimationFrame(animate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动动画</span></span><br><span class="line">requestAnimationFrame(animate);</span><br></pre></td></tr></table></figure><p>此时效果如下，图片有点放大：</p><p><img src="/2019/07/17/Canvas系列（13）：实战-星空连线图/3.gif" alt="对动的点"></p><h2 id="添加连线"><a href="#添加连线" class="headerlink" title="添加连线"></a>添加连线</h2><p>添加连线也很简单，直接看完整代码吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自己创建canvas 并通过DOM操作添加到body中</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(canvas);</span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="comment">// 设置样式属性</span></span><br><span class="line">canvas.style.position = <span class="string">"fixed"</span>;</span><br><span class="line">canvas.style.top = <span class="number">0</span>;</span><br><span class="line">canvas.style.left = <span class="number">0</span>;</span><br><span class="line">canvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">canvas.height = <span class="built_in">window</span>.innerHeight;</span><br><span class="line">canvas.style.zIndex = <span class="string">"-1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cWidth = canvas.width;</span><br><span class="line"><span class="keyword">var</span> cHeight = canvas.height;</span><br><span class="line"><span class="keyword">var</span> points = [];</span><br><span class="line"><span class="keyword">var</span> pointsLength = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> lineMaxLen = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pointsLength; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> Point(canvas,&#123;</span><br><span class="line">    x: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * cWidth),</span><br><span class="line">    y: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * cHeight),</span><br><span class="line">    vx: <span class="built_in">Math</span>.random() * <span class="number">4</span> - <span class="number">2</span>,</span><br><span class="line">    vy: <span class="built_in">Math</span>.random() * <span class="number">4</span> - <span class="number">2</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  points.push(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 清屏</span></span><br><span class="line">  context.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> p1 = points[i];</span><br><span class="line">    p1.update();</span><br><span class="line">    p1.draw();</span><br><span class="line">    <span class="comment">// 划线</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; points.length; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> p2 = points[j];</span><br><span class="line">      <span class="comment">// 勾股定理</span></span><br><span class="line">      <span class="keyword">var</span> l = <span class="built_in">Math</span>.sqrt(<span class="built_in">Math</span>.pow(p2.x - p1.x,<span class="number">2</span>) + <span class="built_in">Math</span>.pow(p2.y - p1.y,<span class="number">2</span>));</span><br><span class="line">      <span class="keyword">if</span> (l &lt; lineMaxLen) &#123;</span><br><span class="line">        context.beginPath();</span><br><span class="line">        context.moveTo(p1.x, p1.y);</span><br><span class="line">        context.lineTo(p2.x, p2.y);</span><br><span class="line">        <span class="comment">// 越远颜色越淡</span></span><br><span class="line">        context.strokeStyle=<span class="string">'rgba(0,0,0,'</span> + ((lineMaxLen - l) / lineMaxLen) + <span class="string">')'</span>;</span><br><span class="line">        context.stroke();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归调用</span></span><br><span class="line">  requestAnimationFrame(animate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动动画</span></span><br><span class="line">requestAnimationFrame(animate);</span><br></pre></td></tr></table></figure><p>此时效果如下：</p><p><img src="/2019/07/17/Canvas系列（13）：实战-星空连线图/4.gif" alt="完整效果"></p><p>源码请点击<a href="https://github.com/KaiOrange/canvas-demo/tree/master/13" target="_blank" rel="noopener">这里</a>。</p><p>我们已经大致实现了我们的效果，当然还需要做的是监听<code>window.resize</code>事件，以动态设置Canvas的宽高；也可以自己添加事件，让鼠标顶点的位置也加一个点；甚至可以改变速度，当两个点靠近的时候速度加大，远离的时候速度减小；当然可以把这个效果封装成一个可以复用的组件，放在你的项目中。这些后续事情就交给你了，相信你可以的。</p><p>我们博客背景中使用的是<a href="https://github.com/hustcc/canvas-nest.js" target="_blank" rel="noopener">canvas-nest.js</a>，你也可以观摩一下它源码，实现方式和我们的大同小异。</p>]]></content>
      
      
      <categories>
          
          <category> Canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas系列（12）：动画高级</title>
      <link href="/2019/06/30/Canvas%E7%B3%BB%E5%88%97%EF%BC%8812%EF%BC%89%EF%BC%9A%E5%8A%A8%E7%94%BB%E9%AB%98%E7%BA%A7/"/>
      <url>/2019/06/30/Canvas%E7%B3%BB%E5%88%97%EF%BC%8812%EF%BC%89%EF%BC%9A%E5%8A%A8%E7%94%BB%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<p>通过前面章节的学习，我们已经学会了直线和部分曲线运动，同时我们也学会了加速、减速、摩擦力等操作。那么动画还有什么需要深入研究下去的呢？当然有，那就是让动画更加平滑，更细滑。</p><hr><h2 id="缓动动画"><a href="#缓动动画" class="headerlink" title="缓动动画"></a>缓动动画</h2><p>在使用CSS3做变化的时候我们经常使用<code>transition-timing-function</code>，其中最有名的两个值就是<code>ease-in</code>和<code>ease-out</code>，那canvas种怎么实现这中如丝般细滑的缓动动画呢？看完本章你就知道了。缓动的公式如下：</p><blockquote><p>当前速度 = (最终位置 - 当前位置) * 缓动系数。<br>新的位置 = 当前位置 + 当前速度。</p></blockquote><p>我们看一个简单的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置x的值放在最左边</span></span><br><span class="line"><span class="keyword">var</span> ballX = ballRadius;</span><br><span class="line"><span class="keyword">var</span> ballY = centerY;</span><br><span class="line"><span class="comment">// x的速度 具体是多少在update的时候计算</span></span><br><span class="line"><span class="keyword">var</span> vx;</span><br><span class="line"><span class="comment">// 缓动系数</span></span><br><span class="line"><span class="keyword">var</span> easing = <span class="number">0.03</span>;</span><br><span class="line"><span class="comment">// 最终位置 在最右边</span></span><br><span class="line"><span class="keyword">var</span> targetX = canvas.width - ballRadius;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 当前速度 = (最终位置 - 当前位置) * 缓动系数</span></span><br><span class="line">  vx = (targetX - ballX) * easing;</span><br><span class="line">  <span class="comment">// 新的位置 = 当前位置 + 当前速度</span></span><br><span class="line">  ballX += vx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（12）：动画高级/1.gif" alt="缓动动画"></p><p>由上面公式中我们可以知道，缓动系数越大运动的越快。</p><h2 id="带有角度的缓动动画"><a href="#带有角度的缓动动画" class="headerlink" title="带有角度的缓动动画"></a>带有角度的缓动动画</h2><p>带有角度的缓动动画也是一样的，只要把y轴上的分量也计算进去就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置起始位置在左上角</span></span><br><span class="line"><span class="keyword">var</span> ballX = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> ballY = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 速度 具体是多少在update的时候计算</span></span><br><span class="line"><span class="keyword">var</span> vx,vy;</span><br><span class="line"><span class="comment">// 缓动系数</span></span><br><span class="line"><span class="keyword">var</span> easing = <span class="number">0.03</span>;</span><br><span class="line"><span class="comment">// 最终位置 在右下角</span></span><br><span class="line"><span class="keyword">var</span> targetX = canvas.width - ballRadius;</span><br><span class="line"><span class="keyword">var</span> targetY = canvas.height - ballRadius;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 当前速度 = (最终位置 - 当前位置) * 缓动系数</span></span><br><span class="line">  vx = (targetX - ballX) * easing;</span><br><span class="line">  vy = (targetY - ballY) * easing;</span><br><span class="line">  <span class="comment">// 新的位置 = 当前位置 + 当前速度</span></span><br><span class="line">  ballX += vx;</span><br><span class="line">  ballY += vy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（12）：动画高级/2.gif" alt="带有角度的缓动动画"></p><p>由上可以，缓动动画只需要根据给定结束的位置就可以了，无需根据角度再进行计算，使用起来非常方便。通常由于缓动动画比摩擦力更细滑，所以减速后停来下的动画，基本上都用缓动动画。</p><h2 id="缓动动画的其他使用场景"><a href="#缓动动画的其他使用场景" class="headerlink" title="缓动动画的其他使用场景"></a>缓动动画的其他使用场景</h2><p>缓动动画计算的过程其实一个简单数学推到，本身并不是什么高深的东西（当然做出来的效果确实很好）。我们的思维不能定势到只能做物体移动的动画，只要有从状态A平滑变化到状态B的场景都可以使用缓动动画，就比如宽高的变化，颜色的变化，透明度的变化等等。我们这里给一个小球半径变化的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小球画在中间位置</span></span><br><span class="line"><span class="keyword">var</span> ballX = centerX;</span><br><span class="line"><span class="keyword">var</span> ballY = centerY;</span><br><span class="line"><span class="comment">// 缓动系数</span></span><br><span class="line"><span class="keyword">var</span> easing = <span class="number">0.03</span>;</span><br><span class="line"><span class="comment">// 最终位置 在右下角</span></span><br><span class="line"><span class="keyword">var</span> targetBallRadius = <span class="number">70</span>;</span><br><span class="line"><span class="comment">// 半径变化速度</span></span><br><span class="line"><span class="keyword">var</span> vRadius;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 当前速度 = (最终位置 - 当前位置) * 缓动系数</span></span><br><span class="line">  vRadius = (targetBallRadius - ballRadius) * easing;</span><br><span class="line">  <span class="comment">// 新的位置 = 当前位置 + 当前速度</span></span><br><span class="line">  ballRadius += vRadius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（12）：动画高级/3.gif" alt="缓动动画的其他使用场景"></p><h2 id="弹性动画"><a href="#弹性动画" class="headerlink" title="弹性动画"></a>弹性动画</h2><p>缓动动画，当物体运动到终点的位置就会停下来；弹性动画，当物体运动到终点位置，会继续往前运动一下，然后反弹过来。那么怎么实现弹性动画呢？说出来你可能会不相信，缓动动画是速度使用缓动方程，而弹性动画是加速度使用缓动方程。也就是说：</p><blockquote><p>当前加速度 = (最终位置 - 当前位置) * 弹性系数。<br>新的速度 = 当前速度 + 当前加速度。<br>新的位置 = 当前的位置 + 新的速度。</p></blockquote><p>我们先来看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置起始位置在左边</span></span><br><span class="line"><span class="keyword">var</span> ballX = ballRadius;</span><br><span class="line"><span class="keyword">var</span> ballY = centerY;</span><br><span class="line"><span class="comment">// 初始速度</span></span><br><span class="line"><span class="keyword">var</span> vx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> vy = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 加速度</span></span><br><span class="line"><span class="keyword">var</span> ax;</span><br><span class="line"><span class="comment">// 弹性动画系数</span></span><br><span class="line"><span class="keyword">var</span> spring = <span class="number">0.01</span>;</span><br><span class="line"><span class="comment">// 最终位置 在最右边</span></span><br><span class="line"><span class="keyword">var</span> targetX = centerX;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 当前加速度 = (最终位置 - 当前位置) * 弹性系数</span></span><br><span class="line">  ax = (targetX - ballX) * spring;</span><br><span class="line">  <span class="comment">// 新的速度 = 当前速度 + 当前加速度</span></span><br><span class="line">  vx += ax;</span><br><span class="line">  <span class="comment">// 新的位置 = 当前的位置 + 新的速度</span></span><br><span class="line">  ballX += vx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（12）：动画高级/4.gif" alt="弹性动画"></p><p>小球从左边，走到了中间，到中间的时候加速度是0，再往右一点，加速度是负数也就是减速，等减速到最右边的时候速度为0，然后向左边加速。通过上面公式我们发现第一个公式跟缓动公式是一样的，只是结果一个是加速度一个是速度，至于系数虽然这里叫的不一样，其实代表的含义差不多。</p><h2 id="带有摩擦力的弹性动画"><a href="#带有摩擦力的弹性动画" class="headerlink" title="带有摩擦力的弹性动画"></a>带有摩擦力的弹性动画</h2><p>上面的弹性动画是理想状态下的，就是物理上所说的绝对光滑的情况下才会发生，而现实中往往是具有摩擦力的。摩擦力我们之前学过，弹性动画我们也学过，如果把两者结合起来就是带有摩擦力的弹性动画，公式如下：</p><blockquote><p>当前加速度 = (最终位置 - 当前位置) * 弹性系数。<br>没有摩擦力的新的速度 = 当前速度 + 当前加速度。<br>带有摩擦力的新的速度 = 没有摩擦力的新的速度 * 摩擦系数。<br>新的位置 = 当前的位置 + 带有摩擦力的新的速度</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置起始位置在左边</span></span><br><span class="line"><span class="keyword">var</span> ballX = ballRadius;</span><br><span class="line"><span class="keyword">var</span> ballY = centerY;</span><br><span class="line"><span class="comment">// 初始速度</span></span><br><span class="line"><span class="keyword">var</span> vx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> vy = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 加速度</span></span><br><span class="line"><span class="keyword">var</span> ax;</span><br><span class="line"><span class="comment">// 弹性动画系数</span></span><br><span class="line"><span class="keyword">var</span> spring = <span class="number">0.01</span>;</span><br><span class="line"><span class="comment">// 摩擦力系数</span></span><br><span class="line"><span class="keyword">var</span> friction = <span class="number">0.98</span>;</span><br><span class="line"><span class="comment">// 最终位置 在最右边</span></span><br><span class="line"><span class="keyword">var</span> targetX = centerX;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 当前加速度 = (最终位置 - 当前位置) * 弹性系数</span></span><br><span class="line">  ax = (targetX - ballX) * spring;</span><br><span class="line">  <span class="comment">// 没有摩擦力的新的速度 = 当前速度 + 当前加速度</span></span><br><span class="line">  vx += ax;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 带有摩擦力的新的速度 = 没有摩擦力的新的速度 * 摩擦系数</span></span><br><span class="line">  vx *= friction;</span><br><span class="line">  <span class="comment">// 新的位置 = 当前的位置 + 带有摩擦力的新的速度</span></span><br><span class="line">  ballX += vx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（12）：动画高级/5.gif" alt="带有摩擦力的弹性动画"></p><p>建议你自己写一写代码，或者自己把代码下载下来运行一下，代码地址：<a href="https://github.com/KaiOrange/canvas-demo" target="_blank" rel="noopener">https://github.com/KaiOrange/canvas-demo</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas系列（11）：动画中级</title>
      <link href="/2019/06/30/Canvas%E7%B3%BB%E5%88%97%EF%BC%8811%EF%BC%89%EF%BC%9A%E5%8A%A8%E7%94%BB%E4%B8%AD%E7%BA%A7/"/>
      <url>/2019/06/30/Canvas%E7%B3%BB%E5%88%97%EF%BC%8811%EF%BC%89%EF%BC%9A%E5%8A%A8%E7%94%BB%E4%B8%AD%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<p>上一章我们讲了简单的动画是如何绘制的，如果没有看上一章的童鞋，请点<a href="/2019/06/30/Canvas系列（10）：动画初级/#more">这里</a>，本章的内容也是接着上一章的内容，代码也只修改其中部分。</p><hr><h2 id="加速运动"><a href="#加速运动" class="headerlink" title="加速运动"></a>加速运动</h2><p>我上章中，涉及直线的运动，其速度都是恒定的，现在我们做一下加速的运行，同样的我们只给出核心的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置x的值放在最左边</span></span><br><span class="line"><span class="keyword">var</span> ballX = ballRadius;</span><br><span class="line"><span class="keyword">var</span> ballY = centerY;</span><br><span class="line"><span class="comment">// x的速度 初始值是0 然后逐渐加速</span></span><br><span class="line"><span class="keyword">var</span> vx = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 加速度</span></span><br><span class="line"><span class="keyword">var</span> ax = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX += vx;</span><br><span class="line">  <span class="comment">// 改变速度</span></span><br><span class="line">  vx += ax;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（11）：动画中级/1.gif" alt="加速运动"></p><p>那么减速运动怎么做呢？没错只要把加速度改一下就可以了，当然我们肯定要给一个初始速度：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置x的值放在最左边</span></span><br><span class="line"><span class="keyword">var</span> ballX = ballRadius;</span><br><span class="line"><span class="keyword">var</span> ballY = centerY;</span><br><span class="line"><span class="comment">// x的速度 初始值是0 然后逐渐加速</span></span><br><span class="line"><span class="keyword">var</span> vx = <span class="number">7</span>;</span><br><span class="line"><span class="comment">// 加速度</span></span><br><span class="line"><span class="keyword">var</span> ax = <span class="number">-0.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX += vx;</span><br><span class="line">  <span class="comment">// 改变速度</span></span><br><span class="line">  vx += ax;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（11）：动画中级/2.gif" alt="减速运动"></p><p>我们看到，小球先向右减速，当速度减到0的时候，然后又像左加速了，和物理课上讲的是一样的。</p><h2 id="带角度的加速运动"><a href="#带角度的加速运动" class="headerlink" title="带角度的加速运动"></a>带角度的加速运动</h2><p>带角度的加速运动，和之前的一样，由于加速度不变，我们需要对加速度分解。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置球的起始位置在左上角</span></span><br><span class="line"><span class="keyword">var</span> ballX = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> ballY = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 初始速度</span></span><br><span class="line"><span class="keyword">var</span> vx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> vy = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 角度</span></span><br><span class="line"><span class="keyword">var</span> angle = <span class="number">45</span>;</span><br><span class="line"><span class="comment">// 加速度是0,1</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0.1</span>;</span><br><span class="line"><span class="comment">// 计算加速度分量</span></span><br><span class="line"><span class="keyword">var</span> ax = a * <span class="built_in">Math</span>.cos(angle * <span class="built_in">Math</span>.PI / <span class="number">180</span>);</span><br><span class="line"><span class="keyword">var</span> ay = a * <span class="built_in">Math</span>.sin(angle * <span class="built_in">Math</span>.PI / <span class="number">180</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX += vx;</span><br><span class="line">  ballY += vy;</span><br><span class="line">  <span class="comment">// 改变速度</span></span><br><span class="line">  vx += ax;</span><br><span class="line">  vy += ay;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（11）：动画中级/3.gif" alt="带角度的运动"></p><h2 id="抛物线运动"><a href="#抛物线运动" class="headerlink" title="抛物线运动"></a>抛物线运动</h2><p>看到刚才的加速运动，我想问你自由落体运动怎么做？自由落体运动就是初速度为0，然后y方向上有一个加速度，我们第一个例子是x方向上的加速度，相信以你现在的实力，做出来是完全没问题的。现在我们看一下抛物线运动，抛物线运动是水平方向上的匀速直线运动，就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置球的起始位置在左下角</span></span><br><span class="line"><span class="keyword">var</span> ballX = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> ballY = canvas.height;</span><br><span class="line"><span class="comment">// 初始速度</span></span><br><span class="line"><span class="keyword">var</span> vx = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// y方向初始速度向上</span></span><br><span class="line"><span class="keyword">var</span> vy = <span class="number">-5</span>;</span><br><span class="line"><span class="comment">// y方向上的加速度是0.1（9.8太大了，所以就用了一个小的加速度）</span></span><br><span class="line"><span class="keyword">var</span> ay = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX += vx;</span><br><span class="line">  ballY += vy;</span><br><span class="line">  <span class="comment">// 改变y方向上的速度</span></span><br><span class="line">  vy += ay;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（11）：动画中级/4.gif" alt="抛物线运动"></p><h2 id="带反弹的抛物线运动"><a href="#带反弹的抛物线运动" class="headerlink" title="带反弹的抛物线运动"></a>带反弹的抛物线运动</h2><p>增加一点难度，小球触碰到最下面那么将反弹，通常反弹会损失一点能量，我们就设置每次反弹后的速度是原来的80%。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置球的起始位置在左下角</span></span><br><span class="line"><span class="keyword">var</span> ballX = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// y先抬高一点</span></span><br><span class="line"><span class="keyword">var</span> ballY = canvas.height - ballRadius;</span><br><span class="line"><span class="comment">// 初始速度</span></span><br><span class="line"><span class="keyword">var</span> vx = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// y方向初始速度向上</span></span><br><span class="line"><span class="keyword">var</span> vy = <span class="number">-4</span>;</span><br><span class="line"><span class="comment">// y方向上的加速度是0.1（9.8太大了，所以就用了一个小的加速度）</span></span><br><span class="line"><span class="keyword">var</span> ay = <span class="number">0.1</span>;</span><br><span class="line"><span class="comment">// 符号表示方向 反弹后速度减小</span></span><br><span class="line"><span class="keyword">var</span> bounce = <span class="number">-0.8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX += vx;</span><br><span class="line">  ballY += vy;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果小球的高度 到最下面了 那么就设置最下面你的值 并且就反弹</span></span><br><span class="line">  <span class="keyword">if</span> (ballY &gt; canvas.height - ballRadius) &#123;</span><br><span class="line">    ballY = canvas.height - ballRadius;</span><br><span class="line">    vy = vy * bounce;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 改变y方向上的速度</span></span><br><span class="line">  vy += ay;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（11）：动画中级/5.gif" alt="带反弹的抛物线运动"></p><h2 id="摩擦力"><a href="#摩擦力" class="headerlink" title="摩擦力"></a>摩擦力</h2><p>带有摩擦力的运动往往速度会逐渐变小直到为0（我们这里不考虑其他外力的作用），这和上面带有反方向加速度的减速运动很相似，但是减速运动速度为0的时候会反方向加速，带有摩擦力的运动不会反向加速。我们就改一改上面的那个减速的运动，直接把加速度改成摩擦力。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置x的值放在最左边</span></span><br><span class="line"><span class="keyword">var</span> ballX = ballRadius;</span><br><span class="line"><span class="keyword">var</span> ballY = centerY;</span><br><span class="line"><span class="comment">// x的速度 初始值是0 然后逐渐加速</span></span><br><span class="line"><span class="keyword">var</span> vx = <span class="number">7</span>;</span><br><span class="line"><span class="comment">// 摩擦力系数</span></span><br><span class="line"><span class="keyword">var</span> friction = <span class="number">0.97</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX += vx;</span><br><span class="line">  <span class="comment">// 速度减小</span></span><br><span class="line">  vx *= friction;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/30/Canvas系列（11）：动画中级/6.gif" alt="摩擦力"></p>]]></content>
      
      
      <categories>
          
          <category> Canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas系列（10）：动画初级</title>
      <link href="/2019/06/30/Canvas%E7%B3%BB%E5%88%97%EF%BC%8810%EF%BC%89%EF%BC%9A%E5%8A%A8%E7%94%BB%E5%88%9D%E7%BA%A7/"/>
      <url>/2019/06/30/Canvas%E7%B3%BB%E5%88%97%EF%BC%8810%EF%BC%89%EF%BC%9A%E5%8A%A8%E7%94%BB%E5%88%9D%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<p>今天开始就要讲一些进阶的东西了，是不是很兴奋呢？</p><hr><h2 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h2><p>所谓动画其实就是快读绘制图片，由于人的眼睛更不上屏幕绘制的速率，所以看到的就好像连着的一样，也就形成了动画，动画片就是这个原理，canvas中的动画也是这个原理。提到动画就不得不说一个函数了，那就是<code>requestAnimationFrame</code>。这是一个定时执行的函数，类似于<code>setTimeout</code>，只是间隔时间不再有我们自己手动去设定，而是由计算机自己去计算，这样比我们直接设定的误差更小（通常我们是定1000/60，约等于16.7毫秒，因为CPU的频率一般是60Hz，也就是1秒最多可以刷新60次界面）。但是往往浏览器对<code>requestAnimationFrame</code>的支持不够友好，那这就需要polyfill，通常一种简单的polyfill可以这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Date</span>.now)</span><br><span class="line">    <span class="built_in">Date</span>.now = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> lastTime = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span>  <span class="built_in">window</span>.requestAnimationFrame       ||</span><br><span class="line">          <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">          <span class="built_in">window</span>.mozRequestAnimationFrame    ||</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">            <span class="keyword">var</span> nextTime = <span class="built_in">Math</span>.max(lastTime + <span class="number">16</span>, now);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              callback(lastTime = nextTime);</span><br><span class="line">            &#125;,nextTime - now);</span><br><span class="line">          &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与之对应的清空定时器的polyfill</span></span><br><span class="line"><span class="built_in">window</span>.cancelAnimationFrame = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>  <span class="built_in">window</span>.cancelAnimationFrame       ||</span><br><span class="line">          <span class="built_in">window</span>.webkitCancelAnimationFrame ||</span><br><span class="line">          <span class="built_in">window</span>.mozCancelAnimationFrame    ||</span><br><span class="line">          <span class="built_in">window</span>.clearTimeout</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>我们可以看到，他的做法是如果没有<code>requestAnimationFrame</code>那么使用<code>setTimeout</code>来做回退处理。通过上面我们可以看到<code>callback</code>有一个参数，就是时间，通常对于游戏等精度要求比较高的情况下我们使用这个时间和速度来计算当前帧的位置，这样可以有效避免，硬件配置所带来的优势。举个例子，比如我配置高可能比配置低的多画了几帧，那么同样的速度我就比别人走的快，而基于这个时间来计算的话就不会有问题了，如果配置低的少绘制几帧，那么时间间隔会变大相同的速度，距离也会边远。这就相当于直接跳过了中间几帧。当然对于这个时间的值不同浏览器实现的方式可能不一样，就比如谷歌的是从0毫秒开始逐渐递增的，有的浏览器是当前的毫秒数逐渐递增的，对于绘制图像的时候我们更多的是关注时间差，所以影响不是很大，就比如谷歌的第一帧传的时间可能是0，第二帧可能传的是17，而某些浏览器可能第一帧传的是1561859029000，第二帧传的是1561859029017，我们计算的时候往往是根据两者的差17来计算下一帧的位置。当然，对于一些简单与时间无关的动画特效，也可以不用关注这个时间，直接根据每次绘制时增加的速度去计算就好了，我们这里为了简单起见就不去动这个事件了。同时为了减少代码的长度我们就不使用polyfill了，如果是一个上线的项目最好使用上。</p><h2 id="匀速直线运动"><a href="#匀速直线运动" class="headerlink" title="匀速直线运动"></a>匀速直线运动</h2><p>匀速直线运动是最简单的动画，由于我们现在需要不断地檫除然后重新绘制，所以我们需要重新给出我们此时的JavaScript代码，如下，也可以在<a href="https://github.com/KaiOrange/canvas-demo" target="_blank" rel="noopener">这里</a>查看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="keyword">var</span> sW = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> lW = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> spacing = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制坐标系</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawCoordinate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.beginPath();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; canvas.width; x+=spacing) &#123;</span><br><span class="line">    context.moveTo(x, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(x % (spacing * <span class="number">5</span>) === <span class="number">0</span>)&#123;</span><br><span class="line">      context.lineTo(x, lW);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      context.lineTo(x, sW);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; canvas.height; y+=spacing) &#123;</span><br><span class="line">    context.moveTo(<span class="number">0</span>, y);</span><br><span class="line">    <span class="keyword">if</span>(y % (spacing * <span class="number">5</span>) === <span class="number">0</span>)&#123;</span><br><span class="line">      context.lineTo(lW, y);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      context.lineTo(sW, y);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  context.strokeStyle=<span class="string">'black'</span>;</span><br><span class="line">  context.stroke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 中心坐标(centerX,centerY)</span></span><br><span class="line"><span class="keyword">var</span> centerX = canvas.width / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> centerY = canvas.height / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小球圆心的坐标</span></span><br><span class="line"><span class="keyword">var</span> ballX = centerX;</span><br><span class="line"><span class="keyword">var</span> ballY = centerY;</span><br><span class="line"><span class="comment">// 小球的半径</span></span><br><span class="line"><span class="keyword">var</span> ballRadius = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX += <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 如果超出去 那么回到初始位置</span></span><br><span class="line">  <span class="keyword">if</span> (ballX &gt; <span class="number">300</span> + ballRadius) &#123;</span><br><span class="line">    ballX = -ballRadius;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.arc(ballX, ballY, ballRadius, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">360</span>);</span><br><span class="line">  context.closePath();</span><br><span class="line">  context.fillStyle=<span class="string">'orange'</span>;</span><br><span class="line">  context.fill();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时没有轨迹的绘制 所以就是一个空函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawLocus</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 清屏</span></span><br><span class="line">  context.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绘制坐标系</span></span><br><span class="line">  drawCoordinate();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//绘制轨迹 有可能会用到 当前是空</span></span><br><span class="line">  drawLocus();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新小球位置</span></span><br><span class="line">  updateBall();</span><br><span class="line">  <span class="comment">// 绘制球</span></span><br><span class="line">  drawBall();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归调用</span></span><br><span class="line">  requestAnimationFrame(animate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动动画</span></span><br><span class="line">requestAnimationFrame(animate);</span><br></pre></td></tr></table></figure><p>看到<code>animate</code>还是了吗，此函数是canvas动画的“套路”，一定要熟悉它，几乎所有动画相关的代码都有该函数的身影。此时的效果如下：</p><p><img src="/2019/06/30/Canvas系列（10）：动画初级/1.gif" alt="匀速直线运动"></p><h2 id="匀速圆周运动"><a href="#匀速圆周运动" class="headerlink" title="匀速圆周运动"></a>匀速圆周运动</h2><p>匀速圆周运动和匀速直线运动代码差不多，唯一不同的地方就是<code>drawBall</code>和<code>updateBall</code>这两个方法，当然涉及到一点小小的数学计算，这里直接给出变动的部分，变动的代码大多数也是相似的，你只要把注意力放在<code>updateBall</code>中就好了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆周运动半径</span></span><br><span class="line"><span class="keyword">var</span> radius = <span class="number">50</span>;</span><br><span class="line"><span class="comment">// 小球的角度</span></span><br><span class="line"><span class="keyword">var</span> angle = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX = centerX + <span class="built_in">Math</span>.cos(angle) * radius;</span><br><span class="line">  ballY = centerY + <span class="built_in">Math</span>.sin(angle) * radius;</span><br><span class="line">  <span class="comment">// 需要注意的是Math.cos和Math.sin中的参数是弧度而不是角度</span></span><br><span class="line">  <span class="comment">// 也就是说2*Math.PI是一周约等于6.28 这里每次加0.08弧度</span></span><br><span class="line">  angle += <span class="number">0.08</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制轨迹</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawLocus</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.beginPath();</span><br><span class="line">  context.arc(centerX, centerY, radius, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">360</span>);</span><br><span class="line">  context.closePath();</span><br><span class="line">  context.strokeStyle=<span class="string">'red'</span>;</span><br><span class="line">  context.stroke();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>出来的效果如下：</p><p><img src="/2019/06/30/Canvas系列（10）：动画初级/2.gif" alt="匀速圆周运动"></p><h2 id="椭圆运动"><a href="#椭圆运动" class="headerlink" title="椭圆运动"></a>椭圆运动</h2><p>圆周运动和椭圆运动很相似，直接给代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 椭圆运动半径</span></span><br><span class="line"><span class="keyword">var</span> radiusX = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> radiusY = <span class="number">50</span>;</span><br><span class="line"><span class="comment">// 小球的角度</span></span><br><span class="line"><span class="keyword">var</span> angle = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX = centerX + <span class="built_in">Math</span>.cos(angle) * radiusX;</span><br><span class="line">  ballY = centerY + <span class="built_in">Math</span>.sin(angle) * radiusY;</span><br><span class="line">  angle += <span class="number">0.08</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轨迹</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawLocus</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 绘制椭圆</span></span><br><span class="line">  context.save();</span><br><span class="line">  context.beginPath();</span><br><span class="line">  <span class="comment">// 将坐标系平移到圆心位置</span></span><br><span class="line">  context.translate(centerX, centerY );</span><br><span class="line">  <span class="comment">// 把圆缩放后使之形成椭圆</span></span><br><span class="line">  context.scale(<span class="number">1</span>, radiusY / radiusX);</span><br><span class="line">  <span class="comment">// 此时(0,0)是平移后的位置 也就是原坐标系的(centerX, centerY)</span></span><br><span class="line">  context.arc(<span class="number">0</span>, <span class="number">0</span>, radiusX, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">360</span>);</span><br><span class="line">  context.strokeStyle=<span class="string">'red'</span>;</span><br><span class="line">  context.stroke();</span><br><span class="line">  context.restore();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>出来的效果如下：</p><p><img src="/2019/06/30/Canvas系列（10）：动画初级/3.gif" alt="椭圆运动"></p><h2 id="左右来回运动"><a href="#左右来回运动" class="headerlink" title="左右来回运动"></a>左右来回运动</h2><p>通过观察我们可以发现，椭圆运动和圆周运动的区别就是椭圆运动的某一个轴的半径和另一个轴的半径是不同的，那么如果某一个周的半径是0会发生什么情况呢。这就是左右来回的运动。我们修改一下代码，并且把绘制轨迹的函数<code>drawCoordinate</code>去掉吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 小球的角度</span></span><br><span class="line"><span class="keyword">var</span> angle = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> radiusX = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX = centerX + <span class="built_in">Math</span>.sin(angle) * radiusX;</span><br><span class="line">  angle += <span class="number">0.08</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出来的效果如下：</p><p><img src="/2019/06/30/Canvas系列（10）：动画初级/4.gif" alt="左右来回运动"></p><h2 id="正弦运动"><a href="#正弦运动" class="headerlink" title="正弦运动"></a>正弦运动</h2><p>上面是y不变，x利用三角函数计算的值，现在我们x每次增加一点，然后y轴使用三角函数，那就是正弦运动了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 小球的角度</span></span><br><span class="line"><span class="keyword">var</span> angle = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> radiusX = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> radiusY = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">var</span> ballRadius = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ballX += <span class="number">2</span>;</span><br><span class="line">  ballY = centerY + <span class="built_in">Math</span>.sin(angle) * radiusY;</span><br><span class="line">  angle += <span class="number">0.08</span>;</span><br><span class="line">  <span class="comment">// 超出去以后左边显示</span></span><br><span class="line">  <span class="keyword">if</span> (ballX &gt; <span class="number">300</span> + ballRadius) &#123;</span><br><span class="line">    ballX = -ballRadius;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出来的效果如下：</p><p><img src="/2019/06/30/Canvas系列（10）：动画初级/5.gif" alt="正弦运动"></p><h2 id="带角度的匀速运动"><a href="#带角度的匀速运动" class="headerlink" title="带角度的匀速运动"></a>带角度的匀速运动</h2><p>更多的时候我们会遇到带有一定角度的匀速运动，比如速度是每次更新2个像素，那么实际上x和y都是他的一个分量，现在看一下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 小球圆心的坐标</span></span><br><span class="line"><span class="keyword">var</span> ballX = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> ballY = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 小球的半径</span></span><br><span class="line"><span class="keyword">var</span> ballRadius = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里写角度看起来比较直观</span></span><br><span class="line"><span class="keyword">var</span> angle = <span class="number">45</span>;</span><br><span class="line"><span class="keyword">var</span> spend = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新小球</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateBall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 绘制的时候需要把角度转换为弧度</span></span><br><span class="line">  <span class="keyword">var</span> vx = <span class="built_in">Math</span>.cos(angle * <span class="built_in">Math</span>.PI / <span class="number">180</span>) * spend;</span><br><span class="line">  <span class="keyword">var</span> vy = <span class="built_in">Math</span>.sin(angle * <span class="built_in">Math</span>.PI / <span class="number">180</span>) * spend;</span><br><span class="line">  ballX += vx;</span><br><span class="line">  ballY += vy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出来的效果如下：</p><p><img src="/2019/06/30/Canvas系列（10）：动画初级/6.gif" alt="匀速直线运动"></p><p>我们可以看到小球在二维坐标系中的运动和速度的分解与合成有很大的关系。良好的数学和物理知识将帮助我们在这条路上走的更远。</p>]]></content>
      
      
      <categories>
          
          <category> Canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas系列（9）：其他API</title>
      <link href="/2019/06/29/Canvas%E7%B3%BB%E5%88%97%EF%BC%889%EF%BC%89%EF%BC%9A%E5%85%B6%E4%BB%96API/"/>
      <url>/2019/06/29/Canvas%E7%B3%BB%E5%88%97%EF%BC%889%EF%BC%89%EF%BC%9A%E5%85%B6%E4%BB%96API/</url>
      
        <content type="html"><![CDATA[<p>前面的内容讲了不少Canva的API，这章把剩下的API一讲吧。这个系列中以后基本不糊涉及新的API了，因为，这章完了我们就真的学完了！</p><hr><h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><p>Canvas中的阴影和CSS3中的阴影很像，通过本系列课程的学习，估计你已经发现了，CSS3的好多知识和Canvas是相通的。我们直接看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 阴影X偏移量 默认0</span></span><br><span class="line">context.shadowOffsetX=<span class="number">5</span>;</span><br><span class="line"><span class="comment">// 阴影Y偏移量 默认0</span></span><br><span class="line">context.shadowOffsetY=<span class="number">5</span>;</span><br><span class="line"><span class="comment">// 阴影颜色 默认透明</span></span><br><span class="line">context.shadowColor=<span class="string">'orange'</span>;</span><br><span class="line"><span class="comment">// 阴影模糊值 默认0</span></span><br><span class="line">context.shadowBlur=<span class="number">5</span>;</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阴影不模糊</span></span><br><span class="line">context.shadowBlur=<span class="number">0</span>;</span><br><span class="line">context.fillRect(<span class="number">80</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">context.shadowBlur=<span class="number">5</span>;</span><br><span class="line"><span class="comment">// 使用在描边上</span></span><br><span class="line">context.strokeRect(<span class="number">150</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">context.font=<span class="string">'bold 30px 微软雅黑'</span>;</span><br><span class="line">context.shadowBlur=<span class="number">3</span>;</span><br><span class="line"><span class="comment">// 使用在文字上</span></span><br><span class="line">context.fillText(<span class="string">"文字模糊"</span>, <span class="number">10</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2019/06/29/Canvas系列（9）：其他API/1.jpeg" alt="模糊"></p><p>由我们可以看到，阴影其实就是当前区域往左边偏移了一点，再往右边偏移了一点，然后给个颜色，给个模糊就可以了。当然偏移量可以是负值，表示方向，这个就不说了。同样由上我们可以知道阴影可以用在图形上也可以用在文字上，那么可以用在图片上吗？其实是不可以的，但是有方法可以，就是具有阴影地描边一个与图片大小位置全相同的矩形就可以了。</p><h2 id="globalAlpha"><a href="#globalAlpha" class="headerlink" title="globalAlpha"></a>globalAlpha</h2><p><code>globalAlpha</code>是设置全局的透明度，取值范围是<code>0~1</code>，0表示透明，1表示不透明。我们之前没有设置所绘制的图形的透明度，但是都是不透明的，所以猜都能猜出来默认值是1。它的值可以是字符串类型，也可以数值类型，我们直接在上面代码中第十行中加入代码<code>context.globalAlpha=0.5;</code>看到的效果如下：</p><p><img src="/2019/06/29/Canvas系列（9）：其他API/2.jpeg" alt="globalAlpha"></p><p>可以看到<code>globalAlpha</code>对它和它后面所绘制的图形是生效的，那么如何绘制完后恢复状态呢，还记得前面的内容吗？</p><h2 id="globalCompositeOperation"><a href="#globalCompositeOperation" class="headerlink" title="globalCompositeOperation"></a>globalCompositeOperation</h2><p><code>globalCompositeOperation</code>描述了2个图形交叉的时候是什么样子，它的值有很多，这里就盗一张很经典的图：</p><p><img src="/2019/06/29/Canvas系列（9）：其他API/3.jpeg" alt="globalCompositeOperation取值"></p><p>我们这里就给一个值为<code>xor（异或）</code>的例子吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">context.globalCompositeOperation=<span class="string">'xor'</span>;</span><br><span class="line"></span><br><span class="line">context.fillStyle=<span class="string">'orange'</span>;</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">context.fillStyle=<span class="string">'blue'</span>;</span><br><span class="line">context.fillRect(<span class="number">35</span>,<span class="number">35</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2019/06/29/Canvas系列（9）：其他API/4.jpeg" alt="xor"></p><h2 id="clearRect"><a href="#clearRect" class="headerlink" title="clearRect"></a>clearRect</h2><p>在<a href="/2019/06/16/Canvas系列（3）：路径与状态/#more">路径与状态那一章</a>我们使用clip来裁剪区域，与裁剪相似的还有一个clearRect用来清空区域，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">context.fillStyle=<span class="string">'orange'</span>;</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">context.fillStyle=<span class="string">'blue'</span>;</span><br><span class="line">context.fillRect(<span class="number">35</span>,<span class="number">35</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空一个小区域</span></span><br><span class="line">context.clearRect(<span class="number">60</span>, <span class="number">60</span>, <span class="number">25</span>, <span class="number">25</span>);</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2019/06/29/Canvas系列（9）：其他API/5.jpeg" alt="清空区域"></p><p><code>clearRect</code>用的挺多的，通常做动画的时候使用它来清空整个屏幕，然后再重新绘制图案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清空整个canvas</span></span><br><span class="line">context.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br></pre></td></tr></table></figure><h2 id="toDataURL"><a href="#toDataURL" class="headerlink" title="toDataURL"></a>toDataURL</h2><p>与上面不同的是<code>toDataURL</code>并不是context上的方法，而是canvas对象的方法，来看个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">context.fillStyle=<span class="string">'orange'</span>;</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">context.fillStyle=<span class="string">'blue'</span>;</span><br><span class="line">context.fillRect(<span class="number">35</span>,<span class="number">35</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> src = canvas.toDataURL(<span class="string">"image/png"</span>);</span><br><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = src;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(image)</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2019/06/29/Canvas系列（9）：其他API/6.jpeg" alt="toDataURL"></p><p><code>canvas.toDataURL</code>会转换为Base64格式的字符串，然后图片可以直接使用它，以显示出来。上面我们可以看到背景是不一样的，因为左侧的背景是我们通过CSS来设置的，而不是Canvas来绘制出来的。</p><hr><p>至此，我们学完了Canvas几乎全部的API，恭喜你啊。此时，你又什么感想呢？是成就满满？还是感觉并没有学到些什么？如果你感觉成就满满，说明你是真的是学到了东西，如果还感觉没学到什么，也不要灰心，因为Canvas的学习并不仅仅是API，更多的是编程的一些技巧。好多时候我们学习编程其实学的只是一些语法和API而更多的经验还需要不断地在实践中去历练，往往一些编程技巧比语法和API要更重要，现在你学习的是HTML5中的Canvas，其实安卓、Java中的Swing、C++中的MFC（都是老技术了，新技术真心快学不懂了）等等绘制图片的技能都相差无几。我们后面的课程就会深入这些技能。</p>]]></content>
      
      
      <categories>
          
          <category> Canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas系列（8）：像素操作</title>
      <link href="/2019/06/29/Canvas%E7%B3%BB%E5%88%97%EF%BC%888%EF%BC%89%EF%BC%9A%E5%83%8F%E7%B4%A0%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/06/29/Canvas%E7%B3%BB%E5%88%97%EF%BC%888%EF%BC%89%EF%BC%9A%E5%83%8F%E7%B4%A0%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>经常拍照的同学会使用图片处理软件，给自己的照片加上各种效果。图片处理软件也是软件，同样也是由代码写的，那么如何实现图片处理呢，这章我们就探讨一下这个问题。</p><hr><p>canvas中像素处理涉及到3个方法，我们先来看一下API吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取ImageDate 参数是左上角的左边(sx, sy)以及获取像素的宽度sw 和 高度sh</span></span><br><span class="line"><span class="comment">// 他返回一个ImageData对象</span></span><br><span class="line">context.getImageData(sx, sy, sw, sh);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 将处理后的ImageData设置到canvas中 由于是覆盖了canvas其中部分区域</span></span><br><span class="line"><span class="comment">// 所以用的是put而不是set（并没有setImageData，put全部覆盖就可以相当于set）</span></span><br><span class="line">context.putImageData(imagedata, dx, dy);</span><br><span class="line"><span class="comment">// 该方法还有可选参数</span></span><br><span class="line">context.putImageData(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建一个宽width 高height的ImageData对象</span></span><br><span class="line">context.createImageData(width, height);</span><br><span class="line"><span class="comment">// 也可以根据已有的ImageData对象来创建</span></span><br><span class="line">context.createImageData(imagedata);</span><br></pre></td></tr></table></figure><p>这几个API中，过来过去绕不过一个对象就是<code>ImageData</code>，<code>ImageData</code>对象到底是什么呢？他是一个描述了图片信息的对象，拥有三个属性：<code>width</code>、<code>height</code>、<code>data</code>。其中<code>width</code>、<code>height</code>就不用说了，分别是图片的宽度和高度，重点是这个<code>data</code>属性，他是一个<code>Uint8ClampedArray</code>对象，这个对象没听过？完全没问题，你就把他当做数组来处理，就可以了。这个“数组”是一个很长很长的一维数组，内容大概是<code>[r0,g0,b0,a0,r1,g1,b1,a1...]</code>这种形式的，其中<code>r0,g0,b0,a0</code>分别是图片左上角第一个像素的红绿蓝和透明度的值，后面分别是第二个像素，第三个像素等等的值。其中rgbb取值都是<code>0~255</code>，a如果是255表示不透明，之所以不按100来算是为了处理起来方便。</p><h2 id="底片效果"><a href="#底片效果" class="headerlink" title="底片效果"></a>底片效果</h2><p>在写底片效果代码之前我们先绘制一张图片。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = <span class="string">"lufei.jpeg"</span>;</span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.drawImage(image, <span class="number">0</span>, <span class="number">0</span>,image.width / <span class="number">2</span>, image.height / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们的图片比较大，我们就缩小一半来展示（虽然此时图片仍然未显示完，不过不影响），此时的效果是这个样子的：</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/1.jpeg" alt="初始值"></p><p>现在做底片处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = <span class="string">"lufei.jpeg"</span>;</span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.drawImage(image, <span class="number">0</span>, <span class="number">0</span>,image.width / <span class="number">2</span>, image.height / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">  <span class="comment">// 获取像素数据</span></span><br><span class="line">  <span class="keyword">var</span> data = imageData.data;</span><br><span class="line">  <span class="comment">// 循环每次加4表示一个一个像素的处理，这个是常用套路</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i+=<span class="number">4</span>) &#123;</span><br><span class="line">    data[i + <span class="number">0</span>] = <span class="number">255</span> - data[i + <span class="number">0</span>];</span><br><span class="line">    data[i + <span class="number">1</span>] = <span class="number">255</span> - data[i + <span class="number">1</span>];</span><br><span class="line">    data[i + <span class="number">2</span>] = <span class="number">255</span> - data[i + <span class="number">2</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置像素数据</span></span><br><span class="line">  context.putImageData(imageData, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出来的效果如下：</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/2.jpeg" alt="底片效果"></p><p>你或许会问为什么<code>putImageData</code>没有传入图片的宽度和高度呢，其实<code>ImageData</code>对象中本来就有高度和宽度，所以就无需传入了。另外还有一点需要注意，如果你在<code>getImageData</code>的时候控制台报这样的错误说明你跨域了：</p><blockquote><p>Uncaught DOMException: Failed to execute ‘getImageData’ on ‘CanvasRenderingContext2D’: The canvas has been tainted by cross-origin data.</p></blockquote><p><code>getImageData</code>不允许访问非本域的图片，解决办法是自己启动一个服务，比如是用<code>anywhere</code>，使用方法就是在你的<code>index.html</code>所在的目录下的，使用终端输入下面两行命令，这样就可以使用服务打开了，记得把图片放在同一级目录下，图片在<a href="lufei.jpeg">这里</a>，点右键另存为同级目录下就可以了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g anywhere</span><br><span class="line">anywhere</span><br></pre></td></tr></table></figure><h2 id="黑白效果"><a href="#黑白效果" class="headerlink" title="黑白效果"></a>黑白效果</h2><p>直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = <span class="string">"lufei.jpeg"</span>;</span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.drawImage(image, <span class="number">0</span>, <span class="number">0</span>,image.width / <span class="number">2</span>, image.height / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">  <span class="comment">// 获取像素数据</span></span><br><span class="line">  <span class="keyword">var</span> data = imageData.data;</span><br><span class="line">  <span class="comment">// 循环每次加4表示一个一个像素的过，这个是常用套路</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i+=<span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> average = ( data[i + <span class="number">0</span>] + data[i + <span class="number">1</span>] + data[i + <span class="number">2</span>] ) / <span class="number">3</span>;</span><br><span class="line">    data[i + <span class="number">0</span>] = average;</span><br><span class="line">    data[i + <span class="number">1</span>] = average;</span><br><span class="line">    data[i + <span class="number">2</span>] = average;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置像素数据</span></span><br><span class="line">  context.putImageData(imageData, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如你看到的，像素处理都是一个模式，只是把中间处理像素的算法换了一下，此时的效果如下，是不是很酷？</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/3.jpeg" alt="黑白效果"></p><p>当然黑白效果还可以使用加权平均数来处理，这种网上推崇的比较多，毕竟上面这种比较泛白，处理起来也很简单，只需要把计算<code>average</code>的代码换一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> average = data[i + <span class="number">0</span>] * <span class="number">0.3</span> + data[i + <span class="number">1</span>] * <span class="number">0.6</span> + data[i + <span class="number">2</span>] * <span class="number">0.1</span>;</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/2019/06/29/Canvas系列（8）：像素操作/4.jpeg" alt="加权后的黑白效果"></p><h2 id="变亮与变暗"><a href="#变亮与变暗" class="headerlink" title="变亮与变暗"></a>变亮与变暗</h2><p>变量就是每个像素的颜色加上一个值，直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = <span class="string">"lufei.jpeg"</span>;</span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.drawImage(image, <span class="number">0</span>, <span class="number">0</span>,image.width / <span class="number">2</span>, image.height / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">  <span class="keyword">var</span> data = imageData.data;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i+=<span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> brightness = <span class="number">50</span>;</span><br><span class="line">    data[i + <span class="number">0</span>] += brightness;</span><br><span class="line">    data[i + <span class="number">1</span>] += brightness;</span><br><span class="line">    data[i + <span class="number">2</span>] += brightness;</span><br><span class="line">  &#125;</span><br><span class="line">  context.putImageData(imageData, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的效果如下：</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/5.jpeg" alt="变亮"></p><p>你猜猜变暗是怎么处理的？没错就是减去一个值，你挺聪明的！！！直接修改<code>var brightness = -50;</code>，效果如下：</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/6.jpeg" alt="变暗"></p><h2 id="复古效果"><a href="#复古效果" class="headerlink" title="复古效果"></a>复古效果</h2><p>复古效果算法比较复杂，需要每一个颜色做加权处理，其算法是别人研究好久得出的，我们都是站在巨人的肩膀上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = <span class="string">"lufei.jpeg"</span>;</span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.drawImage(image, <span class="number">0</span>, <span class="number">0</span>,image.width / <span class="number">2</span>, image.height / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">  <span class="keyword">var</span> data = imageData.data;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i+=<span class="number">4</span>) &#123;</span><br><span class="line">    data[i + <span class="number">0</span>] = <span class="number">0.39</span> * data[i + <span class="number">0</span>] + <span class="number">0.76</span> * data[i + <span class="number">1</span>] + <span class="number">0.18</span> * data[i + <span class="number">2</span>];</span><br><span class="line">    data[i + <span class="number">1</span>] = <span class="number">0.35</span> * data[i + <span class="number">0</span>] + <span class="number">0.68</span> * data[i + <span class="number">1</span>] + <span class="number">0.16</span> * data[i + <span class="number">2</span>];;</span><br><span class="line">    data[i + <span class="number">2</span>] = <span class="number">0.27</span> * data[i + <span class="number">0</span>] + <span class="number">0.53</span> * data[i + <span class="number">1</span>] + <span class="number">0.13</span> * data[i + <span class="number">2</span>];;</span><br><span class="line">  &#125;</span><br><span class="line">  context.putImageData(imageData, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/7.jpeg" alt="复古效果"></p><h2 id="蒙层"><a href="#蒙层" class="headerlink" title="蒙层"></a>蒙层</h2><p>蒙层就是某一个色道取平均值，另外2个色道为0就可以了，以红色蒙层为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = <span class="string">"lufei.jpeg"</span>;</span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.drawImage(image, <span class="number">0</span>, <span class="number">0</span>,image.width / <span class="number">2</span>, image.height / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">  <span class="keyword">var</span> data = imageData.data;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i+=<span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> average = ( data[i + <span class="number">0</span>] + data[i + <span class="number">1</span>] + data[i + <span class="number">2</span>] ) / <span class="number">3</span>;</span><br><span class="line">    data[i + <span class="number">0</span>] = average;</span><br><span class="line">    data[i + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    data[i + <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  context.putImageData(imageData, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/8.jpeg" alt="红色蒙层"></p><p>绿色蒙层和蓝色蒙层我相信你也会了，这里就不再给代码了。</p><h2 id="透明效果"><a href="#透明效果" class="headerlink" title="透明效果"></a>透明效果</h2><p>我们说了这么多，都是以色道为例的，从来没有涉及到透明度，现在就给一个透明度的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = <span class="string">"lufei.jpeg"</span>;</span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.drawImage(image, <span class="number">0</span>, <span class="number">0</span>,image.width / <span class="number">2</span>, image.height / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">  <span class="keyword">var</span> data = imageData.data;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i+=<span class="number">4</span>) &#123;</span><br><span class="line">    data[i + <span class="number">3</span>] = <span class="number">0.5</span> * data[i + <span class="number">3</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  context.putImageData(imageData, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/9.jpeg" alt="透明效果"></p><p>我们这里给的透明度细数是0.5，所以透明度变为原来的50%，你也可以修改为自己喜欢的数值。</p><h2 id="创建ImageData"><a href="#创建ImageData" class="headerlink" title="创建ImageData"></a>创建ImageData</h2><p>上面我们一直在玩<code>getImageData</code>和<code>putImageData</code>，至于<code>createImageData</code>都没有说过，其实这个用的也并不多，这里给一个例子结束本章吧：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> imageData = context.createImageData(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> data = imageData.data;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i+=<span class="number">4</span>) &#123;</span><br><span class="line">  data[i + <span class="number">0</span>] = <span class="number">255</span>;</span><br><span class="line">  <span class="comment">// 下面这行很重要，默认创建后rgba的值都是0，所以也就是透明的</span></span><br><span class="line">  data[i + <span class="number">3</span>] = <span class="number">255</span>;</span><br><span class="line">&#125;</span><br><span class="line">context.putImageData(imageData, <span class="number">10</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><p>效果如下，是不是又学会了一种画正方形的方法了？</p><p><img src="/2019/06/29/Canvas系列（8）：像素操作/10.jpeg" alt="createImageData"></p>]]></content>
      
      
      <categories>
          
          <category> Canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>证明0.999999999...等于1</title>
      <link href="/2019/06/29/%E8%AF%81%E6%98%8E0-999999999-%E7%AD%89%E4%BA%8E1/"/>
      <url>/2019/06/29/%E8%AF%81%E6%98%8E0-999999999-%E7%AD%89%E4%BA%8E1/</url>
      
        <content type="html"><![CDATA[<p>最近看了一本书叫《极简算法史》，非常薄的一本书，里面的内容也是挺有意思的，现在分享一道证明题<strong>如何证明无限循环小数0.999999999…等于1</strong>，没错是等于1，高数上就是这么写的。</p><p><img src="/2019/06/29/证明0-999999999-等于1/1.jpg" alt="《极简算法史》"></p><hr><p>设<code>x = 0.999999999...</code>，那么<code>10x = 9.999999999...</code>。如果我们从10x减去x，可以得到：</p><blockquote><p>10x - x = 9x = 9.999999999… - 0.999999999… = 9.000000000…</p></blockquote><p>也就是<code>9x = 9.000000000...</code>因此<code>x = 1</code>，证明完毕。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas系列（7）：形变</title>
      <link href="/2019/06/22/Canvas%E7%B3%BB%E5%88%97%EF%BC%887%EF%BC%89%EF%BC%9A%E5%BD%A2%E5%8F%98/"/>
      <url>/2019/06/22/Canvas%E7%B3%BB%E5%88%97%EF%BC%887%EF%BC%89%EF%BC%9A%E5%BD%A2%E5%8F%98/</url>
      
        <content type="html"><![CDATA[<p>CSS3中有一个很重要的点，就是形变。他分为移动，缩放、旋转和倾斜。在Canvas中，形变都是基于坐标做的，所以，并没有直接的API支持倾斜，其它几种都是有独立的API来支持，命名和CSS是一样的。今天我们就看一下这几种吧。</p><hr><h2 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h2><p>平移是最简单的一种形变，我们直接来看一个例子吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// x平移20px y平移20px</span></span><br><span class="line">context.translate(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">context.translate(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/2019/06/22/Canvas系列（7）：形变/1.jpeg" alt="平移形变"></p><p>通过上面我们可以看到，<strong>平移（形变）移动的是坐标系，移动以后会以新的坐标系进行绘图，当多次平移（形变）以后每次都会以上一次的坐标系为准。</strong>此时你可能会问，那形变不是很危险吗，每次使用了形变就会使用新的坐标系，以后所有绘制的图片都会受到影响？没错是这样的，那改怎么解决呢？还记得之前的<a href="/2019/06/16/Canvas系列（3）：路径与状态/#more">状态</a>吗？现在给一个简单的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 形变前往往需要保存状态</span></span><br><span class="line">context.save();</span><br><span class="line"></span><br><span class="line">context.translate(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 形变结束，恢复之前的状态</span></span><br><span class="line">context.restore();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时以之前的坐标系绘制</span></span><br><span class="line">context.beginPath();</span><br><span class="line">context.fillStyle=<span class="string">'red'</span>;</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/2019/06/22/Canvas系列（7）：形变/2.jpeg" alt="使用保存状态"></p><h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><p>缩放也是相对于坐标系来说的，看一下这个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">context.strokeStyle=<span class="string">'red'</span>;</span><br><span class="line">context.lineWidth=<span class="number">10</span>;</span><br><span class="line">context.strokeRect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">context.beginPath();</span><br><span class="line"><span class="comment">// x是原来的1.5倍 y是原来的1.5倍</span></span><br><span class="line">context.save();</span><br><span class="line">context.scale(<span class="number">1.5</span>, <span class="number">1.5</span>);</span><br><span class="line">context.strokeStyle=<span class="string">'blue'</span>;</span><br><span class="line">context.strokeRect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">context.restore();</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/2019/06/22/Canvas系列（7）：形变/3.jpeg" alt="缩放"></p><p>可以看到，缩放改变的也是坐标系，在新的坐标系系中，宽度也放大了，一个像素已经不再是真正的一个像素了，而是放大以后的大小。所以可以看到都是10个像素的边框，宽度也不一样了。需要注意的是缩放的值大于1的时候是放大，0~1之间是缩小，1和原来是一样大的。</p><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">context.strokeStyle=<span class="string">'red'</span>;</span><br><span class="line">context.lineWidth=<span class="number">10</span>;</span><br><span class="line">context.strokeRect(<span class="number">80</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">context.beginPath();</span><br><span class="line"><span class="comment">// x是原来的1.5倍 y是原来的1.5倍</span></span><br><span class="line">context.save();</span><br><span class="line">context.rotate(<span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">45</span>);</span><br><span class="line"></span><br><span class="line">context.strokeStyle=<span class="string">'blue'</span>;</span><br><span class="line">context.strokeRect(<span class="number">80</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">context.restore();</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/2019/06/22/Canvas系列（7）：形变/4.jpeg" alt="旋转"></p><p>可以看到旋转是基于<strong>坐标的原点的</strong>，如果不希望按照原点旋转的话，可以先平移再旋转。另外旋转也是根据弧度来旋转的而不是角度。</p><h2 id="矩阵变换"><a href="#矩阵变换" class="headerlink" title="矩阵变换"></a>矩阵变换</h2><p>矩阵变换使用的API是<code>context.transform(a, b, c, d, e, f);</code>，所对应的矩阵的位置是下面这个样子：</p><p>$$\left[<br>\begin{matrix}<br>a &amp; c &amp; e \\<br>b &amp; d &amp; f \\<br>0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right] $$</p><p>什么，看不懂？前方高能！！！多年前欠下的线性代数债，现在要还了。</p><p>对于形变，假设开始的坐标是($x_0$,$y_0$)，结束的坐标是($x_1$,$y_1$)，那么假如($x_1$,$y_1$)是$x_0$平移了e个单位，$y_0$平移了f个单位后得到的结果，那么$x_1$和$y_1$就等于如下：<br>$$<br>  x_1 = x_0 + e \\<br>  y_1 = y_0 + f<br>$$</p><p>使用矩阵的笛卡尔积（左边值的第几行第几列中的值，就是右边第一个矩阵的第几行与第二个矩阵的第几列的乘积之和就是）的样子就是这个样子：</p><p>$$\left[<br>\begin{matrix}<br>x_1 \\<br>y_1 \\<br>1 \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>1 &amp; 0 &amp; e \\<br>0 &amp; 1 &amp; f \\<br>0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>x_0 \\<br>y_0 \\<br>1 \\<br>\end{matrix}<br>\right] $$</p><p>上面矩阵是平移时候的矩阵，将中间的矩阵带入矩阵的API有：<code>context.transform(1, 0, 0, 1, e, f);</code>。也就是说<code>context.translate(e, f);</code>等价于<code>context.transform(1, 0, 0, 1, e, f);</code>。</p><p>对于缩放，同样假设开始的坐标是($x_0$,$y_0$)，结束的坐标是($x_1$,$y_1$)，那么假如$x_0$缩放了a个单位，$y_0$缩放d个单位，那么$x_1$和$y_1$就等于如下：<br>$$<br>  x_1 = a * x_0 \\<br>  y_1 = d * y_0<br>$$</p><p>使用矩阵的笛卡尔积就是这个样子：</p><p>$$\left[<br>\begin{matrix}<br>x_1 \\<br>y_1 \\<br>1 \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>a &amp; 0 &amp; 0 \\<br>0 &amp; d &amp; 0 \\<br>0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>x_0 \\<br>y_0 \\<br>1 \\<br>\end{matrix}<br>\right] $$</p><p>也就是说<code>context.scale(a, d);</code>等价于<code>context.transform(a, 0, 0, d, 0, 0);</code>。</p><p>旋转有点复杂，坐标($x_0$,$y_0$)和($x_1$,$y_1$)的意义和上面一下，旋转有如下公式（可以自行推到，并不难）：</p><p>$$<br>  x_1 = x_0 * cos\theta - y_0 * sin\theta \\<br>  y_1 = x_0 * sin\theta + y_0 * cos\theta<br>$$</p><p>使用矩阵的笛卡尔积就是这个样子：</p><p>$$\left[<br>\begin{matrix}<br>x_1 \\<br>y_1 \\<br>1 \\<br>\end{matrix}<br>\right] =<br>\left[<br>\begin{matrix}<br>cos\theta &amp; -sin\theta &amp; 0 \\<br>sin\theta &amp; cos\theta &amp; 0 \\<br>0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right]<br>\left[<br>\begin{matrix}<br>x_0 \\<br>y_0 \\<br>1 \\<br>\end{matrix}<br>\right] $$</p><p>也就是说<code>context.rotate(angle);</code>等价于<code>context.transform(cos(angle), sin(angle), -sin(angle), cos(angle), 0, 0);</code>。</p><p>所以我们上面的几个例子，我们做下面的等价替换，效果是一样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">context.translate(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">context.transform(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">context.scale(<span class="number">1.5</span>, <span class="number">1.5</span>);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">context.transform(<span class="number">1.5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.5</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">context.rotate(<span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">45</span>);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> theta = <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">45</span>;</span><br><span class="line">context.transform(<span class="built_in">Math</span>.cos(theta), <span class="built_in">Math</span>.sin(theta), - <span class="built_in">Math</span>.sin(theta), <span class="built_in">Math</span>.cos(theta), <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>除了<code>transform</code>外还有一个矩阵变换的方法叫<code>setTransform</code>，参数是一模一样的<code>context.setTransform(a, b, c, d, e, f);</code>。两者的区别是后者始终以最初的坐标做为参照，而<code>transform</code>以上次变换后的坐标做为参照（类似于前面的三个API）。</p>]]></content>
      
      
      <categories>
          
          <category> Canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas系列（6）：绘制图片</title>
      <link href="/2019/06/19/Canvas%E7%B3%BB%E5%88%97%EF%BC%886%EF%BC%89%EF%BC%9A%E7%BB%98%E5%88%B6%E5%9B%BE%E7%89%87/"/>
      <url>/2019/06/19/Canvas%E7%B3%BB%E5%88%97%EF%BC%886%EF%BC%89%EF%BC%9A%E7%BB%98%E5%88%B6%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>我们现在已经可以绘制好多东西了，不过在实际开发中，绘制最多的当然是图片了，这章我们就讲讲图片的绘制。</p><hr><h2 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h2><p>绘制图片的API是<code>drawImage</code>，它的参数有三种情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将图片绘制在canvas的(dX, dY)坐标处</span></span><br><span class="line">context.drawImage(Image, dX, dY);</span><br><span class="line"><span class="comment">// 将图片绘制在canvas的(dX, dY)坐标处 图片大小缩放至dWidth * dHeight</span></span><br><span class="line">context.drawImage(Image, dX, dY, dWidth, dHeight);</span><br><span class="line"><span class="comment">// 原图片将会按照 左上角坐标为(sX, sY) 大小为sWidth * sHeight裁剪</span></span><br><span class="line"><span class="comment">// 然后再将图片绘制在canvas的(dX, dY)坐标处 图片大小缩放至dWidth * dHeight</span></span><br><span class="line"><span class="comment">// 注意参数的位置！！</span></span><br><span class="line">context.drawImage(Image, sX, sY, sWidth, sHeight, dX, dY, dWidth, dHeight);</span><br></pre></td></tr></table></figure><p>来一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = <span class="string">"https://www.kai666666.top/2019/06/19/Canvas系列（6）：绘制图片/lufei.jpeg"</span>;</span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  context.drawImage(image, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到如下效果：</p><p><img src="/2019/06/19/Canvas系列（6）：绘制图片/1.jpeg" alt="绘制图片"></p><p>由上面可知，图片必须加载完成以后才可以绘制，所以我们放在<code>onload</code>里面了，当然也可以使用<code>img标签</code>，如果我们的代码是在图片加载完后加载的就不会有什么问题。现在我们修改一下绘制的参数，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.drawImage(image, <span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>出来的效果是这样的：</p><p><img src="/2019/06/19/Canvas系列（6）：绘制图片/2.jpeg" alt="绘制图片5个参数"></p><p>我们试一下参数最多的这个，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="number">120</span>, <span class="number">120</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>出来的效果是这样的：</p><p><img src="/2019/06/19/Canvas系列（6）：绘制图片/3.jpeg" alt="绘制图片9个参数"></p><p>当然<code>drawImage</code>除了可以绘制图片以外，还可以绘制canvas：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas2 = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>)</span><br><span class="line"><span class="keyword">var</span> context2 = canvas2.getContext(<span class="string">"2d"</span>);</span><br><span class="line">context2.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">30</span>);</span><br><span class="line"><span class="comment">// 这里绘制的是canvas元素</span></span><br><span class="line">context.drawImage(canvas2, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>出来的效果是这样的：</p><p><img src="/2019/06/19/Canvas系列（6）：绘制图片/4.jpeg" alt="绘制canvas"></p><p>当然除了可以绘制canvas以外还可以绘制video不过每次只能绘制一屏，如果希望绘制的图形也可以播放的话，那么就要循环多次调用绘图了。同样的如果图片是GIF的也不会动态播放出来，而是会显示第一张。这两种情况很少用到，就不在重复了。</p><blockquote><p>双缓冲技术：使用老的技术来绘图可能会有闪屏的现象，这往往是每绘制一屏的时候，然后用一个空白的屏幕来清理全屏，这就导致屏幕有的时候会一闪一闪的。解决这个问题的办法就是双缓冲技术。双缓冲技术说的是把画布先画在一个离线的canvas（或者图片）上，然后再把这个canvas绘制到用户看到的canvas上，因为每次看到的都是新canvas的覆盖，并不需要渲染空白屏，所以就不会有闪屏现象了，H5中的canvas是默认拥有双缓冲的，所以我们不需要再处理了。双缓冲技术更多的信息可以看<a href="https://blog.csdn.net/jxw167/article/details/72157154" target="_blank" rel="noopener">这篇</a>。</p></blockquote><h2 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h2><p>我们之前使用过一个属性叫<code>fillStyle</code>，我们可以看到几乎我们都给的是某个颜色，那么为什么不直接叫<code>fillColor</code>呢，因为他除了颜色还可以设置其他的值，就比如线性渐变。定义一个线性渐变，大致是这个样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个线性渐变对象 （x1, y1）是起始坐标 （x2, y2）是结束坐标</span></span><br><span class="line"><span class="keyword">var</span> gradient = context.createLinearGradient(x1, y1, x2, y2);</span><br><span class="line"><span class="comment">// 在0~1的范围内 添加颜色 0是开始位置 1是结束位置</span></span><br><span class="line">gradient.addColorStop(number, <span class="string">'color1'</span>);</span><br><span class="line">gradient.addColorStop(number, <span class="string">'color2'</span>);</span><br><span class="line"><span class="comment">// 设置线性渐变</span></span><br><span class="line">context.fillStyle = gradient;</span><br></pre></td></tr></table></figure><p>现在来看一个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gradient = context.createLinearGradient(<span class="number">0</span>,<span class="number">0</span>,<span class="number">300</span>,<span class="number">150</span>);</span><br><span class="line">gradient.addColorStop(<span class="number">0</span>,<span class="string">"black"</span>);</span><br><span class="line">gradient.addColorStop(<span class="number">0.5</span>,<span class="string">"white"</span>);</span><br><span class="line">gradient.addColorStop(<span class="number">1</span>,<span class="string">"red"</span>);</span><br><span class="line">context.fillStyle = gradient;</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">280</span>,<span class="number">130</span>);</span><br></pre></td></tr></table></figure><p>出来的效果是这样的：</p><p><img src="/2019/06/19/Canvas系列（6）：绘制图片/5.jpeg" alt="线性渐变"></p><h2 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h2><p>径向渐变和线性渐变很像，用法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个径向渐变变对象 （x1, y1）是其实坐标 r1是起始半径 （x2, y2）是结束坐标 r2是结束半径</span></span><br><span class="line"><span class="keyword">var</span> gradient = context.createRadialGradient(x1, y1, r1, x2, y2, r2);</span><br><span class="line"><span class="comment">// 在0~1的范围内 添加颜色 0是开始位置 1是结束位置 和线性渐变是一样的</span></span><br><span class="line">gradient.addColorStop(number, <span class="string">'color1'</span>);</span><br><span class="line">gradient.addColorStop(number, <span class="string">'color2'</span>);</span><br><span class="line"><span class="comment">// 设置径向渐变</span></span><br><span class="line">context.fillStyle = gradient;</span><br></pre></td></tr></table></figure><p>现在来看一个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gradient =  context.createRadialGradient(<span class="number">150</span>, <span class="number">75</span>, <span class="number">10</span>, <span class="number">150</span>, <span class="number">75</span>, <span class="number">100</span>);</span><br><span class="line">gradient.addColorStop(<span class="number">0</span>,<span class="string">"black"</span>);</span><br><span class="line">gradient.addColorStop(<span class="number">0.5</span>,<span class="string">"white"</span>);</span><br><span class="line">gradient.addColorStop(<span class="number">1</span>,<span class="string">"red"</span>);</span><br><span class="line">context.fillStyle = gradient;</span><br><span class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">280</span>,<span class="number">130</span>);</span><br></pre></td></tr></table></figure><p>出来的效果是这样的：</p><p><img src="/2019/06/19/Canvas系列（6）：绘制图片/6.jpeg" alt="径向渐变"></p><p>由上我们可以看出，<strong>渐变开始往前会使用渐变的第一个颜色，渐变结束往后会使用渐变的最后一个颜色</strong>。</p><h2 id="图片背景"><a href="#图片背景" class="headerlink" title="图片背景"></a>图片背景</h2><p>style不仅仅可以是颜色和渐变，当然也可以是图片了，语法大概是这个样子的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建图片背景 Image就是一个图像 repetition是重复的关键字</span></span><br><span class="line"><span class="comment">// repetition可选值有："repeat|repeat-x|repeat-y|no-repeat" 意思非常明显</span></span><br><span class="line"><span class="keyword">var</span> pattern = context.createPattern(Image, repetition);</span><br><span class="line"><span class="comment">// 设置图片背景</span></span><br><span class="line">context.fillStyle = pattern;</span><br></pre></td></tr></table></figure><p>我们现在做一个文字带有背景的例子，效果如下：</p><p><img src="/2019/06/19/Canvas系列（6）：绘制图片/7.jpeg" alt="绘制canvas"></p><p>具体代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">image.src = <span class="string">"https://www.kai666666.top/2019/06/19/Canvas系列（6）：绘制图片/lufei.jpeg"</span>;</span><br><span class="line">image.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pattern = context.createPattern(image, <span class="string">"repeat"</span>);</span><br><span class="line">  context.font=<span class="string">'30px 微软雅黑'</span>;</span><br><span class="line">  context.fillStyle = pattern;</span><br><span class="line">  context.fillText(<span class="string">"带有炫酷背景的文字"</span>, <span class="number">10</span>, <span class="number">85</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas系列（5）：绘制文字</title>
      <link href="/2019/06/19/Canvas%E7%B3%BB%E5%88%97%EF%BC%885%EF%BC%89%EF%BC%9A%E7%BB%98%E5%88%B6%E6%96%87%E5%AD%97/"/>
      <url>/2019/06/19/Canvas%E7%B3%BB%E5%88%97%EF%BC%885%EF%BC%89%EF%BC%9A%E7%BB%98%E5%88%B6%E6%96%87%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>通过前面的学习，我们已经可以绘制简单的图形了。这篇文章主要讲的是，canvas绘制文字，那我们开始吧。</p><hr><h2 id="绘制文字"><a href="#绘制文字" class="headerlink" title="绘制文字"></a>绘制文字</h2><p>绘制文字的API和之前的差不多，也是分为<code>stroke</code>和<code>fill</code>，一个是描边文字，一个是填充文字，具体API如下，是不是和<code>strokeRect</code>和<code>fillRect</code>挺类似的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 描边文字，其实就是镂空字体喽</span></span><br><span class="line"><span class="comment">// 参数中 text是写什么文字 (x, y)决定了写的位置</span></span><br><span class="line"><span class="comment">// maxWidth给了一个最大的宽度 是非必填的 如果填了并且超出了则会缩放宽度（注意不是换行）</span></span><br><span class="line">context.strokeText(text, x, y, maxWidth);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充文字，其实就相当于写文字喽</span></span><br><span class="line">context.fillText(text, x, y, maxWidth);</span><br></pre></td></tr></table></figure><p>随便给一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置字体大小，为了看的更清楚</span></span><br><span class="line">context.font=<span class="string">'30px 微软雅黑'</span>;</span><br><span class="line"><span class="comment">// 描边</span></span><br><span class="line">context.strokeText(<span class="string">"这里是strokeText"</span>, <span class="number">20</span>, <span class="number">40</span>);</span><br><span class="line"><span class="comment">// 填充</span></span><br><span class="line">context.fillText(<span class="string">"这里是fillText"</span>, <span class="number">20</span>, <span class="number">80</span>);</span><br><span class="line"><span class="comment">// 带有最大宽度的填充</span></span><br><span class="line">context.fillText(<span class="string">"这里是fillText"</span>, <span class="number">20</span>, <span class="number">120</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>出来的效果如下：</p><p><img src="/2019/06/19/Canvas系列（5）：绘制文字/1.jpeg" alt="绘制文字"></p><p>CSS是如何实现镂空字的呢？请看<a href="/2019/03/19/CSS3实现彩色炫酷文字/#more">这篇文章</a>。</p><h2 id="measureText"><a href="#measureText" class="headerlink" title="measureText"></a>measureText</h2><p>有的时候我们需要让文字水平居中，而上面你也看到了，绘制文字传递的参数x和y是基于左上角的坐标来绘制的（默认情况下），这就需要计算一下文字的宽度，<code>measureText</code>就是用来干这事的。他返回一个<code>TextMetrics</code>对象，什么，没听过这个对象？完全没关系，这个对象很简单，名字你可以不用记，但你要记得该对象的一个特征就好了，那就是这个对象只有一个属性，连方法都没有，这个属性就是<code>width</code>。API如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入文本返回一个带有width的对象，width表示文本的宽度</span></span><br><span class="line">context.measureText(text);</span><br></pre></td></tr></table></figure><p>给一个文本居中的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">context.font=<span class="string">'30px 微软雅黑'</span>;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">"文本水平居中"</span>;</span><br><span class="line"><span class="comment">// 居中的x坐标是：( canvas.width - context.measureText(text).width ) / 2</span></span><br><span class="line">context.fillText(text, ( canvas.width - context.measureText(text).width ) / <span class="number">2</span>, <span class="number">80</span>);</span><br></pre></td></tr></table></figure><p>上面<code>canvas</code>就是canvas标签的dom元素，然后水平的x需要计算一下，y这里就随便给了一个80px。效果如下：</p><p><img src="/2019/06/19/Canvas系列（5）：绘制文字/2.jpeg" alt="文本居中"></p><h2 id="font属性"><a href="#font属性" class="headerlink" title="font属性"></a>font属性</h2><p>接下来我们说一下文字相关的一些属性，上面说了一个<code>font</code>属性，<code>font</code>属性的语法和CSS中font属性的语法是一样的，你有没有发现canvas和CSS有好多地方都是想通的，具体API如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.font=<span class="string">'&lt;font-style&gt; &lt;font-variant&gt; &lt;font-weight&gt; &lt;font-size / line-height&gt; &lt;font-family&gt;'</span>;</span><br></pre></td></tr></table></figure><p>其中<code>font-style</code>的值有<code>normal</code>，<code>italic</code>（斜体，使用斜体文字倾斜），<code>oblique</code>（斜体，将正常的文字通过算法倾斜，因此没有斜体字体的属性也可以倾斜）。<br><code>font-variant</code>的值有<code>normal</code>，<code>small-caps</code>。<br><code>font-weight</code>的值有<code>normal</code>，<code>bold</code>，<code>bolder</code>，<code>lighter</code>，<code>100~900</code>（100到900的值）。<br>我们修改一下上面例子中的font属性，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.font=<span class="string">'italic bold 30px 微软雅黑'</span>;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/19/Canvas系列（5）：绘制文字/3.jpeg" alt="font属性"></p><h2 id="textAlign属性"><a href="#textAlign属性" class="headerlink" title="textAlign属性"></a>textAlign属性</h2><p><code>textAlign</code>属性表示文字的对齐方式，它的可选值有：<code>start</code>，<code>end</code>，<code>center</code>，<code>left</code>，<code>right</code>。这五个，其中<code>start</code>和<code>left</code>很像，<code>end</code>和<code>right</code>也很像，一般情况下他们基本上是一样的效果，但是有的国家的文字并不是从左往右写的，而是从右往左写，就像我国古代一样，这个时候<code>start</code>就相当于<code>right</code>了。换句话说<code>start</code>和<code>end</code>会检测文本顺序是<code>ltr</code>(left to right)还是<code>rtl</code>(right to left)，你可以给DOM元素加一个属性<code>direction=“rtl”</code>然后看看效果。由于现在我国和大多数的国家都是<code>ltr</code>，所以这里就不对这两个属性做详细的描述了，现在给一个另一种让文字水平居中的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">context.font=<span class="string">'30px 微软雅黑'</span>;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">"文本水平居中"</span>;</span><br><span class="line"><span class="comment">// 设置文本居中</span></span><br><span class="line">context.textAlign=<span class="string">'center'</span>;</span><br><span class="line"><span class="comment">// 然后在画布水平的中间位置绘制文字</span></span><br><span class="line">context.fillText(text, canvas.width / <span class="number">2</span>, <span class="number">80</span>);</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/19/Canvas系列（5）：绘制文字/4.jpeg" alt="textAlign属性居中"></p><h2 id="textBaseline属性"><a href="#textBaseline属性" class="headerlink" title="textBaseline属性"></a>textBaseline属性</h2><p><code>textBaseline</code>属性描述了文本基线的位置。他的值有：<code>alphabetic</code>（默认，使用字母表的基线），<code>top</code>，<code>hanging</code>（悬挂基线），<code>middle</code>，<code>ideographic</code>（表意基线），<code>bottom</code>。</p><p>这里给一个文字水平垂直居中的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context.font=<span class="string">'30px 微软雅黑'</span>;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">"文本水平垂直居中"</span>;</span><br><span class="line">context.textAlign=<span class="string">'center'</span>;</span><br><span class="line">context.textBaseline=<span class="string">'middle'</span>;</span><br><span class="line">context.fillText(text, canvas.width / <span class="number">2</span>, canvas.height / <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2019/06/19/Canvas系列（5）：绘制文字/5.jpeg" alt="水平垂直居中"></p>]]></content>
      
      
      <categories>
          
          <category> Canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas系列（4）：线条操作</title>
      <link href="/2019/06/16/Canvas%E7%B3%BB%E5%88%97%EF%BC%884%EF%BC%89%EF%BC%9A%E7%BA%BF%E6%9D%A1%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/06/16/Canvas%E7%B3%BB%E5%88%97%EF%BC%884%EF%BC%89%EF%BC%9A%E7%BA%BF%E6%9D%A1%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>通过前三章的学习，你几乎可以绘制出任何图形了，但是却不会画一条虚线，也是够惨的。今天的内容很简单，只简绍3个属性和1个方法，准备好了吗？</p><hr><h2 id="线条的粗线"><a href="#线条的粗线" class="headerlink" title="线条的粗线"></a>线条的粗线</h2><p><code>lineWidth</code>是改变线条的粗线的，默认是一个像素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">20</span>, <span class="number">50</span>);</span><br><span class="line">context.lineTo(<span class="number">280</span>, <span class="number">50</span>);</span><br><span class="line">context.lineWidth=<span class="number">1</span>;</span><br><span class="line">context.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果这里没有beginPath 你猜猜这三条线的宽度分别是多少</span></span><br><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">20</span>, <span class="number">75</span>);</span><br><span class="line">context.lineTo(<span class="number">280</span>, <span class="number">75</span>);</span><br><span class="line">context.lineWidth=<span class="number">5</span>;</span><br><span class="line">context.stroke();</span><br><span class="line"></span><br><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">20</span>, <span class="number">100</span>);</span><br><span class="line">context.lineTo(<span class="number">280</span>, <span class="number">100</span>);</span><br><span class="line">context.lineWidth=<span class="number">10</span>;</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2019/06/16/Canvas系列（4）：线条操作/1.jpeg" alt="改变线宽"></p><p>如果上面没有<code>beginPath</code>那么后面线描边的时候也会把之前的绘制一下，那么三条先最终的宽度就都是10了。<br><code>lineWidth</code>也可用于矩形和圆弧上，只要画线的地方都可以，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.rect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">60</span>);</span><br><span class="line">context.lineWidth=<span class="number">20</span>;</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2019/06/16/Canvas系列（4）：线条操作/2.jpeg" alt="矩形描边"></p><p>我们可以看到改变<code>lineWidth</code>，矩形的大小也变了，目前的宽度是<code>矩形的宽度 + lineWidth</code>（左边多了一半，右边也多了一半）。</p><h2 id="线帽样式"><a href="#线帽样式" class="headerlink" title="线帽样式"></a>线帽样式</h2><p>线帽样式由lineCap来定义，它有三个值<code>butt | round | square</code>分别对应<code>无线帽 | 圆角 | 方形</code>，默认是<code>butt</code>（无线帽），如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">20</span>, <span class="number">50</span>);</span><br><span class="line">context.lineTo(<span class="number">280</span>, <span class="number">50</span>);</span><br><span class="line">context.lineWidth=<span class="number">10</span>;</span><br><span class="line">context.lineCap=<span class="string">'butt'</span>;<span class="comment">// 无线帽 默认值</span></span><br><span class="line">context.stroke();</span><br><span class="line"></span><br><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">20</span>, <span class="number">75</span>);</span><br><span class="line">context.lineTo(<span class="number">280</span>, <span class="number">75</span>);</span><br><span class="line">context.lineWidth=<span class="number">10</span>;</span><br><span class="line">context.lineCap=<span class="string">'round'</span>; <span class="comment">// 圆角</span></span><br><span class="line">context.stroke();</span><br><span class="line"></span><br><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">20</span>, <span class="number">100</span>);</span><br><span class="line">context.lineTo(<span class="number">280</span>, <span class="number">100</span>);</span><br><span class="line">context.lineWidth=<span class="number">10</span>;</span><br><span class="line">context.lineCap=<span class="string">'square'</span>; <span class="comment">// 方形</span></span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2019/06/16/Canvas系列（4）：线条操作/3.jpeg" alt="线帽样式"></p><p>线帽样式对于越宽的线条效果越明显，所以上面线宽给了一个10。同时可以看到线帽给的不一样，宽度其实也是有点不同的。<br>线帽只是对线条2端点的样式做了处理，如果是线条中间的那么就不生效了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line">context.lineTo(<span class="number">200</span>, <span class="number">50</span>);</span><br><span class="line">context.lineTo(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">context.lineWidth=<span class="number">20</span>;</span><br><span class="line">context.lineCap=<span class="string">'round'</span>;</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2019/06/16/Canvas系列（4）：线条操作/4.jpeg" alt="中间不生效"></p><p>如果要改变中间的样子那该怎么办？那么就是用<code>lineJoin</code>。</p><h2 id="线条交界处样式"><a href="#线条交界处样式" class="headerlink" title="线条交界处样式"></a>线条交界处样式</h2><p>线条交界处样式由<code>lineJoin</code>来决定，它有三个值<code>miter | bevel | round</code>分别是<code>尖角 | 斜角 | 圆角</code>，默认是<code>miter</code>。斜角时如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">100</span>, <span class="number">50</span>);</span><br><span class="line">context.lineTo(<span class="number">200</span>, <span class="number">50</span>);</span><br><span class="line">context.lineTo(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">context.lineWidth=<span class="number">20</span>;</span><br><span class="line">context.lineCap=<span class="string">'round'</span>;</span><br><span class="line">context.lineJoin=<span class="string">'bevel'</span>;</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2019/06/16/Canvas系列（4）：线条操作/5.jpeg" alt="斜角"></p><p>如果<code>context.lineJoin=&#39;bevel&#39;;</code>改为<code>context.lineJoin=&#39;round&#39;;</code>时，结果如下：</p><p><img src="/2019/06/16/Canvas系列（4）：线条操作/6.jpeg" alt="圆角"></p><h2 id="绘制虚线"><a href="#绘制虚线" class="headerlink" title="绘制虚线"></a>绘制虚线</h2><p>虚线是由细小的实线和空白组成，绘制虚线使用<code>setLineDash</code>方法，它接收一个数组作为参数，数组是实线和空白的长度：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.arc(<span class="number">150</span>, <span class="number">75</span>, <span class="number">60</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">360</span>);</span><br><span class="line"><span class="comment">// 实线和空白比例是10px : 5px</span></span><br><span class="line">context.setLineDash([<span class="number">10</span>,<span class="number">5</span>]);</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="/2019/06/16/Canvas系列（4）：线条操作/7.jpeg" alt="改变线宽"></p><p>值的一提的是，如果不传数组的话，那么就会报错；传一个空数组的话，会按照实线去绘制；如果数组只有一个元素的话，那么就是实线和空白依次按这个元素大小来绘制；如果多个元素的时候就是交替循环来间隔。</p>]]></content>
      
      
      <categories>
          
          <category> Canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas系列（3）：路径与状态</title>
      <link href="/2019/06/16/Canvas%E7%B3%BB%E5%88%97%EF%BC%883%EF%BC%89%EF%BC%9A%E8%B7%AF%E5%BE%84%E4%B8%8E%E7%8A%B6%E6%80%81/"/>
      <url>/2019/06/16/Canvas%E7%B3%BB%E5%88%97%EF%BC%883%EF%BC%89%EF%BC%9A%E8%B7%AF%E5%BE%84%E4%B8%8E%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p>前两章我们学的是基本图形的描边和填充，学完基本图形绘制以后就会绕不过2个概念就是路径和状态，本章我们看看这一块的内容。</p><hr><h2 id="beginPath"><a href="#beginPath" class="headerlink" title="beginPath"></a>beginPath</h2><p>beginPath表示开始一个路径，我们在上一章画弧的时候用到过好多次，他的API非常简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br></pre></td></tr></table></figure><p>开始路径有2层意思，一个就是本次绘制的起点是新的（不再是上次结束的点了），另外一个意思就是绘制的样式也是新的（不再与之前的样式有关联）。对于第一条上一个章节我们已经见识过了，如果不开始一个新的路径那么描边弧线的时候就会有一条上次绘制结束到弧线开始时的连线（当然moveTo可以避免，但需要计算，不方便）。<br>现在考虑这么一个需求，我们需要画3条线，线的颜色分别是红绿蓝，使用之前的知识，你应该可以的，你先试一下？或许你写的代码是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">context.moveTo(<span class="number">10</span>, <span class="number">50</span>);</span><br><span class="line">context.lineTo(<span class="number">290</span>, <span class="number">50</span>);</span><br><span class="line">context.strokeStyle=<span class="string">'#FF0000'</span>;</span><br><span class="line">context.stroke();</span><br><span class="line"></span><br><span class="line">context.moveTo(<span class="number">10</span>, <span class="number">75</span>);</span><br><span class="line">context.lineTo(<span class="number">290</span>, <span class="number">75</span>);</span><br><span class="line">context.strokeStyle=<span class="string">'#00FF00'</span>;</span><br><span class="line">context.stroke();</span><br><span class="line"></span><br><span class="line">context.moveTo(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">context.lineTo(<span class="number">290</span>, <span class="number">100</span>);</span><br><span class="line">context.strokeStyle=<span class="string">'#0000FF'</span>;</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>执行后的结果大概是这个样子的：<br><img src="/2019/06/16/Canvas系列（3）：路径与状态/1.jpeg" alt="颜色出现错误"></p><p>我们发现颜色是错误的，但是又不清楚哪里有问题了。难道是它的API有bug了吗?我们打断点，然后单步执行，看看上面三个stroke依次执行后的效果：</p><p><img src="/2019/06/16/Canvas系列（3）：路径与状态/2.jpeg" alt="红色执行后"><br><img src="/2019/06/16/Canvas系列（3）：路径与状态/3.jpeg" alt="绿色执行后"><br><img src="/2019/06/16/Canvas系列（3）：路径与状态/4.jpeg" alt="蓝色执行后"></p><p>我们可以看到，当代码执行到红色以后是对的（虽然把坐标系也变成红色了）；然后绿色执行后把绿色这条渲染对了，但是又用绿色渲染了一下红色的那条线，使得红色的线变成2者的叠加色了；当绿色的执行完了以后，把最后一条线描边成绿色，但是又把前面的也渲染了一遍，所以最终的颜色就是我们之前看到的。要让新的线不在绘制之前的就用<code>beginPath</code>来开启一个新的路径。看看我们使用后的效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">10</span>, <span class="number">50</span>);</span><br><span class="line">context.lineTo(<span class="number">290</span>, <span class="number">50</span>);</span><br><span class="line">context.strokeStyle=<span class="string">'#FF0000'</span>;</span><br><span class="line">context.stroke();</span><br><span class="line"></span><br><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">10</span>, <span class="number">75</span>);</span><br><span class="line">context.lineTo(<span class="number">290</span>, <span class="number">75</span>);</span><br><span class="line">context.strokeStyle=<span class="string">'#00FF00'</span>;</span><br><span class="line">context.stroke();</span><br><span class="line"></span><br><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line">context.lineTo(<span class="number">290</span>, <span class="number">100</span>);</span><br><span class="line">context.strokeStyle=<span class="string">'#0000FF'</span>;</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/2019/06/16/Canvas系列（3）：路径与状态/5.jpeg" alt="正常渲染"></p><p>总结一下：<strong>使用beginPath路径将不再与之前的联系，绘制时也不再绘制之前的（所以已绘制图案的样式不再叠加）。</strong></p><h2 id="closePath"><a href="#closePath" class="headerlink" title="closePath"></a>closePath</h2><p>closePath是闭合路径，注意是闭合路径而不是结束路径，虽然目前的位置是在beginPath后面，但是两者没什么关系，它并不是endPath（没有这个）。</p><p>现在有需求，需要描边一个45°的扇形，你以你现在的技术完全可以胜任，大笔一挥：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">150</span>, <span class="number">75</span>);</span><br><span class="line">context.arc(<span class="number">150</span>, <span class="number">75</span>, <span class="number">80</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">45</span>);</span><br><span class="line">context.lineTo(<span class="number">150</span>, <span class="number">75</span>);</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p><img src="/2019/06/16/Canvas系列（3）：路径与状态/6.jpeg" alt="描边扇形"></p><p>效果不错，挺满意的。现在我们观察倒数第二行代码，我们使用<code>context.lineTo(150, 75);</code>画了一条回到圆心（起点）的线。在<code>stroke</code>的时候回到起点可以绘制出一个闭合的图形，这种操作实在太多了，为了简化这个步骤，我们就可以使用<code>closePath</code>。现在直接把<code>context.lineTo(150, 75);</code>替换为<code>context.closePath();</code>你会发现效果是一样的，这样就省去了自己计算起点位置的步骤了。我强烈建议在闭合路径的时候使用<code>closePath</code>。<br>需要顺便提醒一下，填充（fill）的时候，对于一个终点和起点没有闭合的路径，默认会闭合了再去填充（不然没得玩了），如下。当然如果还有其他没有闭合的时候（就比如平行的2个线段），那么就真的没的完了，他也“不会”绘制了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">150</span>, <span class="number">75</span>);</span><br><span class="line">context.arc(<span class="number">150</span>, <span class="number">75</span>, <span class="number">80</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">45</span>);</span><br><span class="line">context.fill();</span><br></pre></td></tr></table></figure><p>上面没有闭合，直接填充，结果和闭合了以后是一样的效果：<br><img src="/2019/06/16/Canvas系列（3）：路径与状态/7.jpeg" alt="填充扇形"></p><h2 id="点是否在路径内部"><a href="#点是否在路径内部" class="headerlink" title="点是否在路径内部"></a>点是否在路径内部</h2><p>跟路径有关的一个常见问题，就是需要判断点是否在一个路径的内部。canvas考虑到大家的这个需要，给了大家提供了这样的API：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 坐标(x, y)是否在路径内部 如果在就返回true否则就返回false</span></span><br><span class="line">context.isPointInPath(x, y);</span><br></pre></td></tr></table></figure><p>这里需要注意的有三点：</p><ol><li>如果一个路径结束和开始的位置没有闭合，判断的时候会按照闭合来处理（如果结束点和开始点闭合后整个路径还没有闭合，那么就返回false）。</li><li><code>strokeRect</code>和<code>fillRect</code>不会保留绘制的矩形路径，所以<code>isPointInPath</code>不能对他们进行判断，可以使用<code>rect</code>代替。</li><li>如果刚刚在路径所处的直线上，那么需要根据线宽来决定，如果路径内与线中心一侧的时候那么返回false，其他的时候返回true，举个例子比如线宽是1，那么如果在线上，说明是内部；如果线宽是3，那么在内部和前2个像素上是内部，外面的一个像素是外部。</li></ol><p>看了第三条你可能又会问那么就只想知道是否在线上怎么办，那就可能会用到另一个API了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 坐标(x, y)是否在描边上 如果在就返回true否则就返回false</span></span><br><span class="line">context.isPointInStroke(x, y);</span><br></pre></td></tr></table></figure><p>此时你可能还会问，你只想知道是否在路径的内部，根本不关心在不在描边上，那么怎么办？给你提醒一下，把这两个API综合起来判断就可以了，相信你一定可以做到的。此外这两个API比较简单就不再给出例子了，感兴趣的同学可以自己研究下。</p><h2 id="裁剪区域"><a href="#裁剪区域" class="headerlink" title="裁剪区域"></a>裁剪区域</h2><p>路径学完了我们先额外插播一个小知识，就是裁剪区域，先看个例子，我们先描边一个圆形，再填充一个矩形：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.arc(<span class="number">150</span>, <span class="number">75</span>, <span class="number">40</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">360</span>);</span><br><span class="line">context.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始新的路径 与之前的不再有关系 如果不开始 下面的fill的时候会把上面圆也fill了</span></span><br><span class="line">context.beginPath();</span><br><span class="line">context.rect(<span class="number">150</span>, <span class="number">75</span>, <span class="number">40</span>, <span class="number">40</span>);</span><br><span class="line">context.fill();</span><br></pre></td></tr></table></figure><p>此时结果如下：</p><p><img src="/2019/06/16/Canvas系列（3）：路径与状态/8.jpeg" alt="描边圆，填充矩形"></p><p>然后我们按照圆的样子裁剪矩形，稍微修改一下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.arc(<span class="number">150</span>, <span class="number">75</span>, <span class="number">40</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">360</span>);</span><br><span class="line">context.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照圆裁剪</span></span><br><span class="line">context.clip();</span><br><span class="line"></span><br><span class="line">context.beginPath();</span><br><span class="line">context.rect(<span class="number">150</span>, <span class="number">75</span>, <span class="number">40</span>, <span class="number">40</span>);</span><br><span class="line">context.fill();</span><br></pre></td></tr></table></figure><p>此时结果如下，简直完美：</p><p><img src="/2019/06/16/Canvas系列（3）：路径与状态/9.jpeg" alt="按照圆裁剪矩形"></p><p>这里需要注意的是<strong>裁剪也是基于路径来的，所以<code>strokeRect</code>和<code>fillRect</code>是不生效的。</strong><br>我们再画一个矩形：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.arc(<span class="number">150</span>, <span class="number">75</span>, <span class="number">40</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">360</span>);</span><br><span class="line">context.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照圆裁剪</span></span><br><span class="line">context.clip();</span><br><span class="line"></span><br><span class="line">context.beginPath();</span><br><span class="line">context.rect(<span class="number">150</span>, <span class="number">75</span>, <span class="number">40</span>, <span class="number">40</span>);</span><br><span class="line">context.fill();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再画一个矩形</span></span><br><span class="line">context.beginPath();</span><br><span class="line">context.rect(<span class="number">190</span>, <span class="number">35</span>, <span class="number">80</span>, <span class="number">80</span>);</span><br><span class="line">context.fill();</span><br></pre></td></tr></table></figure><p>结果：<br><img src="/2019/06/16/Canvas系列（3）：路径与状态/10.jpeg" alt="再画一个矩形"></p><p>什么放错图了？没错，就是这个样子！我们分析一下，上面画了一个圆，然后描边了，然后按照圆裁剪，那么下面画的第一个矩形会按照圆来裁剪，没问题。然后画了第二个矩形，那么问题来了，这个矩形也被裁剪了！那么怎么让第二个矩形不再裁剪呢？如果后面的一直都被裁剪，那么每裁剪一次就缩小一点点距离，那多痛苦。</p><h2 id="状态的保存于恢复"><a href="#状态的保存于恢复" class="headerlink" title="状态的保存于恢复"></a>状态的保存于恢复</h2><p>接下来就是我们的处理办法了，如果裁剪前把当前状态保存了，然后裁剪完第一个矩形后，再把状态恢复了，不是很好的解决了这个问题吗？canvas也是这么做的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.arc(<span class="number">150</span>, <span class="number">75</span>, <span class="number">40</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">360</span>);</span><br><span class="line">context.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存状态</span></span><br><span class="line">context.save();</span><br><span class="line"></span><br><span class="line">context.clip();</span><br><span class="line"></span><br><span class="line">context.beginPath();</span><br><span class="line">context.rect(<span class="number">150</span>, <span class="number">75</span>, <span class="number">40</span>, <span class="number">40</span>);</span><br><span class="line">context.fill();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恢复之前保存的状态，即没有裁剪时那个状态</span></span><br><span class="line">context.restore();</span><br><span class="line"></span><br><span class="line">context.beginPath();</span><br><span class="line">context.rect(<span class="number">190</span>, <span class="number">35</span>, <span class="number">80</span>, <span class="number">80</span>);</span><br><span class="line">context.fill();</span><br></pre></td></tr></table></figure><p>一个刷新，完美：<br><img src="/2019/06/16/Canvas系列（3）：路径与状态/11.jpeg" alt="恢复状态"></p><p>通常裁剪前一般都会保存路径的，裁剪完后，一般都会恢复的。除此之外保存与恢复也可以用在某些样式状态上，还可以用在形变（后面会讲到的，类似与CSS3的transform）的状态保存上。</p>]]></content>
      
      
      <categories>
          
          <category> Canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas系列（2）：曲线图形</title>
      <link href="/2019/06/15/Canvas%E7%B3%BB%E5%88%97%EF%BC%882%EF%BC%89%EF%BC%9A%E6%9B%B2%E7%BA%BF%E5%9B%BE%E5%BD%A2/"/>
      <url>/2019/06/15/Canvas%E7%B3%BB%E5%88%97%EF%BC%882%EF%BC%89%EF%BC%9A%E6%9B%B2%E7%BA%BF%E5%9B%BE%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<p><a href="/2019/06/15/Canvas系列（1）：直线图形/#more">上一章</a>学的是直线图形的描边和填充，本章我们看看对曲线图形的描边和填充。</p><h2 id="圆弧"><a href="#圆弧" class="headerlink" title="圆弧"></a>圆弧</h2><p>画弧的API如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 圆心：(x,y) 半径：radius 起始弧度：startRadian 结束弧度:endRadian 画弧方向：anticlockwise</span></span><br><span class="line">context.arc(x, y, radius, startRadian, endRadian, anticlockwise);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述起始弧度和结束弧度都是我们数学上学的弧度就是2 * PI是一圈，</span></span><br><span class="line"><span class="comment">// 通常我们习惯上喜欢用角度作为单位，也就是360°是一圈</span></span><br><span class="line"><span class="comment">// 所以我们更多的使用一下公式</span></span><br><span class="line"><span class="comment">// 起始角度：startAngle 结束角度：endAngle</span></span><br><span class="line">ccontext.arc(x, y, radius, <span class="built_in">Math</span>.PI / <span class="number">180</span> * startAngle, <span class="built_in">Math</span>.PI / <span class="number">180</span> * endAngle, anticlockwise);</span><br></pre></td></tr></table></figure><p>我们先画一个弧线：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.arc(<span class="number">150</span>, <span class="number">75</span>, <span class="number">60</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">90</span>);</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="/2019/06/15/Canvas系列（2）：曲线图形/1.jpeg" alt="描边弧线"></p><p>我们的代码是加在上一章最后的坐标系中的，如果直接使用arc画弧的话，那么起始点是上一个绘制的结束，也就是绘制坐标系的结束位置，为了让之前的代码的结束不在作为本次绘制的开始，我们使用了新的API<code>context.beginPath();</code>，用来开启一个新的路径，路径相关的知识会在下一章跟大家分享。我们这里绘制了一个圆心是(150,75)，半径是60，从0度到90度的弧。由上我们可以看出弧的角度是按照我们高中学的坐标系来的。所以，学习是有用的！！！</p><p>填充弧线：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.arc(<span class="number">150</span>, <span class="number">75</span>, <span class="number">60</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">90</span>);</span><br><span class="line">context.fill();</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="/2019/06/15/Canvas系列（2）：曲线图形/2.jpeg" alt="填充弧线"></p><p>描边结果有没有和你预想的不太一样，你脑海中的问题或许下章给你简答的。现在先考虑一下上面最后一个参数<code>anticlockwise</code>，它如果是true的时候表示逆时针绘制，false的时候是顺时针绘制，默认什么都不传相当于传了个<code>undefined</code>，当然也就是false了。我们把这个值设置为true，看看结果，如下：</p><p><img src="/2019/06/15/Canvas系列（2）：曲线图形/3.jpeg" alt="描边弧线逆时针"></p><p><img src="/2019/06/15/Canvas系列（2）：曲线图形/4.jpeg" alt="填充弧线逆时针"></p><p><code>anticlockwise</code>还有一个用处就是制作图形中的图形，可以看一下之前的那篇<a href="/2019/04/27/非零环绕规则/#more">非零环绕规则</a>。</p><h2 id="圆"><a href="#圆" class="headerlink" title="圆"></a>圆</h2><p>画圆很简单只要把上面的结束度数改成360就可以了，直接给出结果：<br><img src="/2019/06/15/Canvas系列（2）：曲线图形/5.jpeg" alt="描边圆"></p><p><img src="/2019/06/15/Canvas系列（2）：曲线图形/6.jpeg" alt="填充圆"></p><h2 id="另一种画弧的方法"><a href="#另一种画弧的方法" class="headerlink" title="另一种画弧的方法"></a>另一种画弧的方法</h2><p>canvas提供了另一种画弧的方法，就是arcTo:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (x1, y1) 表示控制点的坐标 （x2, y2）是结束点的坐标 radius是圆弧半径</span></span><br><span class="line">context.arcTo(x1, y1, x2, y2, radius);</span><br></pre></td></tr></table></figure><p>那么你会问起始点的坐标是哪里呢？其实起始点的坐标就是上一次绘制结束时的坐标或者<code>moveTo</code>后的坐标，这个规则跟前面的<code>lineTo</code>是一样的，后面的贝塞尔曲线也跟这是一个道理。arcTo画出来的弧线半径是radius，该弧线与起始点或终点与控制点所在的直线相切。当然看一个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">210</span>, <span class="number">75</span>);</span><br><span class="line">context.arcTo(<span class="number">210</span>, <span class="number">135</span>, <span class="number">150</span>, <span class="number">135</span>, <span class="number">60</span>);</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>效果如图：<br><img src="/2019/06/15/Canvas系列（2）：曲线图形/7.jpeg" alt="arcTo"></p><p>我把说明也绘制上，如下：<br><img src="/2019/06/15/Canvas系列（2）：曲线图形/8.jpeg" alt="添加了说明"></p><p>我们上面给的半径是60px，这个半径刚刚好，因为是我本人精心计算的，如果半径不能构成一个很好的弧线那会是什么样子呢？下面分别给出半径是120px和30px的样子：</p><p><img src="/2019/06/15/Canvas系列（2）：曲线图形/9.jpeg" alt="半径120px"></p><p><img src="/2019/06/15/Canvas系列（2）：曲线图形/10.jpeg" alt="半径30px"></p><p>由上可以知道<strong>圆弧是一定会过起始点的，有可能会经过终点，起始点有可能是处于切线上</strong>。arcTo是没有顺时针画弧还是逆时针画弧的控制参数的，因为起始点控制点和终点就可以决定画弧的方向。</p><h2 id="arcTo画弧的应用"><a href="#arcTo画弧的应用" class="headerlink" title="arcTo画弧的应用"></a>arcTo画弧的应用</h2><p>arcTo画弧最常见的场景就是画圆角矩形。上节课我们画了一个正方形不知道还有人记得不，不记得的可以会去看看代码，现在我们就把那个矩形加一个半径是20px的圆角。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 之前绘制的是起点在(90, 15)宽和高都是120的矩形</span></span><br><span class="line"><span class="comment">// 所以矩形的右下角是(210, 135)</span></span><br><span class="line"><span class="comment">// 现在加4个20px圆角</span></span><br><span class="line">context.moveTo(<span class="number">90</span> +  <span class="number">20</span>, <span class="number">15</span>);</span><br><span class="line">context.lineTo(<span class="number">210</span> - <span class="number">20</span>, <span class="number">15</span>);</span><br><span class="line">context.arcTo(<span class="number">210</span>, <span class="number">15</span>, <span class="number">210</span>, <span class="number">15</span> + <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">context.lineTo(<span class="number">210</span>, <span class="number">135</span> - <span class="number">20</span>);</span><br><span class="line">context.arcTo(<span class="number">210</span>, <span class="number">135</span>, <span class="number">210</span> - <span class="number">20</span>, <span class="number">135</span>, <span class="number">20</span>);</span><br><span class="line">context.lineTo(<span class="number">90</span> + <span class="number">20</span>, <span class="number">135</span>);</span><br><span class="line">context.arcTo(<span class="number">90</span>, <span class="number">135</span>, <span class="number">90</span>, <span class="number">135</span> - <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">context.lineTo(<span class="number">90</span>, <span class="number">15</span> + <span class="number">20</span>);</span><br><span class="line">context.arcTo(<span class="number">90</span>, <span class="number">15</span>, <span class="number">90</span> + <span class="number">20</span>, <span class="number">15</span>, <span class="number">20</span>);</span><br><span class="line">context.fillStyle=<span class="string">'blue'</span>;</span><br><span class="line">context.fill();</span><br></pre></td></tr></table></figure><p><img src="/2019/06/15/Canvas系列（2）：曲线图形/11.jpeg" alt="圆角矩形"></p><h2 id="二次贝塞尔曲线"><a href="#二次贝塞尔曲线" class="headerlink" title="二次贝塞尔曲线"></a>二次贝塞尔曲线</h2><p>我们使用arcTo的时候参数中有一个控制点，一个结束点，还有一个半径。圆弧的圆心到圆弧和起点或终点到控制点的切线的距离刚好是半径。而二次贝塞尔曲线画出的是更好的曲线，它没有半径的限制，画出的弧线并不是某个圆的一部分。它的API如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其中(cpx, cpy)是控制点 （x, y）是终点</span></span><br><span class="line">context.quadraticCurveTo(cpx, cpy, x, y);</span><br></pre></td></tr></table></figure><p>同样我们画上面的四分之一圆可以这么写，效果与之前是完全一样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">210</span>, <span class="number">75</span>);</span><br><span class="line">context.quadraticCurveTo(<span class="number">210</span>, <span class="number">135</span>, <span class="number">150</span>, <span class="number">135</span>);</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>我们稍微修改一下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">210</span>, <span class="number">75</span>);</span><br><span class="line"><span class="comment">// 结束点修改了一下</span></span><br><span class="line">context.quadraticCurveTo(<span class="number">210</span>, <span class="number">135</span>, <span class="number">100</span>, <span class="number">135</span>);</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p><img src="/2019/06/15/Canvas系列（2）：曲线图形/12.jpeg" alt="二次贝塞尔曲线"></p><h2 id="三次贝塞尔曲线"><a href="#三次贝塞尔曲线" class="headerlink" title="三次贝塞尔曲线"></a>三次贝塞尔曲线</h2><p>大家猜猜，三次贝塞尔曲线是几个控制点，几个结束点？哈哈，当然是2个控制点，1个结束点了，怎么可能有2个结束的位置呢！API如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其中(cp1x, cp1y)是控制点1 (cp2x, cp2y)是控制点2 （x, y）是终点</span></span><br><span class="line">context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);</span><br></pre></td></tr></table></figure><p>给个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">50</span>, <span class="number">75</span>);</span><br><span class="line">context.bezierCurveTo(<span class="number">100</span>, <span class="number">20</span>, <span class="number">200</span>, <span class="number">130</span>, <span class="number">250</span>, <span class="number">75</span>);</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>效果图如下：<br><img src="/2019/06/15/Canvas系列（2）：曲线图形/13.jpeg" alt="三次贝塞尔曲线"></p>]]></content>
      
      
      <categories>
          
          <category> Canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas系列（1）：直线图形</title>
      <link href="/2019/06/15/Canvas%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89%EF%BC%9A%E7%9B%B4%E7%BA%BF%E5%9B%BE%E5%BD%A2/"/>
      <url>/2019/06/15/Canvas%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89%EF%BC%9A%E7%9B%B4%E7%BA%BF%E5%9B%BE%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<p>在前端最令人兴奋的技术莫过于Canvas技术。它可以制作出更加绚丽的效果，甚至完全可以胜任游戏开发。最近我也在学习Canvas相关的技术，总是想拿出来跟大家一起分享分享，由于这块技术比较庞大，所以我就分章节一章一章地跟大家分享。这几章节中我们并不涉及webGL相关的知识，感兴趣的可以自己玩一玩。</p><p>我们的全部代码可以在这个网址查看：<a href="https://github.com/KaiOrange/canvas-demo" target="_blank" rel="noopener">https://github.com/KaiOrange/canvas-demo</a>。</p><hr><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>在HTML5中，涌现了很多的新技术，其中最令人兴奋的就是Canvas。我就不卖关子了，直接快速使用吧。首先我们有这样的HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Canvas系列<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> &gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#canvas</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-id">#f5f5f5</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个是我们的模板，如果你想好好学习的话，建议你也创建一个<code>index.html</code>文件，并且把代码敲一下。此时我们看到的效果是这个样子的：</p><p><img src="/2019/06/15/Canvas系列（1）：直线图形/1.jpeg" alt="初始canvas效果"></p><p>canvas标签默认的样式是大小为<code>300 * 150</code>像素、<code>没有背景色</code>的行内替换元素，类似于img标签。我们这里为了看上去更加方便给了一个背景元素。<br>要使用canvas进行绘图，需要使用JavaScript去控制它，现在我们就在script标签中添加JavaScript代码来绘制一条直线：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取canvas元素</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="comment">// 2. 获取上下文对象</span></span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="comment">// 3. 绘制图片</span></span><br><span class="line">context.moveTo(<span class="number">10</span>, <span class="number">75</span>);</span><br><span class="line">context.lineTo(<span class="number">290</span>, <span class="number">75</span>);</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>出来的效果如下：</p><p><img src="/2019/06/15/Canvas系列（1）：直线图形/2.jpeg" alt="绘制一条线"></p><p>通过上面几行代码我们知道canvas绘图的时候无非就是三个步骤：</p><ol><li>获取canvas元素</li><li>获取上下文对象</li><li>绘制图片</li></ol><p>第一步获取canvas元素其实就是DOM操作，获取到的canvas元素也是DOM元素，DOM元素就有大量的DOM相关的属性和方法了，可以使用<code>console.table(canvas);</code>打印一下。canvas中最重要的属性和方法莫过于这四个：</p><table><thead><tr><th>属性或方法</th><th>含义</th></tr></thead><tbody><tr><td>width</td><td>长度</td></tr><tr><td>height</td><td>宽度</td></tr><tr><td>getContext(‘2d’)</td><td>获取2D上下文，如果是WebGL可以传webgl</td></tr><tr><td>toDataURL()</td><td>获取转换的位图字符串（后面会简绍）</td></tr></tbody></table><p>第二步中传递的是<code>2d</code>，这样会返回一个绘制2D图形的上下文，也就是<code>context</code>对象。因为canvas是画布的意思，有人也把上下文对象成为画笔。如果要绘制3D图像怎么办？可以传一个<code>webgl</code>来获取WebGL的上下文，这样就可以绘制3D效果了（WebGL是基于OpenGL，是已存在的一套技术，所以并没有使用3D来获取3D的上下文，有可能以后开发出性能更加优越的3D绘制系统的话可能会取代WebGL，当然短期内是不会的，毕竟WebGL加上部分库用起来也很方便，性能也挺不错的）。</p><p>最重要的第三步，canvas提供了大量的API供我们绘制图片，我们下面几个章节会重点简绍。</p><p>最后需要注意2点：</p><ol><li>计算机中除了WebGL等少数坐标系的y轴是向上的，其他的都是向下的，我们的2d上下文的y轴就是向下的。</li><li>设置canvas大小的时候使用HTML中的属性设置，而不要使用CSS设置，如果使用CSS设置后会缩放。</li></ol><p>对于第二条特别重要，我们试着修改CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#canvas</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在的效果是：</p><p><img src="/2019/06/15/Canvas系列（1）：直线图形/3.jpeg" alt="CSS控制宽度"></p><p>可以看到线段仍然是居中的，而且明显粗了，这是缩放导致的。<br>使用HTML控制如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"150"</span> <span class="attr">height</span>=<span class="string">"300"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/06/15/Canvas系列（1）：直线图形/4.jpeg" alt="HTML控制宽度"></p><h2 id="绘制2条线段"><a href="#绘制2条线段" class="headerlink" title="绘制2条线段"></a>绘制2条线段</h2><p>绘制线段用到2个API：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将画笔移动到(x1, y1)的坐标</span></span><br><span class="line">context.moveTo(x1, y1);</span><br><span class="line"><span class="comment">// 画线到(x2, y2)的坐标</span></span><br><span class="line">context.lineTo(x2, y2);</span><br></pre></td></tr></table></figure><p>通过上述2步以后其实并没有画线，通过上面可以看到还需要调用<code>context.stroke();</code>，这一点一定要记住。为什么要多此一步呢？一方面是因为一次性统一绘制会减少内存的开销，另一个原因是因为canvas不仅仅支持描边（stroke）还支持填充（fill），后面马上就会遇到了。</p><p>那如果画2条线呢？我们就重复使用上面两个API，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">context.moveTo(<span class="number">10</span>, <span class="number">65</span>);</span><br><span class="line">context.lineTo(<span class="number">290</span>, <span class="number">65</span>);</span><br><span class="line">context.moveTo(<span class="number">10</span>, <span class="number">85</span>);</span><br><span class="line">context.lineTo(<span class="number">290</span>, <span class="number">85</span>);</span><br><span class="line">context.strokeStyle=<span class="string">'blue'</span>;</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/2019/06/15/Canvas系列（1）：直线图形/5.jpeg" alt="绘制2条线"></p><p>你可能已经看到了我们这里使用了<code>context.strokeStyle=&#39;blue&#39;;</code>把线段的颜色改成蓝色（而不是默认的黑色），这个属性一定要在stroke之前调用，否则都描边结束了才设置，是不会生效的，这样改变的是下面描边的颜色，就好比你拿黑色的笔画了一条线，结果你又拿起了一只蓝色的笔，然后你希望你刚刚话的线是蓝色的。<br>这里的<code>strokeStyle</code>是描边的样式，它的值可以是特殊颜色值如<code>blue</code>等，也可以是<code>rab(0,0,255)</code>,还可以是<code>raba(0,0,255,1)</code>,更可以是<code>#0000FF</code>，甚至是图片、渐变等（后面会讲到，所以没有叫<code>strokeColor</code>）。</p><h2 id="描边矩形"><a href="#描边矩形" class="headerlink" title="描边矩形"></a>描边矩形</h2><p>矩形就是4条线段，我们直接开画：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">context.moveTo(<span class="number">90</span>, <span class="number">15</span>);</span><br><span class="line">context.lineTo(<span class="number">210</span>, <span class="number">15</span>);</span><br><span class="line">context.lineTo(<span class="number">210</span>, <span class="number">135</span>);</span><br><span class="line">context.lineTo(<span class="number">90</span>, <span class="number">135</span>);</span><br><span class="line">context.lineTo(<span class="number">90</span>, <span class="number">15</span>);</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/2019/06/15/Canvas系列（1）：直线图形/6.jpeg" alt="描边矩形"></p><p>我们绘制了一个宽高都为120px的矩形（其实也就是一个正方形）。由上可知<code>lineTo</code>划线的起点是<strong>上一次移动到的地方或者上次划线结束的地方</strong>，因此我们没有必要每次都<code>moveTo</code>当前位置。<br>由于矩形是非常重要的图形，所以canvas提供了一个更加方便的API：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绘制一个起始坐标为:(x, y) 宽度:width 高度:height 的矩形</span></span><br><span class="line">context.rect(x, y, width, height);</span><br></pre></td></tr></table></figure><p>使用新的API绘制：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">context.rect(<span class="number">90</span>, <span class="number">15</span>, <span class="number">120</span>, <span class="number">120</span>);</span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>这下是不是容易多了？什么？还不容易，那么给你简绍一个更简单的API：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绘制一个起始坐标为:(x, y) 宽度:width 高度:height 的矩形</span></span><br><span class="line"><span class="comment">// 使用strokeRect将会直接绘制出来 而不需要在调用stroke()了</span></span><br><span class="line">context.strokeRect(x, y, width, height);</span><br></pre></td></tr></table></figure><p>使用新的API绘制：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.strokeRect(<span class="number">90</span>, <span class="number">15</span>, <span class="number">120</span>, <span class="number">120</span>);</span><br></pre></td></tr></table></figure><h2 id="填充矩形"><a href="#填充矩形" class="headerlink" title="填充矩形"></a>填充矩形</h2><p>填充和描边一样，只是描边的时候调用的是stroke，填充的时候是fill，看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">context.moveTo(<span class="number">90</span>, <span class="number">15</span>);</span><br><span class="line">context.lineTo(<span class="number">210</span>, <span class="number">15</span>);</span><br><span class="line">context.lineTo(<span class="number">210</span>, <span class="number">135</span>);</span><br><span class="line">context.lineTo(<span class="number">90</span>, <span class="number">135</span>);</span><br><span class="line">context.lineTo(<span class="number">90</span>, <span class="number">15</span>);</span><br><span class="line">context.fillStyle=<span class="string">'blue'</span>;</span><br><span class="line">context.fill();</span><br></pre></td></tr></table></figure><p>效果：<br><img src="/2019/06/15/Canvas系列（1）：直线图形/7.jpeg" alt="描边矩形"></p><p>是不是很简单，你可能已经注意到了修改填充矩形的样式是<code>fillStyle</code>，其用法跟描边时是一样的。<br>此时你会有一个疑问，那么描边矩形有简写吗？如果你问的话，说明你的学习力还是很不错的，先给你一个赞。当然有了，直接上代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简写1</span></span><br><span class="line">context.rect(<span class="number">90</span>, <span class="number">15</span>, <span class="number">120</span>, <span class="number">120</span>);</span><br><span class="line">context.fillStyle=<span class="string">'blue'</span>;</span><br><span class="line">context.fill();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写2</span></span><br><span class="line">context.fillStyle=<span class="string">'blue'</span>;</span><br><span class="line">context.fillRect(<span class="number">90</span>, <span class="number">15</span>, <span class="number">120</span>, <span class="number">120</span>);</span><br></pre></td></tr></table></figure><p>如果既要描边又要填充怎么办呢？可以看这个：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">context.rect(<span class="number">90</span>, <span class="number">15</span>, <span class="number">120</span>, <span class="number">120</span>);</span><br><span class="line">context.strokeStyle=<span class="string">'red'</span>;</span><br><span class="line">context.stroke();</span><br><span class="line">context.fillStyle=<span class="string">'rgba(0,0,255,0.5)'</span>;</span><br><span class="line">context.fill();</span><br></pre></td></tr></table></figure><p>效果如下，像不像CSS给了一个背景和一个边框？没错填充就类似于是设置背景，描边就类似于给个边框。</p><p><img src="/2019/06/15/Canvas系列（1）：直线图形/8.jpeg" alt="描边和填充"></p><h2 id="绘制简易坐标系"><a href="#绘制简易坐标系" class="headerlink" title="绘制简易坐标系"></a>绘制简易坐标系</h2><p>为了更方便后面你的使用我们绘制一个简易的坐标系吧，效果如下：</p><p><img src="/2019/06/15/Canvas系列（1）：直线图形/9.jpeg" alt="简易坐标系"></p><p>完整HTML代码如下，后面的如果不出意外的话就会在这个基础上绘制：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Canvas系列<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> &gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#canvas</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-id">#f5f5f5</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> context = canvas.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> sW = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lW = <span class="number">4</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> spacing = <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; canvas.width; x+=spacing) &#123;</span></span><br><span class="line"><span class="undefined">      context.moveTo(x, 0);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(x % (spacing * <span class="number">5</span>) === <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="undefined">        context.lineTo(x, lW);</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">        context.lineTo(x, sW);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; canvas.height; y+=spacing) &#123;</span></span><br><span class="line"><span class="undefined">      context.moveTo(0, y);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span>(y % (spacing * <span class="number">5</span>) === <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="undefined">        context.lineTo(lW, y);</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">        context.lineTo(sW, y);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    context.stroke();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 其他代码</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Canvas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建立自己的npm镜像服务器</title>
      <link href="/2019/06/15/%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84npm%E9%95%9C%E5%83%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2019/06/15/%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84npm%E9%95%9C%E5%83%8F%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>好多公司有这样的需求，需要把公司内部的依赖包放在npm服务器上这样安装的时候直接使用<code>npm install</code>安装了。同时，公司可能不希望自己的代码被别人看到，那么建立自己的npm镜像服务器是最好的选择。最近我也遇到同样的问题，希望在自己公司内部搭建一个npm镜像服务器。</p><p>搭建这个服务器有两种办法，一种是使用cnpm来做，优点是功能强大；还有一种解决办法就是使用<a href="https://github.com/verdaccio/verdaccio" target="_blank" rel="noopener">verdaccio</a>。</p><p>cnpm方式是最常用的，网上有好多简绍，这里就不重复了，感兴趣的可以看<a href="https://www.cnblogs.com/jymz/p/4511284.html" target="_blank" rel="noopener">这篇</a>，我们这里讲的是第二种方法。为什么使用第二种方式呢，因为这种方式实在是太简单了（开箱即用），对于一般的小公司来说这种方式非常合适。如果你看过其他的资料可能会了解到一个库叫<code>sinopia</code>也是干这事的，它和<code>verdaccio</code>的用法基本差不多，实际上<code>verdaccio</code>就是fork<code>sinopia</code>的，而<code>verdaccio</code>能活下来，说明<code>verdaccio</code>要更加优秀，所以我们这里就主要简绍一下<code>verdaccio</code>的使用。</p><hr><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ol><li><p>下载全局依赖</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g verdaccio</span><br></pre></td></tr></table></figure></li><li><p>启动</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verdaccio</span><br></pre></td></tr></table></figure></li></ol><p>好了吗？没错好了！这个时候你已经可以访问了。当你启动以后不出意外的话，会有4行日志，大概是这个样子的：</p><p><img src="/2019/06/15/建立自己的npm镜像服务器/1.png" alt="《4行日志》"></p><p>这4行是比较重要的，其中第一行是verdaccio的配置文件路径，第二行和第三行是插件加载信息，第二行是镜像源的URL，通常我们需要开放到整个内网中，那么我们不太希望使用<code>localhost</code>去访问，更多情况下希望使用IP或者域名去访问，这个时候就得修改配置了。</p><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>打开配置文件<code>/Users/admin/.config/verdaccio/config.yaml</code>（具体文件路径，可以参考上面第一行日志），然后在最下面添加一行：<code>listen: 0.0.0.0:4873</code>。</p><p>另外我们的国内的镜像源一般是使用淘宝镜像去下载东西的，那么可以把我们的镜像源的来源设置为淘宝的镜像源，这样可以提高国内的下载速度。做法也是修改这个配置文件，找到<code>uplinks</code>下面两行把url替换一下，具体的如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a list of other known repositories we can talk to</span></span><br><span class="line"><span class="attr">uplinks:</span></span><br><span class="line"><span class="attr">  npmjs:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">https://registry.npm.taobao.org/</span></span><br></pre></td></tr></table></figure><p>配置好后就大功告成了，把配置文件保存一下，然后重启<code>verdaccio</code>（命令行中<code>Ctrl + C</code>，然后重新运行<code>verdaccio</code>命令）。</p><p>此时可以在浏览器键入<code>http://你的IP:4873/</code>或者<code>http://localhost:4873/</code>来访问管理页面。</p><h2 id="切换到我们的镜像源"><a href="#切换到我们的镜像源" class="headerlink" title="切换到我们的镜像源"></a>切换到我们的镜像源</h2><p>切换镜像源很简单，只要一行代码就搞定：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http://你的IP:4873/</span><br></pre></td></tr></table></figure><p>当然为了更好的对镜像源管理我建议使用<code>nrm</code>来切换：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br><span class="line">nrm add verdaccio http://你的IP:4873/</span><br><span class="line">nrm use verdaccio</span><br></pre></td></tr></table></figure><p>这里我把我们的镜像源命名为<code>verdaccio</code>，你也可以定义为你喜欢的名字，公司内部建议使用公司的名称。你也可以使用<code>nrm ls</code>查看所有镜像源，还可以使用<code>nrm use XXX</code>换成镜像源列表中的其他镜像源。</p><h2 id="使用pm2启动"><a href="#使用pm2启动" class="headerlink" title="使用pm2启动"></a>使用pm2启动</h2><p>我们上面直接运行命令<code>verdaccio</code>启动的，这样是没问题的，有的时候为了更加严谨的方式可以使用<code>pm2</code>。<code>pm2</code>是一款非常优秀的进程管理工具，使用方式也很简单，我们这里就直接使用它启动了，更多使用方法可以看<a href="https://github.com/Unitech/pm2" target="_blank" rel="noopener">这里</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2</span><br><span class="line">pm2 start verdaccio</span><br></pre></td></tr></table></figure><h2 id="上传一个依赖包"><a href="#上传一个依赖包" class="headerlink" title="上传一个依赖包"></a>上传一个依赖包</h2><p>说了这么多我们现在可以开发一个自己的包，然后上传到我们的镜像源上。<br>首先切换到我们自己的源上，然后添加用户（我们镜像源上的用户不是npm镜像源中的用户）。添加用户使用下面命令，然后依次输入用户名、密码、邮箱。输入密码的时候是看不到字符的，尽管输入就可以了。当操作完了会输出一行日志<code>Logged in as orange on http://你的IP:4873/.</code>表示创建用户并登录成功了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure><p>此时你也可以使用<code>npm whoami</code>查看你是否登录成功了。</p><p>此时你可以创建一个依赖包，然后上传上去了。我们来定义一个依赖包的名称，比如就叫<code>my-package</code>，找一个目录输入下面命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir my-package</span><br><span class="line">cd my-package</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><p><code>npm init</code>后会让你输入其他的配置项，比如包名是<code>my-package</code>，其他的直接按回车，最后输入一个<code>yes</code>就可以了。此时你会看到目录下多了一个文件夹叫<code>my-package</code>里面有个文件<code>package.json</code>。</p><p>接下来我们在<code>my-package</code>文件夹下，创建一个<code>index.js</code>的文件。输入下面的代码，当然如果想输入其他的就看自己的喜好了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Hello World!`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们已经创建好了一个非常简单的包，然后我们可以上传了，使用shell/cmd进入我们的<code>my-package</code>目录，然后输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>此时如果看到<code>+ my-package@1.0.0</code>说明已经上传成功了，你可以用浏览器打开<code>http://你的IP:4873/</code>你会发现确实多了一个包。</p><p>如果你在之后上传的时候一定要修改<code>package.json</code>的<code>version</code>字段，并且要大于现在，否则不能上传。也可以使用命令<code>npm version 1.0.1</code>直接修改版本号。</p><h2 id="使用开发好的依赖包"><a href="#使用开发好的依赖包" class="headerlink" title="使用开发好的依赖包"></a>使用开发好的依赖包</h2><p>现在我们使用我们的依赖包，首先在与<code>my-package</code>同级目录下再建一个文件夹，比如叫<code>use-package</code>。同样使用<code>npm init</code>去初始化我们的项目。并且创建一个<code>index.js</code>的文件。</p><p>此时你可以安装我们刚才发布的那个包了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install my-package</span><br></pre></td></tr></table></figure><p>并且在<code>index.js</code>中输入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> helloWorld = <span class="built_in">require</span>(<span class="string">'my-package'</span>)</span><br><span class="line">helloWorld()</span><br></pre></td></tr></table></figure><p>此时大功告成，在shell/cmd中打开<code>use-package</code>文件夹，然后输入命令<code>node index</code>，如果看到<code>Hello World!</code>说明我们上传的依赖已经可以使用了。</p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm镜像 </tag>
            
            <tag> npm源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高效能程序员的修炼》读书笔记</title>
      <link href="/2019/05/26/%E3%80%8A%E9%AB%98%E6%95%88%E8%83%BD%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E4%BF%AE%E7%82%BC%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/05/26/%E3%80%8A%E9%AB%98%E6%95%88%E8%83%BD%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E4%BF%AE%E7%82%BC%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>《高效能程序员的修炼》写的是给程序员的一些建议。书中并没有涉及到代码，而是编码之外的一些提高程序员技能的技巧，而这些技巧往往是程序员所缺乏的。作者<code>Jeff Atwood</code>也是一个大牛，如果你没有听说过他，那么你肯定听说过他创立的一个网站：<a href="https://stackoverflow.com" target="_blank" rel="noopener">https://stackoverflow.com</a>。</p><p><img src="/2019/05/26/《高效能程序员的修炼》读书笔记/1.jpeg" alt="《高效能程序员的修炼》"></p><hr><h3 id="入门须知"><a href="#入门须知" class="headerlink" title="入门须知"></a>入门须知</h3><p>程序员的八种境界：</p><table><thead><tr><th>境界</th><th>具体描述</th><th>典型程序员</th></tr></thead><tbody><tr><td>不朽程序员</td><td>人已经离开了这个世界，但是他的代码却依然活着</td><td>Dijkstra,Knuth</td></tr><tr><td>成功程序员</td><td>不仅拥有广泛的知名度，同事还运营者一家不错的公司，甚至控制着整个产业链</td><td>比尔盖茨,Carmack</td></tr><tr><td>知名程序员</td><td>其他程序员或多或少听说过你，并且对所在领域有积极影响</td><td>阮一峰,张鑫旭</td></tr><tr><td>胜任程序员</td><td>你的能力使得你在工作中游刃有余，公司因你的加盟而得到了提升</td><td>你的某个领导！</td></tr><tr><td>普通程序员</td><td>基本上能够应对一般的编程能力，并且不认为自己能够成为杰出的程序员</td><td>你们公司那种不错的程序员！</td></tr><tr><td>业余程序员</td><td>有创意、热衷于编码，往往是一些有前途的学生或实习生</td><td>就比如我！</td></tr><tr><td>低调程序员</td><td>服务于某家公司，没有什么成就，写代码仅仅是一份工作</td><td>你们公司最多的那种程序员</td></tr><tr><td>烂程序员</td><td>技能匮乏，所做的东西给同事带来痛苦</td><td>你们公司因为技术不行被开除的程序员</td></tr></tbody></table><p>成为一名杰出的程序员其实跟写代码没有太大的关系，做程序员确实需要一些技能，还要有坚韧不拔的精神。除此之外，最重要的还要有<strong>良好的沟通技巧</strong>。这里说的沟通不仅仅是人与人的沟通还包括纸面沟通，比如<strong>写博客</strong>等。<br>写作的过程真的就是一次探索之旅，而且它会贯穿人的一生。</p><h3 id="把一堆烂代码搞定的艺术"><a href="#把一堆烂代码搞定的艺术" class="headerlink" title="把一堆烂代码搞定的艺术"></a>把一堆烂代码搞定的艺术</h3><p>每一天，你一定要一起床就热情澎湃。否则，你就只是在打工。<br>金钱对社区是有毒的。<br>传统的“胡萝卜加大棒”（使驴子前进就在他前面放一个胡萝卜或者用大棒驱赶他）的激励方式仅仅对于那些重复的、机械的任务有效。（言外之意对软件开发是没有效果的，软件开发需要的是内在的激励，要让程序员主动地去投入自己的事业中。正因为如此，作者在创立Stack Overflow的时候并不在乎员工什么时候来上班，或者如何安排工作时间，也不会事无巨细的样样过问，正如你所见的Stack Overflow是成功的）。<br>如果你想造一艘船，就不要催着工人们去收集木材，分派工作，发号施令。你应该教会他们的是对无边无际大海的渴望。<br>如果想在某方面有所提高，最好的办法就是勤加练习。但是，如果你只顾着埋头写代码，连讨论、反思或者学习的时间都没有，你将得不到真正的进步。你必须在磨练工艺与思考如何提高工艺之间找到一个适当的平衡点。<br>沿着那条路下去，一定要快。如果有什么东西挡住了你的去路请绕开它（快速迭代）。<br>尽量避免多任务做事。</p><h3 id="高效编程的原则"><a href="#高效编程的原则" class="headerlink" title="高效编程的原则"></a>高效编程的原则</h3><p>永远都是自己的错：程序员最基本的意识就是你写的代码在任何时候出现了问题，那一定是你的错（而往往不是电脑的问题）。<br>大道至简：如果你热爱编码，而且爱的情真意切，那你就应该惜墨如金。<br>避免写注释：最好的注释就是代码。<br>学会阅读源码：不管文档上面怎么说，源代码才是最终的事实，是你所能找到的最好的，最确定的，最新的文档。<br>向伙伴或互联网求助：即使没有得到你想要的答案，强迫自己去完整地解释自己的问题，常常也会引领你进入新的视野或者为你带来新的发现。<br>创新以人为本：在软件开发领域，执行意味着专注于构成你的应用程序的微小细节。<br>你的团队能通过电梯测试吗：60秒之内，清晰地解释他们在做什么，以及为什么人们会在意他们正在做的事情。<br>性能致胜：网站载入和显示的速度越慢，使用他的人就会越少（要么很快，要么已经死去）。</p><h3 id="招聘程序员须得其法"><a href="#招聘程序员须得其法" class="headerlink" title="招聘程序员须得其法"></a>招聘程序员须得其法</h3><p>怎样招聘程序员：</p><ol><li>首先要求通过几个简单的“Hello World”在线测试。</li><li>提出要看看他们的文件夹。</li><li>只雇认同公司文化的人。</li><li>进行一个周祥的结构化电话面试。</li><li>给他们一个“视镜”项目。</li><li>找个房间面谈，并最后定夺。</li><li>上面没有哪条保证完全奏效的。</li></ol><p>面试官应尽最大努力去避免的2大错误：</p><ol><li>不要让候选人主导面试过程。</li><li>小心只会一招的“小马驹”。</li></ol><p>软件开发者最擅长的就是学习。<br>工作经验年数与编程技能之间是没有必要联系的。</p><h3 id="促使团队紧密协作"><a href="#促使团队紧密协作" class="headerlink" title="促使团队紧密协作"></a>促使团队紧密协作</h3><p>团队的问题往往都是人的问题。<br>如果你想提高团队的工程水平，你需要一个领导，而不是靠一个训导员去强制执行。<br>最有效的一种技术领导就是以身作则。<br>要有结对编程或者代码评审。<br>我们应该以怀疑的态度去看待会议，把它当成是一种降低工作效率的风险。<br>如何开好会议：</p><ol><li>会议绝对不应该超过一个小时，否则应判以死刑。</li><li>每个会议都应该有一个清晰的目标。</li><li>在开会之前预先做好功课。</li><li>把会议变成可选的。</li><li>在会议结束时概括一下待办事项。</li></ol><p>如何对待“换苹果”（一个坏苹果放在一筐好苹果中，那么很快这框苹果都会坏掉）：</p><ol><li>你不必和团队中的每个人都成为朋友（不要充当老好人）。</li><li>如果你的团队主管或者经理没有处理项目中的“坏苹果”，那他就是玩忽职守。</li><li>把某个人从团队中调走是很痛苦的，但是当你意识到你本应该在6个月前就把某人调走时，此时你已经更加痛苦了（没有必要留情面）。</li></ol><p>远程开发需要遵循的原则：</p><ol><li>远程团队最小2个人，需要找到伙伴（废话）。</li><li>只有非常热爱编程的资深程序员才可以申请远程开发的职位（主观能动性要强）。</li><li>为了保证效率，远程团队需要完全自治，并且还需要一个有强烈远景和执行力的领导者。</li></ol><h3 id="程序员的高效工作场所"><a href="#程序员的高效工作场所" class="headerlink" title="程序员的高效工作场所"></a>程序员的高效工作场所</h3><p>可以提高效率的基础设施：</p><ol><li>每个程序员都应该有两台显示屏。</li><li>每个程序员都应该有一台快速的电脑。</li><li>每个程序员都应该自己选择鼠标和键盘。</li><li>每个程序员都应该有一把舒适的椅子。</li><li>每个程序员都应该能快速接入互联网。</li><li>每个程序员都应该有安静的工作环境。</li></ol><p>对于公司来说这几个基本权利很容易做到，这些要求<strong>并不过分</strong>。一个公司愿意付给一个开发人员6W~10W美元的薪水（在美国），却用糟糕的工作条件以及破烂的硬件设施摧残他，这令我难以置信（作者说的，不是我说的，虽然我也很认同，哈哈）。</p><p>购买一张优质的桌子和一把优质的椅子会是你作为一名软件开发者所能做的最好的投资之一了。</p><p>程序员标准坐姿：</p><ol><li>显示器的顶端应该与眼睛平齐。</li><li>桌子的表面应该和肚脐基本持平。</li><li>脚应该在地板上平放，并且膝关节呈90°。</li><li>当你打字的时候，手腕应该和前臂成一条直线，不要上弯或者下弯，也不要侧弯。</li></ol><p>拥有更多的显示空间确实会让你的工作更有效率。</p><p>购买优质座椅的必要性：</p><ol><li>座椅是编程体验中一个主要的组成部分。</li><li>廉价的座椅很糟糕。</li><li>座椅是耐用品。</li></ol><p>理想情况下你的显示屏不应该比灯光下的书本更亮。</p><h3 id="设计时要把用户放在心上"><a href="#设计时要把用户放在心上" class="headerlink" title="设计时要把用户放在心上"></a>设计时要把用户放在心上</h3><p>令人赏心悦目的产品和让人勉强容忍的产品之间的差别，就在于他们的细节有没有被做好（细节决定成败）。<br>用户界面就代表了你的软件（前端的重要性）。<br>用户界面须优先设计。<br>在你草拟用户界面的时候，你必须置身于技术开发环境之外（不要被技术所束缚）。<br>你应该努力不扯上下分页这玩意儿，因为你应该让用户在几个条目中就能找到他们所需要的东西，这高于一切。<br>用户只会读取屏幕上足以让他们完成任务的、最少量的文字。<br>你的团队对用户反馈的响应速度会为你的软件定下基调。<br>即使第一版做的很差劲，也要坚持把它发布出去。</p><h3 id="安全基础：保护用户数据"><a href="#安全基础：保护用户数据" class="headerlink" title="安全基础：保护用户数据"></a>安全基础：保护用户数据</h3><p>尽量使用HTTPS协议，因为：</p><ol><li>HTTPS不再是奢侈品了。</li><li>HTTPS意味着没有人能够在互联网上监视你。</li><li>HTTPS现在变得更快了。</li></ol><p>限制每个用户的登录尝试次数是安全领域的101（101空降师是美国陆军的一只空中突击部队，在诺曼底登陆战役中闻名）。<br>安全的哈希算法应该能防止篡改，同时应该运行缓慢（减速暴力逆向破解的速度）。</p><h3 id="加强代码测试，别让他太差劲"><a href="#加强代码测试，别让他太差劲" class="headerlink" title="加强代码测试，别让他太差劲"></a>加强代码测试，别让他太差劲</h3><p>软件开发人员应该与客户患难与共。<br>同级之间的代码评审是你为提高代码质量所能做的最大的贡献。<br>如果不找来真正的用户做可用性测试的话，你是无法知道你的程序能否正常工作的。</p><h3 id="创建并管理社区，同时从中收益"><a href="#创建并管理社区，同时从中收益" class="headerlink" title="创建并管理社区，同时从中收益"></a>创建并管理社区，同时从中收益</h3><p>社区反馈的经验与教训：</p><ol><li>90%的社区反馈都是垃圾。</li><li>别抵挡不住诱惑而误入歧途。</li><li>坦诚说出你不想做的事。</li><li>倾听社区的声音，但别被它们牵着鼻子走。</li><li>参与并支持你的社区。</li></ol><p>游戏化的好处：</p><ol><li>学习（应该）是有趣的。</li><li>游戏是学习的助手。</li><li>游戏促使人们齐心协力。</li></ol><h3 id="揭露营销伎俩，以及如何避免"><a href="#揭露营销伎俩，以及如何避免" class="headerlink" title="揭露营销伎俩，以及如何避免"></a>揭露营销伎俩，以及如何避免</h3><p>常见的9中营销伎俩：</p><ol><li>用不恰当的比较来误导。</li><li>利用消费惯性（如把黑珍珠与珠宝翡翠放一起来抬高黑珍珠的价格）。</li><li>“免费”的诱惑。</li><li>假借社会行为准则（如利用社区或公益事业）。</li><li>故意允许拖延（如分期）。</li><li>利用禀赋效应。</li><li>利用人的“损失厌恶”。</li><li>制造不合理的期望。</li><li>利用对价的偏见。</li></ol><p>游戏表面上看是免费的，但实际上他们要靠一小撮玩家通过花钱购买额外的东西来支撑（免费增值模式）。因此，玩家群体必须非常大，才足以维持这种游戏的业务模式。也因此，游戏的运营商通过会在互联网的广告空间里推广他们的游戏。（某迅游戏把这种营销方式发挥到淋漓精致）<br>低价是一种营销推动力，它可以成倍的补偿价格降低的部分。</p><h3 id="轻重缓急，了然于心"><a href="#轻重缓急，了然于心" class="headerlink" title="轻重缓急，了然于心"></a>轻重缓急，了然于心</h3><p>幸福的方法：</p><ol><li>把钱花在经历上，而不要花在物质上。</li><li>助人为乐。</li><li>很多次小的、愉快的购买实际上比一次巨额的购买更能有效地给你带来幸福。</li><li>少买保险（保险条款很容易不生效或者返利政策会让人不安）。</li><li>为将来买单。</li><li>三思而后行。</li><li>小心比较购物的陷阱。</li><li>随大流。</li></ol><p>来也匆匆，去也匆匆（不是冲冲），到头来两手空空。</p><p>最后用文章最后抛出的一个问题，结束本章的内容：</p><blockquote><p>对于程序员来说，最难的是要搞明白你夜以继日地拼命工作到底是为了什么？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《进化：从孤胆极客到高效团队》读书笔记</title>
      <link href="/2019/05/12/%E3%80%8A%E8%BF%9B%E5%8C%96%EF%BC%9A%E4%BB%8E%E5%AD%A4%E8%83%86%E6%9E%81%E5%AE%A2%E5%88%B0%E9%AB%98%E6%95%88%E5%9B%A2%E9%98%9F%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/05/12/%E3%80%8A%E8%BF%9B%E5%8C%96%EF%BC%9A%E4%BB%8E%E5%AD%A4%E8%83%86%E6%9E%81%E5%AE%A2%E5%88%B0%E9%AB%98%E6%95%88%E5%9B%A2%E9%98%9F%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>本书是Tock的创始人<code>Brian Fitzpatrick</code>和SVN开发者之一的<code>Ben Collins-Sussman</code>共同写的。下面是我记录的一些书中的重点：</p><p><img src="/2019/05/12/《进化：从孤胆极客到高效团队》读书笔记/1.jpg" alt="《进化：从孤胆极客到高效团队》"></p><hr><h3 id="天才程序神话"><a href="#天才程序神话" class="headerlink" title="天才程序神话"></a>天才程序神话</h3><p>人们总是缺乏安全感，就像程序员担心别人看到并评论自己未完成的工作，所以好多程序员在工作未完成的时候不会频繁地提交代码。<br>人有一种本能：发现领导者和楷模，将他们偶像化，然后试图模仿他们。我们都需要崇拜英雄以激励自己，编程届也有自己的英雄。“技术名人”现象几乎演变成了神话。每个程序员都希望像林纳斯那么可以凭一己之力完成一个操作系统。但是一个人是不可能完成所有的事情，就比如林纳斯，他并没有完成Linux系统中所有代码的编写（他编写的是一个类Unix的概念内核原型，其实这已经很牛逼了），而要完成整个Linux系统，更多的是需要整个团队或者整个社区的努力。<br>在内心深处，我们都希望成为天才。极客的最终幻想就是获得令人称赞的新创意。在山洞里闭关几周甚至数月，努力完美实现自己的创意，然后横空出世，令所有人惊叹不已。同行叹服于你的聪明才智，大众排队使用你的软件，名利随之而来。但是，这种天才神话往往是不可能发生的，所以你该醒醒了。<br>天才神话一方面由于缺乏安全感而导致的，另一方面是担心自己的想法被别人知道（其实没必要，或许你以为独特的想法早就被别人想到了）。<br><strong>单独工作一定比多人合作更具有风险。</strong>编程领域极少出现独行侠，即便真有，他们也不是在真空中完成超人创举的。他们的惊世之作几乎都是灵感的火花和优秀团队创作出来的结果。因为<strong>软件开发是一项团队活动。</strong><br>优秀团队的三大基石：谦虚（Humility）、尊重（Respect）、信任（Trust）。以下简称HRT。<br>HRT需要每个成员做的事：放下自我、批评与自我批评、快速失败和迭代、留出学习的时间、学会忍耐、接受改变。</p><h3 id="打造团队文化"><a href="#打造团队文化" class="headerlink" title="打造团队文化"></a>打造团队文化</h3><p>团队文化不仅仅是团队成员完成工作、编写代码或彼此相处的方式，而且是成员共享的经验、价值观和目标。<br>如果团队成员不重视团队文化，不仅难以培养很强大的团队认同感和对工作的集体荣誉感，而且新成员很容易给团队文化带来不好的影响。<br>团队文化不是团队领导者负责维护的，而是每个成员参与的结果。<br>人少时使用同步沟通（会议和电话等），人多时使用异步沟通（邮件、问题跟踪系统等）。<br>高层同步方式：任务说明书、高效会议、设计文档。<br>主持会议的5条准则：</p><ol><li>只邀请必需人员参加；</li><li>草拟议程并在会议开始前尽早发出；</li><li>完成会议目标即可散会；</li><li>保持会议按议程进行；</li><li>尽量将会议安排在中断点附近（如午餐或下班的时间）。</li></ol><p>日常讨论方式：邮件、在线聊天、面对面沟通。<br>工作中的沟通：代码注释、署名、每次提交必有审阅、测试与发布流程。</p><h3 id="群龙不可无首"><a href="#群龙不可无首" class="headerlink" title="群龙不可无首"></a>群龙不可无首</h3><p>项目和船一样，如果没有人领航，项目团队就是一群只会等待事情发生而无所事事的极客而已。<br>公司不应该强制员工的职业发展进入管理层。如果一个工程师能写出很好的代码，根本无意管理别人或领导团队，那么强制他担任管理或技术主管职位会使你失去一位优秀的工程师，换来一位差劲的经理（本书中的经理特指领导者）。<br>领导者能做的最重要的事就是服务团队，就像管家照顾家人的健康和福利一样。服务型领导者为团队搭桥铺路，在需要时给出建议，而且依旧愿意从事具体工作。<br>领导者不好的做法：雇佣软弱者、忽视表现不佳者、忽视人际关系、与所有人为友（要保持自己的权威）、放宽招人标准、把团队当孩子管（没必要什么都管）。<br>领导者好的做法：放下自尊、成为禅意大师、成为团队催化剂、成员失败也没关系、成为老师或导师、设定清晰的目标、关注幸福度、要有自己的工作、寻找代替自己的人、给团队一方净土、保护团队、肯定团队的成就、激励团队。</p><h3 id="应对有害的人"><a href="#应对有害的人" class="headerlink" title="应对有害的人"></a>应对有害的人</h3><p>不要将团队当作一个力图“驱除恶人”的精英兄弟会，而是要创造一种拒绝容忍特定负面行为的团队文化，也就是说需要去除的是行为而不是特定的人。<br>常见的有害行为：不尊重他人的时间、自大、颐指气使、沟通幼稚或混乱、疑神疑鬼、完美主义。<br>如何处理这些有害的行为：对完美主义者可以换个话题、对有意激怒你的人保持沉默、不要过于情绪化、在愤怒中寻找事实、以德报怨、适时放手、放眼未来。</p><h3 id="组织操作的艺术"><a href="#组织操作的艺术" class="headerlink" title="组织操作的艺术"></a>组织操作的艺术</h3><p>理想的工作体验：完成本职工作后寻求更多的职责、承担风险且不惧失败、表现的像成年人一样、对不确定的东西提出疑问、及时与经理沟通。<br>通常情况：经理不称职（比如经理害怕失败、不信赖员工、藏匿信息、遇到失败归结于员工身上、获得成功自己独享等），办公室政治家（建议尽量避开），管理不当的组织。<br>组织操作的艺术：取得原谅比获取许可更容易、另辟蹊径、学会向上管理、帮助他人（或许不会立即带来好处，但有可能多年以后他会帮助你）、晋升到一个安全的职位、寻找有营销力的朋友。<br>当有机会纠正错误的时候，身居高位的领导往往很乐意去做，繁忙的领导也是如此。<br>如果的确无能为力，那就不要耗着，走为上策。但是，不是说如果现在的工作干得不开心就应该更新简历立马走人。相反，你的首要目标应当是作出所需的改变，使自己开心，完成目标。</p><h3 id="用户也是人"><a href="#用户也是人" class="headerlink" title="用户也是人"></a>用户也是人</h3><p>要创造优秀的产品，需要积极地与用户合作。<br>如果创造更好的产品：</p><ol><li>市场营销：了解人们对软件的看法；着决定了他们会不会愿意尝试。</li><li>产品设计：如果软件做不到容易尝试、速度快、又好而且用户面广，用户就会流失。</li><li>客户服务：主动与用户建立长期的良好关系能影响软件的演化和用户保持率。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微任务与宏任务</title>
      <link href="/2019/04/27/%E5%BE%AE%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%AE%8F%E4%BB%BB%E5%8A%A1/"/>
      <url>/2019/04/27/%E5%BE%AE%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%AE%8F%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>众所周知，JavaScript是基于事件循环而运行的，微任务与宏任务是事件循环中重要概念。自node火起来后，这个知识点就成了面试官压轴大题，所以我们必须要会。</p><p>JavaScript的异步最开始的时候是基于一个个的回调函数，而事件循环中任务，说白了也就是一个个的函数，毕竟函数是JavaScript中的一等公民。那么什么是微任务，什么又是宏任务呢？其实是通过执行的时机来区分的：</p><blockquote><p>微任务：在本次任务执行完后执行。<br>宏任务：在下一个任务循环的时候执行。</p></blockquote><p>这里有一张经典的图片，供大家参考：</p><p><img src="/2019/04/27/微任务与宏任务/1.png" alt="微任务与宏任务"></p><p>每次事件的循环的执行都是以宏任务开始的。如果本次宏任务执行完毕了，那么就会检索是否有微任务，如果有，那么就去执行微任务，如果微任务执行完或者没有微任务的话那么就会进入下次事件循环。</p><blockquote><p>常见的宏任务：setTimeout、setInterval、setImmediate（Node特有）、requestAnimationFrame（浏览器特有）。<br>常见的宏任务：Promise中的then/catch/finally方法、process.nextTick（Node特有）。</p></blockquote><p>这里需要注意一点是Promise的构造方法在new的时候会立即执行。<br>下面来看一个老掉牙的经典面试题吧：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'3'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'4'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'5'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'6'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'7'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'8'</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'9'</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'10'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'11'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'12'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>分别打印：<code>1 7 6 8 2 4 3 5 9 11 10 12</code>。如果和你的预期是一样的说明你已经掌握了，就没必要看下面的分解步骤了。</p><ol><li>首先打印1。第3行遇到<code>setTimeout</code>加入到宏任务队列中，下次处理。第16行，遇到微任务<code>process.nextTick</code>，加入到微任务的队列中。第20行<code>new Promise</code>执行构造方法<code>打印7</code>，将then放在微任务队列中。第20行发现<code>setTimeout</code>，放入宏任务队列中。</li><li>本次任务执行完后，检测微任务，发现有2个，一个是第16行的<code>process.nextTick</code>，一个是23行的<code>then</code>，分别执行，打印6和8。</li><li>执行下一个宏任务，也就是第3行的<code>setTimeout</code>，分别打印2和4，发现有2个微任务，分别打印3和5。</li><li>执行下一个宏任务，也就是第27行的<code>setTimeout</code>，分别打印9和11，发现有2个微任务，分别打印10和12。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事件循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非零环绕规则</title>
      <link href="/2019/04/27/%E9%9D%9E%E9%9B%B6%E7%8E%AF%E7%BB%95%E8%A7%84%E5%88%99/"/>
      <url>/2019/04/27/%E9%9D%9E%E9%9B%B6%E7%8E%AF%E7%BB%95%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>非零环绕规则是图形学中判断某个区域是在所属区域外面还是内部的一种规则。</p><p>简单说一下就是这个样子：<strong>对于路径中的任意给定区域，从该区域内部画一条足够长的线段，使此线段的终点完全露在路径范围之外。然后将计数器初始化为0，每当这条线段与路径上的直线或曲线相交时，就改变计数器的值。如果与路径顺时针部分相交的时候，则加1；如果与路径的逆时针部分相交的时候，则减1。如果最终值不是0，那么说明区域在路径的里面。</strong></p><p><img src="/2019/04/27/非零环绕规则/1.png" alt="非零环绕规则示意图"></p><p>如上图，一条闭合的路径，围绕成了3个区域，也就是图中的A、B、C（图略丑，凑合着看吧）。<br>A区域向外引一条线段（绿色的），可以看到与路径的顺时针相交，所以计数器加1，变成了1，而再外面一些是不会相交了，由于1不是0，所以A在路径里面。<br>同理，B区域引一条线段，我们可以看到和逆时针相交，所以减1，也就是-1，也不会再与路径相交了，由于-1不是0，所以B也在路径的内部。<br>对于C我们引入一条线段，它2次都与顺时针相交，所以计数为2，也就在区域的内部了。</p><p>明白了基本的原理我们看一个代码相关的例子吧。<br>现有HTML：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span>不支持canvas<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果支持HTML5的<code>canvas</code>的时候会创建一个默认大小为<code>300px*150px</code>的canvas画板；如果不支持的时候会把canvas当成一个div元素来处理，那么就会显示里面的文字了。</p><p>然后我们使用JS来绘制图案：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">context.fillStyle = <span class="string">"red"</span>;</span><br><span class="line"></span><br><span class="line">context.beginPath();</span><br><span class="line">context.arc(<span class="number">150</span>, <span class="number">75</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">context.arc(<span class="number">150</span>, <span class="number">75</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="literal">true</span>);</span><br><span class="line">context.fill();</span><br></pre></td></tr></table></figure></p><p>由上我们画了2个弧线，顶点都是(150,75)的位置（其实就是canvas的中心），然后半径一个是50，一个是25，都是从0到2π（弧度2π也就是360°），所以我们画的是2个圆形（弧线是从右边开始画弧的）。最后一个参数有意思，如果为true的时候是逆时针绘制，如果是false则是顺时针绘制（默认是false），那么上述路径中，内圆内部向外引一条射线，那么与内圆交叉的地方是逆时针，那么减1，而与外圆相交的地方是顺时针，所以加1，所以最终的结果是0，也就是内圆内部其实是路径的外面，所以绘制出来的结果如下：<br><img src="/2019/04/27/非零环绕规则/2.png" alt="同心圆"></p><p>如果我们把上述画弧的最后一个参数都去掉的话（使用默认值false），那么效果是怎么样子呢？当然是内圆内部也在路径的内部了（有点绕），如下：<br><img src="/2019/04/27/非零环绕规则/3.png" alt="内圆也在内部"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 非零环绕规则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS7层层叠顺序</title>
      <link href="/2019/04/25/CSS7%E5%B1%82%E5%B1%82%E5%8F%A0%E9%A1%BA%E5%BA%8F/"/>
      <url>/2019/04/25/CSS7%E5%B1%82%E5%B1%82%E5%8F%A0%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>层叠顺序如下：</p><p><img src="/2019/04/25/CSS7层层叠顺序/1.png" alt="层叠顺序"></p><hr><p>更具体的可以参考张鑫旭的<a href="https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/" target="_blank" rel="noopener">这篇文章</a>。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 层叠顺序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试官：考你几个简单的事件问题吧</title>
      <link href="/2019/04/21/%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E8%80%83%E4%BD%A0%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%8B%E4%BB%B6%E9%97%AE%E9%A2%98%E5%90%A7/"/>
      <url>/2019/04/21/%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E8%80%83%E4%BD%A0%E5%87%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%8B%E4%BB%B6%E9%97%AE%E9%A2%98%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>面试官：考你几个简单的事件问题吧。<br>几小时后的你：虽然面试官考的很简单，但是就是没有答上来。</p></blockquote><p>事件处理是JavaScript中非常重要的概念，我们使用的客户端软件往往都是事件驱动的，所以面试官特别喜欢问一些事件相关的知识，这里记录几个常见的问题，供大家学习。</p><hr><p>事件流的三个阶段：事件捕获阶段、目标阶段和事件冒泡阶段（这个问题大多数同学都知道，很容易被问懵）。</p><p>事件处理函数（事件侦听器）：响应的某个事件函数。</p><h4 id="添加事件有几种方式（以click事件为例）？"><a href="#添加事件有几种方式（以click事件为例）？" class="headerlink" title="添加事件有几种方式（以click事件为例）？"></a>添加事件有几种方式（以click事件为例）？</h4><ol><li><p>在HTML中添加<code>onclick</code>属性，值使用JS的字符串来表示要执行的事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">onclick</span>=<span class="string">"handleClick()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"按钮被点击了"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>给DOM元素添加<code>onclick</code>方法，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"按钮被点击了"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>DOM元素使用<code>addEventListener</code>（IE使用<code>attachEvent</code>）来添加方法，如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"按钮被点击了"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h4 id="上述这种onclick和addEventListener两种添加事件的方式有什么不同？"><a href="#上述这种onclick和addEventListener两种添加事件的方式有什么不同？" class="headerlink" title="上述这种onclick和addEventListener两种添加事件的方式有什么不同？"></a>上述这种onclick和addEventListener两种添加事件的方式有什么不同？</h4><ol><li><code>onclick</code>是DOM0级事件处理方式，而<code>addEventListener</code>是DOM2级事件处理方式，所以兼容性<code>onclick</code>会更好一些（虽然现在<code>addEventListener</code>也不会有什么问题）。</li><li><code>addEventListener</code>可以添加多个方法，而<code>onclick</code>只能添加一个。</li><li><p><code>addEventListener</code>可以添加第三个参数，表示是捕获还是冒泡阶段调用，如果为true的时候表示捕获阶段调用，如果是false的话表示冒泡阶段调用，默认是冒泡阶段调用（undefined相当于是false）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"按钮被点击了"</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"body被点击了"</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 点击按钮的时候会先打印"body被点击了" 后 打印 "按钮被点击了"</span></span><br><span class="line"><span class="comment">// 因为第三个参数是true的时候表示捕获阶段调用</span></span><br><span class="line"><span class="comment">// 如果第三个参数都是false的时候 那么先打印 "按钮被点击了" 后打印 "body被点击了"</span></span><br><span class="line"><span class="comment">// 如果一个是false一个是true那么先打印为true的 因为捕获阶段先于冒泡阶段</span></span><br></pre></td></tr></table></figure></li><li><p><code>addEventListener</code>可以使用<code>removeEventListener</code>来删除事件处理程序，而<code>onclick</code>最多只有一个事件处理程序，所以只要<code>btn.onclick = null;</code>就可以了。</p></li></ol><h4 id="addEventListener与attachEvent有什么不同？"><a href="#addEventListener与attachEvent有什么不同？" class="headerlink" title="addEventListener与attachEvent有什么不同？"></a>addEventListener与attachEvent有什么不同？</h4><ol><li><code>addEventListener</code>适用于正常的W3C浏览器，而<code>attachEvent</code>适用于IE浏览器（注：Edge都不支持这玩意）。</li><li><code>attachEvent</code>第一个参数，需要带”on”。比如添加click事件那么attachEvent的第一个参数是”onclick”。</li><li><code>addEventListener</code>中的this指向DOM元素，而<code>attachEvent</code>中的this指向window。</li><li><code>attachEvent</code>只支持冒泡不支持捕获，所以也就没有第三个参数。</li><li><code>attachEvent</code>如果添加多个事件处理程序那么先执行后添加的后执行先添加的，这与addEventListener恰好相反（IE9和IE10修改了执行顺序和addEventListener一样了，先添加的先执行）。</li></ol><h4 id="如何获取事件对象event？"><a href="#如何获取事件对象event？" class="headerlink" title="如何获取事件对象event？"></a>如何获取事件对象event？</h4><p>通常情况下事件处理程序的第一个参数就是event对象，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// event 就是事件对象 通常的习惯 也可以命名为e</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>但是有一种情况下例外，就是IE的DOM0级事件<code>onclick</code>的情况下，使用的是<code>window.event</code>来获取（没错<code>attachEvent</code>也是通过事件处理函数的第一个参数来获取）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;</span><br><span class="line">    event = event || <span class="built_in">window</span>.event;<span class="comment">// 兼容性处理</span></span><br><span class="line">    <span class="built_in">console</span>.log(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="如何来阻止默认行为？"><a href="#如何来阻止默认行为？" class="headerlink" title="如何来阻止默认行为？"></a>如何来阻止默认行为？</h4><p>普通浏览器使用<code>event.preventDefault()</code>来阻止默认行为，IE使用<code>event.retureValue = false;</code>（注意：并不是函数return一个false）来阻止：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;</span><br><span class="line">    event = event || <span class="built_in">window</span>.event;<span class="comment">// 兼容性处理</span></span><br><span class="line">    <span class="keyword">if</span>(event.preventDefault)&#123;<span class="comment">// 阻止默认行为</span></span><br><span class="line">        event.preventDefault();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        event.retureValue = <span class="literal">false</span>;<span class="comment">// IE</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="如何来阻止事件冒泡？"><a href="#如何来阻止事件冒泡？" class="headerlink" title="如何来阻止事件冒泡？"></a>如何来阻止事件冒泡？</h4><p>普通浏览器使用<code>event.stopPropagation();</code>来阻止事件冒泡，IE使用<code>event.cancelBubble = true;</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;</span><br><span class="line">    event = event || <span class="built_in">window</span>.event;<span class="comment">// 兼容性处理</span></span><br><span class="line">    <span class="keyword">if</span>(event.stopPropagation)&#123;<span class="comment">// 阻止事件冒泡</span></span><br><span class="line">        event.stopPropagation();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        event.cancelBubble = <span class="literal">true</span>;<span class="comment">// IE</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="那些标签支持load事件？"><a href="#那些标签支持load事件？" class="headerlink" title="那些标签支持load事件？"></a>那些标签支持load事件？</h4><p>body（或者window对象），img，script（IE9+），link（IE和Opera支持）。</p><h4 id="点击一下鼠标前后会调用那些事件？"><a href="#点击一下鼠标前后会调用那些事件？" class="headerlink" title="点击一下鼠标前后会调用那些事件？"></a>点击一下鼠标前后会调用那些事件？</h4><p>mousedown &gt; mouseup &gt; click。</p><h4 id="双击鼠标前后会调用那些事件？"><a href="#双击鼠标前后会调用那些事件？" class="headerlink" title="双击鼠标前后会调用那些事件？"></a>双击鼠标前后会调用那些事件？</h4><p>mousedown &gt; mouseup &gt; click &gt; mousedown &gt; mouseup &gt; click &gt; dbclick。</p><h4 id="点击一下键盘前后会调用那些事件？"><a href="#点击一下键盘前后会调用那些事件？" class="headerlink" title="点击一下键盘前后会调用那些事件？"></a>点击一下键盘前后会调用那些事件？</h4><p>keydown &gt; keypress &gt; keyup（注意这里与click的区别）。</p><h4 id="按下键盘一直不放前后会调用那些事件？"><a href="#按下键盘一直不放前后会调用那些事件？" class="headerlink" title="按下键盘一直不放前后会调用那些事件？"></a>按下键盘一直不放前后会调用那些事件？</h4><p>keydown &gt; keypress &gt; keydown &gt; keypress …</p><h4 id="移动端触摸一下屏幕前后会调用那些事件？"><a href="#移动端触摸一下屏幕前后会调用那些事件？" class="headerlink" title="移动端触摸一下屏幕前后会调用那些事件？"></a>移动端触摸一下屏幕前后会调用那些事件？</h4><p>touchstart &gt; touchend &gt; mouseover &gt; mousemove（触发一次） &gt; mousedown &gt; mouseup &gt; click。</p><h4 id="事件处理做过什么优化？"><a href="#事件处理做过什么优化？" class="headerlink" title="事件处理做过什么优化？"></a>事件处理做过什么优化？</h4><ol><li>使用事件委托，如表格中删除某一行可以把事件添加到表格上而不是td标签，然后判断那一个元素出发的，然后对特定元素做处理，这样既可以减少事件监听的数量有可以不用关系新增元素的时间。</li><li>移除HTML的时候，先把绑定的事件删除。</li></ol><h4 id="如果用户在页面上填写了一些数据现在要关闭页签，我想在用户关闭的时候提醒他一下该怎么做？"><a href="#如果用户在页面上填写了一些数据现在要关闭页签，我想在用户关闭的时候提醒他一下该怎么做？" class="headerlink" title="如果用户在页面上填写了一些数据现在要关闭页签，我想在用户关闭的时候提醒他一下该怎么做？"></a>如果用户在页面上填写了一些数据现在要关闭页签，我想在用户关闭的时候提醒他一下该怎么做？</h4><p>监听<code>window</code>对象上的<code>beforeunload</code>事件就可以了，可以设置<code>event.returnValue</code>的值等于一个提示语，也有浏览器是根据返回的字符串来提示的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">element,type,handler</span>)</span>&#123;<span class="comment">//通用事件添加函数</span></span><br><span class="line">   <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">        element.addEventListener(type,handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">        element.attachEvent(<span class="string">"on"</span> + type,handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        element[<span class="string">"on"</span> + type] = handler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addEvent(<span class="built_in">window</span>,<span class="string">"beforeunload"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;</span><br><span class="line">    event = event || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> msg = <span class="string">"官人，你先别走啊，你填的东西还没有保存呢！请不要弃我而去啊..."</span>;</span><br><span class="line">    event.returnValue = msg;<span class="comment">// IE的处理</span></span><br><span class="line">    <span class="keyword">return</span> msg;<span class="comment">//普通浏览器的处理</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这里需要注意一点虽然我们给了特定的字符串并不是所有浏览器都会显示这个字符串的，Chrome就会给定特定的提示语而不是使用我们给定的字符串，但是只有给定字符串不为空（隐式转化为true）它才会给出提示。</p><h4 id="下列代码依次打印的是什么？"><a href="#下列代码依次打印的是什么？" class="headerlink" title="下列代码依次打印的是什么？"></a>下列代码依次打印的是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里btn还是上面的button元素。</span></span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"冒泡事件1"</span>)</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"冒泡事件2"</span>)</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"document.body冒泡事件"</span>)</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"捕获事件1"</span>)</span><br><span class="line">&#125;,<span class="literal">true</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"捕获事件2"</span>)</span><br><span class="line">&#125;,<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"document.body捕获事件"</span>)</span><br><span class="line">&#125;,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>执行的结果是：</p><blockquote><p>document.body捕获事件<br>冒泡事件1<br>冒泡事件2<br>捕获事件1<br>捕获事件2<br>document.body冒泡事件</p></blockquote><p>事件是先捕获后冒泡的，所以第一个和最后一个是没有问题的。中间4个事件的执行，都是处于目标阶段，目标阶段会按照事件的添加顺序来执行，而不会管你是否是捕获还是冒泡。</p><h4 id="如何让一个事件先冒泡后捕获？"><a href="#如何让一个事件先冒泡后捕获？" class="headerlink" title="如何让一个事件先冒泡后捕获？"></a>如何让一个事件先冒泡后捕获？</h4><p>浏览器都是先捕获后冒泡的（如果支持捕获的时候），并不支持先冒泡后捕获，我们可以改造一下捕获的函数，让他在冒泡结束后再执行，就可以达到类似的效果。如上面最后一个<code>document.body</code>的事件可以像下面这样改造一下，那么<code>document.body捕获事件</code>将会在最后打印。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"document.body捕获事件"</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事件处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP文件缓存判断流程</title>
      <link href="/2019/04/20/HTTP%E6%96%87%E4%BB%B6%E7%BC%93%E5%AD%98%E5%88%A4%E6%96%AD%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/04/20/HTTP%E6%96%87%E4%BB%B6%E7%BC%93%E5%AD%98%E5%88%A4%E6%96%AD%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/04/20/HTTP文件缓存判断流程/1.png" alt="HTTP文件缓存判断流程"></p><p>缓存判断流程：</p><ol><li>如果<code>Cache-Control</code>（或者<code>Expires</code>，<code>Expires</code>绝对时间，优先级比<code>Cache-Control</code>低）未过期，那么使用缓存，否则按照下一条来判断。</li><li>如果有<code>Etag</code>，则会向服务器发送<code>Etag</code>和<code>If-None-Match</code>，由浏览器来判断是<code>200</code>还是<code>304</code>。如果没有<code>Etag</code>那么按照下一条来判断。</li><li>浏览器判断<strong>上次文件响应头</strong>中是否有<code>Last-Modified</code>信息，有则连同<code>If-Modified-Since</code>一起发送到服务器，由服务器来判断<code>200</code>还是<code>304</code>。</li><li>如果以上都没有使用，那么浏览器请求一次服务器，返回<code>200</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《现代前端技术解析》读书笔记</title>
      <link href="/2019/04/20/%E3%80%8A%E7%8E%B0%E4%BB%A3%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/04/20/%E3%80%8A%E7%8E%B0%E4%BB%A3%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>这本书并没有讲太多的深层次的技术，讲的都是一些原理与思路，非常适合想要从宏观上了解前端的读者。本笔记按照里面的章节记录一些书中有意思的部分。</p><p><img src="/2019/04/20/《现代前端技术解析》读书笔记/1.jpg" alt="《现代前端技术解析》"></p><hr><h3 id="Web前端技术基础"><a href="#Web前端技术基础" class="headerlink" title="Web前端技术基础"></a>Web前端技术基础</h3><p>前端开发模式的演变：静态黄页、服务器组装动态网页数据、后端为主的MVC、前后端分离、纯前端MV*为主与中间层直出、前端Virtual DOM与MNV*前后端同构。</p><p>浏览器的组成部分：用户界面、网络、JavaScript引擎、渲染引擎、UI后端、JavaScript解释器和持久化数据存储。</p><p>渲染引擎工作流程：解析HTML构建DOM树、构建渲染树、渲染树布局阶段、绘制渲染树。</p><p>页面生成后，如果页面元素位置发生变化，就要从布局阶段开始重新渲染，这个过程叫做重排。如果页面元素只是显示样式改变而布局不变，那么页面内容改变将从绘制阶段开始，也成为页面的重绘。重排通常会导致页面元素几何大小位置发生变化且伴随着重新渲染的巨大代价，因为我们要尽量减少重排。</p><p>CSS权重：!important &gt; 内联样式 &gt; id选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 继承的样式</p><p>浏览器所支持的缓存方式：HTTP文件缓存、LocalStorage、SessionStorage、indexDB、Web SQL、Cookie、cacheStorage、Application Cache。</p><p>Chrome浏览器HTTP缓存资源位置：DevTools &gt; Application &gt; Frames</p><p>HTTP文件缓存判断流程，这一部分比较重要，单独成章，请看<a href="/2019/04/20/HTTP文件缓存判断流程/#more">这里</a>。</p><p>sessionStorage关闭浏览器会自动清空。</p><p>Cookie一般会通过HTTP请求发送到服务端，通常认为醉倒长度限制是4KB，可以分为Session Cookie和持久型Cookie。其中Session Cookie保存在内存中，浏览器关闭会消失；持久型Cookie保存在硬盘中。</p><p>调试node:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g node-inspector</span><br><span class="line">node-debugger index.js</span><br></pre></td></tr></table></figure></p><p>然后使用<code>node-inspector</code>命令会给出一个url，浏览器访问这个url就可以调试了。</p><h3 id="前端与协议"><a href="#前端与协议" class="headerlink" title="前端与协议"></a>前端与协议</h3><p>通常一个完整的HTTP报文由头部、空行、正文三部分组成。空行用于区分报文头部和报文正文，由一个回车符和一个换行符组成。</p><p>HTTP1.1标准发布与1999年，相对于1.0增加了协议扩展切换、缓存、部分文件传输优化、长连接、消息传递、host头域、错误提示等一些重要的增强特性。</p><p>HTTP1.1长连接机制是通过请求头中的keep-alive头信息来控制的。默认是包含此信息的。1.0如果添加的话如果服务器支持的情况下会返回一个keep-alive表示文件请求可以复用之前的请求。</p><p>协议扩展切换指的是HTTP1.1协议支持在请求头信息中添加Upgrade头并让客户端通过头部标识令服务器知道它能够支持其他备用通讯协议的一种机制。如WebSocket连接时浏览器会在头信息中添加<code>Connection:Upgrade</code>和<code>Upgrade:websocket</code>告诉浏览器，后面要进行协议切换为WebSocket协议，如果浏览器支持的话则在响应头中返回上面2个头信息，并返回101的响应码。</p><p>部分文件传输优化说的是HTTP1.1不仅可以传输文本，也可以传输二进制数据，如FormData。</p><p>HTTP2.0的特性：</p><ol><li>完全采用二进制格式来传输数据。</li><li>使用TCP多路复用的方式来降低网络请求连接时建立与关闭的开销。</li><li>支持传输流的优先级和流量控制机制，所以不需要再把CSS放在HTML顶部，JavaScript放在HTML底部，HTTP2.0自动就会做这些事情。</li><li>支持服务端推送。</li><li>强制使用SSL协议，所以肯定是HTTPS协议。</li></ol><p>常见的网络攻击手段：XSS、SQL注入、CSRF（cross-site Request Forgery,跨站点请求伪造）。</p><p>XSS可以通过转义HTML标签来解决，SQL注入可以使用预处理来解决，CSRF可以通过添加Token来解决（相对的）。</p><p>DNS劫持，攻击者劫持了DNS，使得域名转化为IP的过程，指向了其他的IP。<br>HTTP劫持，读取或者修改HTTP报文中的内容，常用的处理措施就是使用HTTPS请求。</p><p>HTTPS协议是通过加入了SSL层来加密HTTP数据进行安全传输的HTTP协议，默认端口是443。</p><p>服务端主动找客户端的方式：WebSocket、轮询、长轮询、DDP（普及程度不高）、HTTP流。</p><h3 id="前端三层结构与应用"><a href="#前端三层结构与应用" class="headerlink" title="前端三层结构与应用"></a>前端三层结构与应用</h3><p>页面使用table标签会比较慢，因为table会等表格内全部内容都解析完成后进行一次性渲染。</p><p>ES7常用的三种特性：幂指数操作符（2**3 === 8），Array.prototype.includes，async/await。</p><p>前端统一CSS样式的方式：reset（清楚浏览器的默认样式）、normalize（使用某一种默认样式）、neat（两者结合，需要根据网页设计特点来）。</p><p>前端实现动画的五种方式：JavaScript操作DOM实现，SVG动画，CSS transition、CSS animation、Canvas。</p><p>响应式设计的2种方法：</p><ol><li>前端或者后端判断userAgent来跳转不同的页面来完成不同设备浏览器的适配（常见的移动端以m.开头的域名）。</li><li>使用媒体查询，自动改变页面布局。</li></ol><p>常用的rem初始值定义方法：</p><ol><li><code>1rem = 屏幕宽度 * 屏幕分辨率 / 10</code>也就是1rem想到于屏幕宽度的10%，所有尺寸相当于使用百分比来布局的。</li><li><code>1rem = 屏幕宽度 / 320 * 10</code>也就是1rem想到于320px屏幕上的10像素。</li></ol><p>本章其他内容主要为HTML、CSS、JS的一些基础知识以及ES6的一些内容，这里就不再列出来了。</p><h3 id="前端项目与技术实践"><a href="#前端项目与技术实践" class="headerlink" title="前端项目与技术实践"></a>前端项目与技术实践</h3><p>前端通用规范：三层架构分离（HTML/CSS/JS）、缩进（通常一个tab四个空格）、内容编码（<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>）、标签属性等使用小写、代码每行不超过120个（或80个）字符、多写注释、行尾去掉多于的空格与符号。</p><p>for-in循环里面要尽量含有<code>hasOwnProperty</code>防止访问原型中的属性或方法。</p><p>常用的模块化方法有：AMD（requireJS）、CMD（seaJS）、CommonJS（node规范）、import/export等。</p><p>自动化构建常用流程：读取入口文件、分析模块引用、按照引用加载模块、模块文件编译处理、模块文件合并、文件优化处理、写入生成目录。</p><p>简单上报用户点击位置的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">"click"</span>,<span class="string">"body"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span>&#123;</span><br><span class="line">    report(e.pageX,e.pageY);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>作为前端的开发者，学习的方式有很多，比如看别人的技术博客，研究最新的技术方向、阅读开源代码、挺技术分享会、看书等。</p><p>一切技术最终的目的都是为产品实现服务的，切记勿过分追求技术，建议大家看一两本关于产品经理方向的书籍。</p><hr><p>到此，我们记录了一些书中重点的部分，此外还有很多一部分内容讲的是MVVM的思想、以及前端跨栈开发、一些技术的实践、对前端未来的一些展望等，由于内容比较多就不展开详细说了，感兴趣的小伙伴可以去看看书。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bind、call、apply的实现</title>
      <link href="/2019/04/18/bind%E3%80%81call%E3%80%81apply%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/04/18/bind%E3%80%81call%E3%80%81apply%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><code>bind</code>、<code>call</code>、<code>apply</code>是JavaScript中<code>Function.prototype</code>非常重要的三个方法，他们的作用是改变<code>this</code>的指向。三者的区别是：</p><blockquote><p><code>bind</code>返回一个函数，该函数改变了<code>this</code>的指向。<br><code>call</code>直接调用函数，也可以传递参数用逗号隔开。<br><code>apply</code>直接调用函数，也可以传递参数使用数组传递给第二个参数。</p></blockquote><p>我们现在详细解读一下各个函数的实现方式。</p><h3 id="bind的实现"><a href="#bind的实现" class="headerlink" title="bind的实现"></a>bind的实现</h3><p><code>bind</code>的基本用法：</p><ol><li>函数调用<code>bind</code>，返回一个新的函数。</li><li><code>bind</code>方法的第一个参数是宿主对象，也就是执行的<code>this</code>。</li><li><code>bind</code>返回函数执行时候的参数是<code>bind</code>方法第二个至多个参数与调用时参数的合集。</li></ol><p>bind简单实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;<span class="comment">// 这个this其实是真正的函数</span></span><br><span class="line">    <span class="comment">// 获取第二至多个参数</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 返回一个函数 该函数是真正执行时的函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 获取真正执行时传进来的函数</span></span><br><span class="line">        <span class="keyword">var</span> bindArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="comment">// 合并参数 并且调用函数</span></span><br><span class="line">        <span class="keyword">return</span> self.apply(context, args.concat(bindArgs));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个简单的<code>bind</code>已经解决了上面的三个基本用法了，其实<code>bind</code>还有2个附加的特性：</p><ol start="4"><li>如果上面self不是函数（防止非函数的原型指向<code>Function.prototype</code>），那么会报错。</li><li>从改变<code>this</code>的指向来看，<code>new</code>的优先级大于<code>bind</code>。</li></ol><p>功能更强大的<code>bind</code>实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> self !== <span class="string">"function"</span>) &#123;<span class="comment">// 如果self不是函数则报错</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Function.prototype.bind - what is trying to be bound is not callable"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个中间函数 让返回的函数继承它</span></span><br><span class="line">    <span class="keyword">var</span> FN = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> returnFn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bindArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="comment">// 重点 如果返回函数的this是FN 说明是new出来的 this就是new的对象 否则是context</span></span><br><span class="line">        <span class="keyword">return</span> self.apply(<span class="keyword">this</span> <span class="keyword">instanceof</span> FN ? <span class="keyword">this</span> : context, args.concat(bindArgs));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FN的原型指向函数的原型</span></span><br><span class="line">    FN.prototype = self.prototype;</span><br><span class="line">    <span class="comment">// 返回的函数继承FN</span></span><br><span class="line">    returnFn.prototype = <span class="keyword">new</span> FN();</span><br><span class="line">    <span class="keyword">return</span> returnFn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="call的实现"><a href="#call的实现" class="headerlink" title="call的实现"></a>call的实现</h3><p><code>call</code>的基本用法：</p><ol><li>函数调用<code>call</code>，函数会执行，并且<code>this</code>指向了第一个函数。</li><li><code>call</code>方法的第一个参数是<code>null</code>或者<code>undefined</code>的时候<code>this</code>会绑定在全局对象上。</li><li><code>call</code>方法第二个至多个参数会传给执行的方法。</li></ol><p><code>call</code>方法简单实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果为空 则绑定在全局函数</span></span><br><span class="line">    <span class="keyword">var</span> context = context || <span class="built_in">window</span>;</span><br><span class="line">    <span class="comment">// 使用context.fn() 来调用函数 来模拟fn绑定在context上</span></span><br><span class="line">    context.fn = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">        args.push(<span class="string">'arguments['</span> + i + <span class="string">']'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里比较尴尬 因为context.fn调用的时候 无法把不定长的arguments 一个一个地传进去</span></span><br><span class="line">    <span class="comment">// 所以就使用eval方法了 当然可以用apply但是稍后我们也要实现它 所以就不能用了</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + args +<span class="string">')'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除添加的方法（毁尸灭迹）</span></span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="apply的实现"><a href="#apply的实现" class="headerlink" title="apply的实现"></a>apply的实现</h3><p><code>apply</code>的基本用法：</p><ol><li>函数调用<code>apply</code>，函数会执行，并且<code>this</code>指向了第一个函数。</li><li><code>apply</code>方法的第一个参数是<code>null</code>或者<code>undefined</code>的时候<code>this</code>会绑定在全局对象上。</li><li><code>apply</code>方法第二个参数是一个数组，相当于函数执行时的参数。</li></ol><p><code>apply</code>方法简单实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.apply = <span class="function"><span class="keyword">function</span> (<span class="params">context, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = context || <span class="built_in">window</span>;</span><br><span class="line">    context.fn = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">if</span> (!arr) &#123;</span><br><span class="line">        result = context.fn();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> args = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">            args.push(<span class="string">'arr['</span> + i + <span class="string">']'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result = <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + args + <span class="string">')'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bind </tag>
            
            <tag> call </tag>
            
            <tag> apply </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>generator处理异步操作</title>
      <link href="/2019/04/14/generator%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/04/14/generator%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><code>generator</code>是ES6新的语法，我们先简单的回顾一下他的使用：</p><h3 id="generator基本用法"><a href="#generator基本用法" class="headerlink" title="generator基本用法"></a>generator基本用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">genFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'aaa'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'bbb'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'ccc'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = genFn();</span><br><span class="line">gen.next();<span class="comment">// &#123;value: "aaa", done: false&#125;</span></span><br><span class="line">gen.next();<span class="comment">// &#123;value: "bbb", done: false&#125;</span></span><br><span class="line">gen.next();<span class="comment">// &#123;value: "ccc", done: true&#125;</span></span><br><span class="line">gen.next();<span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line">gen.next();<span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p><code>generator</code>函数是在<code>function</code>和函数名之间添加<code>*</code>来定义的。<code>generator</code>函数调用后并没有真正的执行，当调用返回对象的<code>next</code>方法会执行并返回<code>generator</code>函数定义处的<code>yield</code>（或<code>return</code>）前面的值，从而使得执行与定义分离。</p><p><code>generator</code>对象的<code>next</code>方法也可以传参：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">genFn</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"arg="</span> + arg)</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">yield</span> <span class="string">'aaa'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a="</span> + a);</span><br><span class="line">    <span class="keyword">var</span> b = <span class="keyword">yield</span> <span class="string">'bbb'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b="</span> + b);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ccc'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = genFn(<span class="string">"123"</span>);<span class="comment">// 将arg的值赋值为“123” 但是并没有执行</span></span><br><span class="line"><span class="keyword">var</span> ga = gen.next(<span class="string">"a"</span>);<span class="comment">// 执行 打印"arg=123" 因为并没有yield所以相当于“a”的值没有赋值给任何变量</span></span><br><span class="line"><span class="built_in">console</span>.log(ga);<span class="comment">// &#123;value: "aaa", done: false&#125;</span></span><br><span class="line"><span class="keyword">var</span> gb = gen.next(<span class="string">"b"</span>);<span class="comment">// 执行 并把"b" 传给变量a 打印"a=b" </span></span><br><span class="line"><span class="built_in">console</span>.log(gb);<span class="comment">// &#123;value: "bbb", done: false&#125;</span></span><br><span class="line"><span class="keyword">var</span> gc = gen.next(<span class="string">"c"</span>);<span class="comment">// 执行 把"c"的值赋值给b 打印"b=c"</span></span><br><span class="line"><span class="built_in">console</span>.log(gc);<span class="comment">// &#123;value: "ccc", done: true&#125;</span></span><br><span class="line">gen.next();<span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line">gen.next();<span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><h3 id="generator简单异步处理"><a href="#generator简单异步处理" class="headerlink" title="generator简单异步处理"></a>generator简单异步处理</h3><p>现在使用有一个异步的<code>fetch</code>请求，打印出它返回的结果，我们可以这么写<code>generator</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">asyncGenFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">yield</span> fetch(<span class="string">"https://api.github.com/emojis"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = asyncGenFn();<span class="comment">// 一定要注意这里没有执行</span></span><br><span class="line"><span class="keyword">var</span> result = gen.next();<span class="comment">// &#123;value: Promise, done: false&#125;</span></span><br><span class="line"><span class="comment">// 此时的result.value就是asyncGenFn中的fetch返回的Promise 那么此时就可以这么处理了</span></span><br><span class="line">result.value.then(<span class="function"><span class="params">data</span>=&gt;</span>data.json())<span class="comment">// 将数据转化为JSON格式</span></span><br><span class="line">    .then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">        gen.next(data);<span class="comment">// 把data再传回asyncGenFn让他自己打印</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>上面我们已经把一个异步操作用generator处理了，我们现在处理2个异步操作，再加一个fetch请求发送后的1秒后打印字符串的一个异步操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        resolve(<span class="string">"Hello World"</span>);<span class="comment">// 1秒后打印Hello World</span></span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">asyncGenFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result1 = <span class="keyword">yield</span> fetch(<span class="string">"https://api.github.com/emojis"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(result1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result2 = <span class="keyword">yield</span> promise;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"异步数据是："</span> + result2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = asyncGenFn();<span class="comment">// 一定要注意这里没有执行</span></span><br><span class="line"><span class="keyword">var</span> result1 = gen.next();<span class="comment">// &#123;value: Promise, done: false</span></span><br><span class="line"><span class="comment">// 此时的result.value就是asyncGenFn中的fetch返回的Promise 那么此时就可以这么处理了</span></span><br><span class="line">result1.value.then(<span class="function"><span class="params">data</span>=&gt;</span>data.json())<span class="comment">// 将数据转化为JSON格式</span></span><br><span class="line">    .then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result2 = gen.next(data);<span class="comment">// 把data再传回asyncGenFn让他自己打印</span></span><br><span class="line">        <span class="comment">// 调用这里的前半部分和之前的是一样的 现在开始处理第二个yield</span></span><br><span class="line">        <span class="comment">// 此时的resulet2的值是 &#123;value: Promise, done: false&#125;</span></span><br><span class="line">        <span class="comment">// 其中result2.value就是asyncGenFn中的promise 那么此时你可以</span></span><br><span class="line">        result2.value.then(<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;<span class="comment">// 这个val就是"Hello World"</span></span><br><span class="line">            gen.next(val);<span class="comment">// 把"Hello World"传回打印 "异步数据是：Hello World"</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>通过2次的异步请求我们貌似发现了点处理规律，上面对<code>generator</code>的处理基本上都是大同小异，唯一一点区别就是<code>result1.value.then</code>调用的时候先转换了一下数据。其实转换数据这一个步骤也是一个<code>Promise</code>那我们就可以把他当做异步来处理咯，也就是可以放在<code>asyncGenFn</code>函数内部来处理，请看这里：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">asyncGenFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result1 = <span class="keyword">yield</span> fetch(<span class="string">"https://api.github.com/emojis"</span>);</span><br><span class="line">result1 = <span class="keyword">yield</span> result1.json();<span class="comment">// 异步就yield一下</span></span><br><span class="line"><span class="built_in">console</span>.log(result1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result2 = <span class="keyword">yield</span> promise;<span class="comment">//promise还是上面的promise</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"异步数据是："</span> + result2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = asyncGenFn();<span class="comment">// 一定要注意这里没有执行</span></span><br><span class="line">gen.next().value.then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;<span class="comment">// fetch</span></span><br><span class="line">    gen.next(data).value.then(<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;<span class="comment">// 转换为json</span></span><br><span class="line">        gen.next(val).value.then(<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;<span class="comment">// 异步promise</span></span><br><span class="line">            gen.next(val); </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这下有没有豁然开朗，异步操作的执行其实是一个套路，就是递归调用<code>gen.next().value.then()</code>就可以了。由上可知，<strong>异步的<code>generator</code>执行时如果遇到<code>yield</code>那么就去调用<code>gen.next().value.then()</code>去处理该<code>Promise</code></strong>，后面这个处理的过程是很机械地，我们是否可以把处理<code>Promise</code>这个过程封装一下，然后将注意力完全放在<code>generator</code>上呢，假如我们把这个封装好的东西叫他执行器，那样我们就彻底不需要关注执行器怎么实现了，只需要关注<code>generator</code>然后用执行器去执行它。此时你貌似懂了点什么，但是你还会问如果不是<code>Promise</code>的异步操作呢？我们先不考虑这种情况，这里假设你很聪明，传的所有的异步操作都是<code>Promise</code>。某大神说：“<strong>过早的优化是万恶之源。</strong>”。<br>现在我们就简单的实现一下这个执行器吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">actuator</span>(<span class="params">gen</span>)</span>&#123;<span class="comment">// 接收一个 generator 函数</span></span><br><span class="line">    <span class="keyword">var</span> g = gen();<span class="comment">// 并没有执行</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = g.next(data);<span class="comment">// 调用next方法</span></span><br><span class="line">        <span class="keyword">if</span> (result.done) <span class="keyword">return</span> result.value;<span class="comment">// 如果结束则返回值</span></span><br><span class="line">        result.value.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="comment">// 上面的套路</span></span><br><span class="line">            next(data);<span class="comment">// 递归调用</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">actuator(asyncGenFn); <span class="comment">// 用执行器去执行 结果一下</span></span><br></pre></td></tr></table></figure><h3 id="generator异步处理绕不开的一个库co"><a href="#generator异步处理绕不开的一个库co" class="headerlink" title="generator异步处理绕不开的一个库co"></a>generator异步处理绕不开的一个库<strong>co</strong></h3><p>我们用了很少的几行代码写了一个执行器，其实这上面的<code>actuator</code>函数是对大神<code>TJ Holowaychuk</code>所写的<strong>co</strong>库的拙劣模仿，现在我们可以直接引用<code>co</code>库来实现我们的异步操作：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</span><br><span class="line"></span><br><span class="line">co(asyncGenFn); <span class="comment">// 就这么简单</span></span><br></pre></td></tr></table></figure></p><p>处理<code>generator</code>的异步就这么简单，直接用<code>co</code>库包一层就会执行。之前我们还留了一个问题，如果<code>yield</code>后面的不是<code>Promise</code>那该怎么办？其实也好办，只要把它转换为<code>Promise</code>就可以了，<code>co</code>也是这么做的。另外我们这里假设都是直接成功的，失败的情况下并没有考虑，<code>co</code>已经把失败的情况也处理了。那它在我们的<code>actuator</code>函数的基础上做了那些操作呢？请看<a href="https://github.com/tj/co/blob/master/index.js" target="_blank" rel="noopener">co源码</a>，github仓库在<a href="https://github.com/tj/co" target="_blank" rel="noopener">这里</a>。</p><h3 id="async函数处理异步"><a href="#async函数处理异步" class="headerlink" title="async函数处理异步"></a>async函数处理异步</h3><p>async函数处理异步也很简单，如上面的例子我们可以这么写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncFn</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 使用async关键字的函数</span></span><br><span class="line">    <span class="keyword">var</span> result1 = <span class="keyword">await</span> fetch(<span class="string">"https://api.github.com/emojis"</span>);</span><br><span class="line">result1 = <span class="keyword">await</span> result1.json();<span class="comment">// 异步就await一下 await关键字只能用于async函数</span></span><br><span class="line"><span class="built_in">console</span>.log(result1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result2 = <span class="keyword">await</span> promise;<span class="comment">//promise还是上面的promise</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"异步数据是："</span> + result2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncFn();<span class="comment">// 执行async函数</span></span><br></pre></td></tr></table></figure></p><p>不知道你有没有发现<code>async</code>函数和<code>generator</code>函数处理异步的代码很相似，无非就是把<code>*</code>换成<code>async</code>并且挪了一个位置（不挪位置编译器还以为<code>async</code>是你的函数名呢），然后把里面的<code>yeild</code>换成了<code>await</code>。其实<code>async</code>函就是<code>generator</code>和<code>co</code>的语法糖：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ,,, 里面可能用到了await</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 就相当于</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ... 里面用到了yeild</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以异步函数fn的执行fn()相当于用执行器co来执行generator</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> generator </tag>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的正则表达式</title>
      <link href="/2019/04/13/JavaScript%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/04/13/JavaScript%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>正则表达式（Regular Expression）描述了一种字符串匹配的模式，可以用来检查一个字符串是否含有某种子串，将匹配的子串做替换或者从某个串中取出符合某个条件的子串等。</p></blockquote><h3 id="创建正则对象"><a href="#创建正则对象" class="headerlink" title="创建正则对象"></a>创建正则对象</h3><ol><li><p>语法模拟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regExp = <span class="regexp">/\d/gi</span>;</span><br></pre></td></tr></table></figure></li><li><p>new创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\d"</span>,<span class="string">"gi"</span>);</span><br></pre></td></tr></table></figure></li></ol><p>两者的区别：如果使用new来创建那么需要对正则表达式进行转义如<code>\d</code>需要转义为<code>\\d</code>，<code>\\</code>需要转义为<code>\\\\</code>。</p><h3 id="匹配标示"><a href="#匹配标示" class="headerlink" title="匹配标示"></a>匹配标示</h3><table><thead><tr><th>匹配标示</th><th>含义</th></tr></thead><tbody><tr><td>g</td><td>全局匹配</td></tr><tr><td>i</td><td>忽略大小写</td></tr><tr><td>m</td><td>多行搜索</td></tr></tbody></table><h3 id="正则表达式的使用"><a href="#正则表达式的使用" class="headerlink" title="正则表达式的使用"></a>正则表达式的使用</h3><p>JavaScript中正则表达式的使用涉及2个类型，一个就是上面的<code>RegExp</code>，还有一个就是我们常用的<code>String</code>。<br>RegExp对象正则处理常用的方法：</p><table><thead><tr><th>方法</th><th>描述</th><th>使用</th></tr></thead><tbody><tr><td>test</td><td>匹配参数是否出现在字符串中</td><td>regExp.test(str);</td></tr><tr><td>exec</td><td>返回匹配模式的字符串</td><td>regExp.exec(str);</td></tr></tbody></table><p>String对象正则处理常用的方法：</p><table><thead><tr><th>方法</th><th>描述</th><th>使用</th></tr></thead><tbody><tr><td>search</td><td>匹配符合匹配规则的字符串出现的位置</td><td>str.search(regExp);// 没匹配到返回-1</td></tr><tr><td>match</td><td>返回匹配模式的字符串（返回数组）</td><td>str.match(regExp);// 没匹配到返回null</td></tr><tr><td>replace</td><td>使用指定的内容替换匹配到的字符串</td><td>str.replace(regExp,”新的字符串或函数”);</td></tr><tr><td>split</td><td>使用匹配到的字符串进行分割字符串（返回数组）</td><td>str.split(regExp);// 没匹配到返回整个字符串的数组</td></tr></tbody></table><p>此外regExp对象还有几个不太常用的属性：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regExp = <span class="regexp">/\d/gi</span>;</span><br><span class="line"><span class="built_in">console</span>.log(regExp.global);<span class="comment">// 是否全局变量 如果有标识符g 那么返回true 这里打印true</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp.ignoreCase);<span class="comment">// 是否忽略大小写 如果有标识符i 那么返回true 这里打印true</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp.multiline);<span class="comment">// 是否多行 如果有标识符m 那么返回true 这里打印false</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp.source);<span class="comment">// 匹配规则 这里打印\d</span></span><br><span class="line"><span class="built_in">console</span>.log(regExp.lastIndex);<span class="comment">// 开始搜索下一个匹配项的位置 这里打印0</span></span><br></pre></td></tr></table></figure></p><h3 id="子表达式与反向引用"><a href="#子表达式与反向引用" class="headerlink" title="子表达式与反向引用"></a>子表达式与反向引用</h3><p>这里有几个比较重要的概念：</p><blockquote><p><strong>子表达式</strong>：在正则匹配中，使用一对括号括起来的内容就是子表达式。<br><strong>捕获</strong>：在正则匹配中，子表达式匹配到的内容会被系统捕获到系统的缓冲区中。<br><strong>反向引用</strong>：当捕获以后，可以在匹配模式中使用<code>\n</code>（n表示数字，从<strong>1</strong>开始），来引用系统中第几号缓冲区的内容。</p></blockquote><p>我们看个例子，假设我们要匹配两个相同单词（这里的单词其实是指多个字母）中间是三个数字的内容，如<code>a123a</code>、<code>abc666abc</code>这种的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"java123javabbb1232bccccc322deee666e"</span>;</span><br><span class="line"><span class="keyword">var</span> regExp = <span class="regexp">/(\w+)\d&#123;3&#125;\1/gi</span>;<span class="comment">// 捕获多个字母 中间是3个数字 然后后面的内容与前面的相同</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(regExp);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">// ["java123java", "e666e"]</span></span><br></pre></td></tr></table></figure></p><p>是不是有点明白了，不明白我们再看一个简单的例子，查找如<code>1221</code>、<code>6886</code>这样的<code>ABBA</code>形的数字：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"12213456886"</span>;</span><br><span class="line"><span class="keyword">var</span> regExp = <span class="regexp">/(\d)(\d)\2\1/gi</span>;<span class="comment">// 捕获2个数字 然后先是第二个数字 后是第一个数字</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(regExp);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">// ["1221", "6886"]</span></span><br></pre></td></tr></table></figure></p><p><strong>通常情况下，后面内容和前面内容一致的情况下，就使用到子表达式、捕获、反向引用的概念了。</strong></p><p>上面的例子也可以使用<code>RegExp</code>对象的<code>exec</code>方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"12213456886"</span>;</span><br><span class="line"><span class="keyword">var</span> regExp = <span class="regexp">/(\d)(\d)\2\1/gi</span>;</span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"><span class="keyword">while</span>(result = regExp.exec(str))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">    <span class="comment">// 分别打印：</span></span><br><span class="line">    <span class="comment">// ["1221", "1", "2", index: 0, input: "12213456886", groups: undefined]</span></span><br><span class="line">    <span class="comment">// ["6886", "6", "8", index: 7, input: "12213456886", groups: undefined]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可见，exec方法需要循环打印，打印的结果也更加全面。如果要获取匹配到的内容可以获取下标为<code>0</code>的元素。</p><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><blockquote><p>限定符可以指定正则表达式的一个给定内容必须出现多少次才能满足匹配。</p></blockquote><p>如上面例子中<code>var regExp = /(\w+)\d{3}\1/gi;</code>其中<code>{3}</code>就是限定符，限制必须出现3次。更多的限定符可以看这里：</p><table><thead><tr><th>限定符</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>匹配0次或多次</td></tr><tr><td>+</td><td>匹配1次或多次</td></tr><tr><td>?</td><td>匹配0次或1次</td></tr><tr><td>{n}</td><td>匹配n次，n为数字</td></tr><tr><td>{n,}</td><td>匹配n次或多次（至少n次）</td></tr><tr><td>{n,m}</td><td>最少匹配n次，最多匹配m次</td></tr></tbody></table><p>由上可见，<code>*</code>相当于<code>{0,}</code>，<code>+</code>相当于<code>{1,}</code>，<code>?</code>相当于<code>{0,1}</code></p><p>我们再看一个例子:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"123456aaaaa5678"</span>;</span><br><span class="line"><span class="keyword">var</span> regExp = <span class="regexp">/\d&#123;3,5&#125;/gi</span>;</span><br><span class="line"><span class="keyword">var</span> result = str.match(regExp);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">// ["12345", "5678"]</span></span><br></pre></td></tr></table></figure></p><p>上式中<code>123</code>其实也是满足我们的正则表达式，但是JS中的正则匹配是<strong>贪婪匹配</strong>的，他会尽可能多的去匹配。</p><h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><blockquote><p>定位符可以将一个正则表达式固定在一行的开始或结束。也可以固定在单词的开始或结尾出。</p></blockquote><table><thead><tr><th>定位符</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>匹配开始的位置</td></tr><tr><td>$</td><td>匹配结束的位置</td></tr><tr><td>\b</td><td>匹配一个单词边界，前面是开始位置或者后面是结束位置，或者有空格</td></tr><tr><td>\B</td><td>匹配非单词边界</td></tr></tbody></table><p>如<code>var regExp = /^h/gi;</code>匹配以<code>h</code>开头的内容，<code>var regExp = /ld$/gi;</code>匹配以<code>ld</code>结尾的内容。</p><h3 id="常用匹配规则"><a href="#常用匹配规则" class="headerlink" title="常用匹配规则"></a>常用匹配规则</h3><table><thead><tr><th>匹配规则</th><th>含义</th></tr></thead><tbody><tr><td>[a-z]</td><td>标示a-z任意一个字符</td></tr><tr><td>[A-Z]</td><td>标示A-Z任意一个字符</td></tr><tr><td>[0-9]</td><td>标示0-9任意一个字符</td></tr><tr><td>[0-9A-Z]</td><td>标示0-9或者A-Z任意一个字符</td></tr><tr><td>[abcd]</td><td>标示a或者b或者c或者d</td></tr><tr><td>[^A-Z]</td><td>标示排除A-Z外的任意一个字符</td></tr><tr><td>\d</td><td>匹配一个数字，即[0-9]</td></tr><tr><td>\D</td><td>匹配一个非数字，即[^0-9]</td></tr><tr><td>\w</td><td>匹配单词字符，也就是数字字母下划线，即[0-9a-zA-Z_]</td></tr><tr><td>\W</td><td>匹配非单词字符，如！￥等</td></tr><tr><td>\s</td><td>匹配空白字符，空格、换行、制表符等</td></tr><tr><td>\S</td><td>匹配非空白字符</td></tr><tr><td>.</td><td>（看得清吗，一个点）匹配非换行外的任意字符</td></tr></tbody></table><p>那如果要匹配所有的任意字符怎么办？是用<code>[.\n]</code>就可以了。这里列出了一些常用的匹配规则，更多更详细的规则可以看<a href="https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin#7" target="_blank" rel="noopener">这里</a>。</p><h3 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h3><p>转义符<code>\</code>用来转义正在表达式子中有特殊意义的符号。就比如匹配一个左括号，那么就需要转义一下<code>var regExp = /\(/;</code>。需要转义的字符有：<code>(){}[]\/.*+?^$</code>等。</p><h3 id="预查"><a href="#预查" class="headerlink" title="预查"></a>预查</h3><ol><li><p>正向预查(?=)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"雷锋好人，雷锋大好人"</span>;</span><br><span class="line"><span class="keyword">var</span> regExp = <span class="regexp">/雷锋(?=好人)/gi</span>;<span class="comment">// 匹配后面是"好人"的雷锋 即第一个雷锋</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(regExp);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">// ["雷锋"]</span></span><br></pre></td></tr></table></figure></li><li><p>负向预查(?!)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"雷锋好人，雷锋大好人"</span>;</span><br><span class="line"><span class="keyword">var</span> regExp = <span class="regexp">/雷锋(?!好人)/gi</span>;<span class="comment">// 匹配后面不是"好人"的雷锋 即第二个雷锋</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(regExp);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">// ["雷锋"]</span></span><br></pre></td></tr></table></figure></li><li><p>结果不被捕获(?:)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 捕获字母或者数字后面跟着两个相同的数字的内容</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"a123b11"</span>;</span><br><span class="line"><span class="comment">// 因为我们第一个是字母或数字需要上一个括号表示整体 但是我们不希望被捕获 </span></span><br><span class="line"><span class="keyword">var</span> regExp = <span class="regexp">/(?:\d|\w)(\d)\1/gi</span>;</span><br><span class="line"><span class="keyword">var</span> result = str.match(regExp);</span><br><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">// ["b11"]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h3><p>将”我…我…..我..是.是….是一个个….个帅帅帅….帅帅帅哥”转化为”我是一个帅哥””。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"我...我.....我..是.是....是一个个....个帅帅帅....帅帅帅哥"</span>;</span><br><span class="line"><span class="keyword">var</span> regExp = <span class="regexp">/\./gi</span>;<span class="comment">// 因为.是特殊字符 需要转义</span></span><br><span class="line">str = str.replace(regExp,<span class="string">""</span>);<span class="comment">// 第一步去掉空格</span></span><br><span class="line">regExp = <span class="regexp">/(.)\1+/gi</span>;<span class="comment">// 这里的点表示任意非换行字符 然后匹配多个 一定要注意这里必需有g标示</span></span><br><span class="line">str.replace(regExp,<span class="string">"$1"</span>);<span class="comment">// $1类似于正则中的\1 </span></span><br><span class="line"><span class="built_in">console</span>.log(str);<span class="comment">// "我是一个帅哥"</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高性能网站建设指南》读书笔记</title>
      <link href="/2019/04/13/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE%E6%8C%87%E5%8D%97%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/04/13/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE%E6%8C%87%E5%8D%97%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>这本书是很久之前买的，今天回顾了一下，顺便记录一下笔记。<br>本书的副标题是“前端工程师技能精髓”可见这本书的牛逼之处。这本书也很薄，只有147页，但是每一章都是精髓。由于这本书每章提出了一个性能优化的方法，我们也就按照每张的具体内容给出吧。</p><p><img src="/2019/04/13/《高性能网站建设指南》读书笔记/1.jpg" alt="《高性能网站建设指南》"></p><hr><h3 id="减少HTTP请求"><a href="#减少HTTP请求" class="headerlink" title="减少HTTP请求"></a>减少HTTP请求</h3><blockquote><p><strong>性能黄金法则</strong>：只有10%~20%的最终用户响应时间花在了下载HTML文档上，其余的80%~90%时间花在了下载页面中的所有资源（图片、JS、CSS、音频等）上。</p></blockquote><p>优化方法：使用图片地图（map标签）、CSS Sprites（雪碧图）、内联图片（base64图片）、脚本和样式的合并等。</p><h3 id="使用CDN"><a href="#使用CDN" class="headerlink" title="使用CDN"></a>使用CDN</h3><blockquote><p><strong>CDN（Content Delivery Network 内容发布网络）</strong>是一组分布在多个不同地理位置的Web服务器，用于更加有效地向用户发布内容。</p></blockquote><p>优点：</p><ol><li>可以选择网络阶跃数量最小的服务器，或者具有最短响应时间的服务器。</li><li>可以进行缓存。</li></ol><p>缺点：</p><ol><li>响应时间可能会受到其他网站的影响。</li><li>无法直接控制服务器所带来的特殊服务，如修改某个HTTP的响应头信息。</li><li>如果CDN服务的性能下降，你的工作质量也会随之下降。</li></ol><h3 id="添加Expires头信息"><a href="#添加Expires头信息" class="headerlink" title="添加Expires头信息"></a>添加Expires头信息</h3><p>Expires响应头：<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Expires</span>: Sun, 25 Mar 2029 09:16:01 GMT</span><br></pre></td></tr></table></figure></p><p>如果某个资源使用这个响应头那么该资源会在这个时间内使用缓存。<br>HTTP1.1引入了<code>Cache-Control</code>头来克服<code>Expires</code>的限制，<code>Cache-Control</code>使用<code>max-age</code>指令指定资源被缓存多久。它以秒为单位定义了一个时间，如果资源从上次请求的秒数到本次请求小于<code>max-age</code>，浏览器就使用缓存中的资源，就可以避免额外的HTTP请求。<code>Cache-Control</code>的优先级高于<code>Expires</code>，如果两者都有的时候对于支持HTTP1.1的浏览器使用的是<code>Cache-Control</code>，不支持的使用<code>Expires</code>。</p><p>Cache-Control响应头：<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Cache-Control</span>: max-age=31526000</span><br></pre></td></tr></table></figure></p><p>对于HTML等经常变动的资源，不应该使用<strong>长久</strong>的Expires头信息。为了确保用户能获取资源的最新版本，需要在所有HTML页面中修改资源的文件名（如加版本号或者hash值）。</p><h3 id="压缩资源"><a href="#压缩资源" class="headerlink" title="压缩资源"></a>压缩资源</h3><p>从HTTP1.1开始，web客户端可以通过HTTP请求中的<code>Accept-Encoding</code>头来表示对压缩的支持：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Accept-Encoding</span>: gzip,deflate</span><br></pre></td></tr></table></figure><p>web服务器通过响应中的<code>Content-Encoding</code>来通知web客户端，使用了压缩:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Encoding</span>: gzip</span><br></pre></td></tr></table></figure><p>通常情况下图片和PDF不应该压缩，因为他们已经压缩过了。一般大于1KB或2KB的文件进行压缩。<code>mod_gzip_minimum_file_size</code>指令（Apache服务器）控制希望压缩文件的最小大小，默认是500B。</p><h3 id="将CSS放在顶部"><a href="#将CSS放在顶部" class="headerlink" title="将CSS放在顶部"></a>将CSS放在顶部</h3><p>也就是在head标签中使用link标签引入CSS。如果放在html文档的底部的时候，加载CSS会导致DOM回流（重排），浪费不必要的计算。</p><h3 id="将JS放在底部"><a href="#将JS放在底部" class="headerlink" title="将JS放在底部"></a>将JS放在底部</h3><p>也就是把JS放在body标签内部的最下面来引入。<br>HTTP1.1建议浏览器从每个主机名并行地下载2个资源（不同浏览器的实现不同，可能不是2个），但是JS却不一样，JS下载时只有一个，而往往JS也是比较大的所以会阻塞其他资源的下载。将JS放在底部将不会阻塞后面内容的呈现，也不会阻塞后面其他资源的下载，还可以防止DOM操作报错。</p><h3 id="避免CSS表达式"><a href="#避免CSS表达式" class="headerlink" title="避免CSS表达式"></a>避免CSS表达式</h3><p>现在CSS表达式真的很少使用了，估计大多数人还不知道这玩意，谷歌浏览器都不支持：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">expression</span>((<span class="selector-tag">new</span> <span class="selector-tag">Date</span>())<span class="selector-class">.getHours</span>() % 2 ? "<span class="selector-tag">red</span>" : "<span class="selector-tag">blue</span>")</span><br></pre></td></tr></table></figure></p><h3 id="使用外部JS和CSS"><a href="#使用外部JS和CSS" class="headerlink" title="使用外部JS和CSS"></a>使用外部JS和CSS</h3><p>单纯来讲，使用内联引入资源比外部引入快30%~50%，主要是因为外部资源需要承担更多的HTTP请求。但是有缓存的时候就差不多了，但是放在外部还可以实现资源的复用。</p><h3 id="减少DNS查找"><a href="#减少DNS查找" class="headerlink" title="减少DNS查找"></a>减少DNS查找</h3><p>DNS将会把域名映射到ip上。减少DNS查找的意思就是浏览器和web服务器愉快的通讯着，并保持TCP连接打开的状态，就没有理由进行DNS查找。服务器可以设置TTL（Time-to-live）值告诉客户端DNS记录可以缓存多久。当然也可以设置<code>Keep-alive</code>头信息:<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Connection</span>: Keep-alive</span><br></pre></td></tr></table></figure></p><h3 id="精简JS和CSS"><a href="#精简JS和CSS" class="headerlink" title="精简JS和CSS"></a>精简JS和CSS</h3><p>其实就是把JS和CSS代码压缩。所谓压缩就是去掉空格、换行符和制表符并进行一些优化（比如CSS使用0代替0px等）。</p><h3 id="避免重定向"><a href="#避免重定向" class="headerlink" title="避免重定向"></a>避免重定向</h3><p>要避免响应码为301或者302这样的请求，会导致页面变慢。</p><h3 id="删除重复脚本"><a href="#删除重复脚本" class="headerlink" title="删除重复脚本"></a>删除重复脚本</h3><p>这个就不用说了，提高代码的利用率。</p><h3 id="配置或删除ETag"><a href="#配置或删除ETag" class="headerlink" title="配置或删除ETag"></a>配置或删除ETag</h3><p>ETag（Entity Tag，实体标签）是web服务器和浏览器用于确定缓存资源的一种有效机制。它是唯一表示了一个资源的一个特定的版本的字符串。唯一的格式约束是该字符串必须用引号引用起来。<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ETag</span>: "10c24bc-4ab-457e1c1f"</span><br></pre></td></tr></table></figure></p><p>通常应用处于一个机子的时候那么建议配置ETag，但是如果应用处于一个集群的时候，建议不使用ETag。因为浏览器如果从集群的一台机子中获取了资源，然后再次请求资源的时候如果是另一台的时候，那么两个机子生成的ETag往往是不一样的，这样就会使得缓存失效。</p><h3 id="使Ajax可缓存"><a href="#使Ajax可缓存" class="headerlink" title="使Ajax可缓存"></a>使Ajax可缓存</h3><p>将Ajax缓存了可以提高性能这是肯定的，这也正是一些库默认使用了缓存，如果为了提高请求的准确性，个人觉的这条规则可以忽略。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2019/04/10/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/04/10/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>快速排序是最效率极高的一种排序方法，正因为它效率高，所以也受到了面试官的青睐，同样成了程序员必会的内容。O(∩_∩)O哈哈~</p><p>它的思想是选一个基准，然后把小于基准的值放在左边，大于基准的值放在右边（假设从小到大排序）。然后分别递归左边和右边的部分，当所有的递归完毕后就是已经排好序的结果了。</p><p>市面上流传最广的快速排序是阮一峰老师博客中写的，我们这笔直接拿过来记录一下，原文在<a href="http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html" target="_blank" rel="noopener">这里</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> quickSort = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">　　<span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> arr; &#125;</span><br><span class="line">　　<span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">　　<span class="keyword">var</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">　　<span class="keyword">var</span> left = [];</span><br><span class="line">　　<span class="keyword">var</span> right = [];</span><br><span class="line">　　<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">　　　　<span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">　　　　　　left.push(arr[i]);</span><br><span class="line">　　　　&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">　　　　　　right.push(arr[i]);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>阮一峰老师的快速排序选择的是最中间的元素作为基准，左边和右边的都定义了一个新的数组来接收，最后把数组连接起来。这个快速排序的优点是思路很明确，缺点是因为定义了新的数组所以空间复杂度比较高。那如何降低空间复杂度呢？其实只要操作元数组就可以了，这里给出另一种快速排序的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr,low,high</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 用i和j记录下初始的最低位和最高位 temp记录下基准 这里假设是起始位置</span></span><br><span class="line">    <span class="keyword">var</span> i = low,j = high,temp = arr[i];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;<span class="comment">// 如果低位的小于高位的时候那么对立面的值进行交换</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; temp &lt;= arr[j]) &#123;<span class="comment">// 扫描右边 如果右边的的有比temp小的需要交换</span></span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断i &lt; j为了避免不需要交换的情况 下同</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;<span class="comment">// 如果右边的有交换的情况则放在左边的位置</span></span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt; temp) &#123;<span class="comment">// 扫描左边 如果左边的的有比temp大的需要交换</span></span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) &#123;<span class="comment">// 如果左边的有交换的情况则放在有边的位置</span></span><br><span class="line">            arr[j] = arr[i];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 上面循环结束的时候i位置左边的都比temp小 右边的都比temp大 这只temp给当前位置</span></span><br><span class="line">    arr[i] = temp;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; i) &#123;</span><br><span class="line">        sort(arr,low,i - <span class="number">1</span>);<span class="comment">// 递归遍历左侧</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j &lt; high) &#123;</span><br><span class="line">        sort(arr,j + <span class="number">1</span>,high);<span class="comment">// 递归遍历右侧</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>)</span>&#123;<span class="comment">// 为了给sort传初始值 而封装的一层</span></span><br><span class="line">    <span class="keyword">return</span> sort(arr,<span class="number">0</span>,arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">9</span>];</span><br><span class="line">quickSort(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><p>这个快速的时间复杂度要比阮一峰老师的稍微低一点，不过比阮一峰老师的快速排序稍微难理解一点。其实我们在<a href="/2019/03/10/《JavaScript数据结构与算法》读书笔记/#more">《JavaScript数据结构与算法》读书笔记</a>一文中也有快速排序的记录，那个快速排序与这个有一点点的不同，那个排序的基准选择的中间值，然后每次循环直接交换左侧的和右侧的元素，整体思路相差无几，感兴趣的可以在那篇文章中搜一下快速排序。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/2019/04/10/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/04/10/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>冒泡排序是最简单的一种排序方法，正因为它很简单，所以受到了面试官的青睐，成了程序员必会的内容。</p><p>它的思想是通过两次循环，如果前一个比后一个小的时候那么两者互换位置（假设是从小到大排序）。就这样大的数就会像水中的气泡一样从前面逐渐走到后面，这也正式名字的由来。</p><p>这里给出冒泡排序的实现，里面使用了flag进行标记，如果已经排好序的数组那么就不需要多次遍历了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>; <span class="comment">// 标记某次循环是否执行完毕</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span> &amp;&amp; flag; i++)&#123;</span><br><span class="line">        flag = <span class="literal">false</span>; <span class="comment">// 如果本次循环没有交换 说明已经已经是排好序的 不需要再遍历了</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">            <span class="comment">// 如果前面的比后面的大 那么交换元素</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                flag = <span class="literal">true</span>;<span class="comment">// 有交换的时候 说明很可能还没有排好序</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">8</span>,<span class="number">3</span>,<span class="number">10</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">9</span>];</span><br><span class="line">bubbleSort(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 冒泡排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖与节流</title>
      <link href="/2019/04/09/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/"/>
      <url>/2019/04/09/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><blockquote><p>防抖：多次触发某个函数，以最后一次函数的执行为准。</p></blockquote><p>也就是说给定了一个时间n，如果在n毫秒内重复执行某个函数那么将不会执行，如果n毫秒内不再触发这个函数，那么将执行该函数。表现的效果是<strong>如果一直触发函数，那么只有最后一次才会执行</strong>。</p><p>简单实现:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">        clearTimeout(timeout)</span><br><span class="line">        timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            func.apply(context, args)</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单使用:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = debounce(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"函数执行了"</span>);</span><br><span class="line">&#125;,<span class="number">500</span>);</span><br><span class="line">fn();<span class="comment">// 第一次 并不会执行</span></span><br><span class="line">fn();<span class="comment">// 第二次 并不会执行</span></span><br><span class="line">fn();<span class="comment">// 第三次 由于500毫秒后没有再次执行 所以会在500毫秒后打印"函数执行了"</span></span><br></pre></td></tr></table></figure></p><p>防抖适用场景：多次重复的操作以最后一个为准的。就比如列表页有一个查询按钮，往往我们多次查询的结果都是以最后一次的结果为准，这里就可以用防抖。</p><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><blockquote><p>节流：多次触发某个函数，一段时间内只执行一次。</p></blockquote><p>也就是说给定了一个时间n，如果在n毫秒内该函数多次调用那么会忽略这些调用，等n毫秒后会执行该函数。表现的效果是<strong>如果一直触发函数，那么每隔n毫秒就会执行一次函数</strong>。</p><p>简单实现:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">            timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">                func.apply(context, args)</span><br><span class="line">            &#125;, wait)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>节流适用场景：将密集型操作，转换为相对松散型的操作,以减小计算量。就比如<code>onmousemove</code>和<code>onresize</code>事件的处理等。</p><p><code>lodash</code>库已经对<a href="https://www.lodashjs.com/docs/4.17.5.html#debounce" target="_blank" rel="noopener">防抖</a>和<a href="https://www.lodashjs.com/docs/4.17.5.html#throttle" target="_blank" rel="noopener">节流</a>做了实现，我们可以直接使用。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防抖 </tag>
            
            <tag> 节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript易错点（长期更新）</title>
      <link href="/2019/04/08/JavaScript%E6%98%93%E9%94%99%E7%82%B9%EF%BC%88%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2019/04/08/JavaScript%E6%98%93%E9%94%99%E7%82%B9%EF%BC%88%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="下面输出的是什么"><a href="#下面输出的是什么" class="headerlink" title="下面输出的是什么"></a>下面输出的是什么</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">F.prototype = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> F();</span><br><span class="line"><span class="built_in">console</span>.log(F.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(o1.__proto__);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(o2.__proto__);</span><br></pre></td></tr></table></figure><p>答案：</p><blockquote><p>null<br>object<br>undefined</p></blockquote><p>点评:<br><strong><code>new</code>的时候，如果构造函数的原型是是object类型那么浏览器会添加<code>o1.__proto__ = F.prototype</code>否则会添加<code>o1.__proto__ = Object.prototype</code></strong></p><h3 id="下面输出的是什么-1"><a href="#下面输出的是什么-1" class="headerlink" title="下面输出的是什么"></a>下面输出的是什么</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">this</span> ? <span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;&#125; :<span class="class"><span class="keyword">class</span> <span class="title">c</span></span>&#123;&#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a,<span class="keyword">typeof</span> b, <span class="keyword">typeof</span> c);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>答案：</p><blockquote><p>function undefined undefined</p></blockquote><p>点评:<br><strong>class和function处于等式右边的时候不会向外暴露类名和函数名</strong></p><h3 id="下面输出的是什么-2"><a href="#下面输出的是什么-2" class="headerlink" title="下面输出的是什么"></a>下面输出的是什么</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="string">"john"</span>.split(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.reverse();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="string">"jones"</span>.split(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">arr2.push(arr3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"array 1: length="</span> + arr1.length + <span class="string">" last="</span> + arr1.slice(<span class="number">-1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"array 2: length="</span> + arr2.length + <span class="string">" last="</span> + arr2.slice(<span class="number">-1</span>));</span><br></pre></td></tr></table></figure><p>答案：</p><blockquote><p>array 1: length=5 last=j,o,n,e,s<br>array 2: length=5 last=j,o,n,e,s</p></blockquote><p>点评:<br><strong>reverse会改变原数组，所以arr1和arr2其实是一个数组</strong></p><h3 id="下面输出的是什么-3"><a href="#下面输出的是什么-3" class="headerlink" title="下面输出的是什么"></a>下面输出的是什么</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;, b = &#123;<span class="attr">key</span>:<span class="string">'b'</span>&#125;,c = &#123;<span class="attr">key</span>:<span class="string">'c'</span>&#125;;</span><br><span class="line"></span><br><span class="line">a[b] = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">a[c] = <span class="number">456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a[b]);</span><br></pre></td></tr></table></figure><p>答案：</p><blockquote><p>456</p></blockquote><p>点评:<br><strong><code>[]</code>访问属性的时候对于对象会调用<code>toString</code>方法，b和c的<code>toString</code>的结果都是<code>[object Object]</code></strong></p><h3 id="下面输出的是什么-4"><a href="#下面输出的是什么-4" class="headerlink" title="下面输出的是什么"></a>下面输出的是什么</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">n</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a.x = a = &#123;<span class="attr">n</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a.x);</span><br><span class="line"><span class="built_in">console</span>.log(b.x);</span><br></pre></td></tr></table></figure><p>答案：</p><blockquote><p>undefined<br>{n: 2}</p></blockquote><p>点评:<br><strong>执行第三行那个等式的时候，a.x先进入栈，此时a和b应该是一样的。之后后面那个等式进栈并执行，后面的结果把a改了，也就是a变成{n:2}了，返回的结果也是{n:2}。此时前面的a.x的地址就是b.x的地址，所以b.x = {n:2}。</strong></p><h3 id="下面输出的是什么-5"><a href="#下面输出的是什么-5" class="headerlink" title="下面输出的是什么"></a>下面输出的是什么</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">undefined</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">null</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"012"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"abc"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(&#123;<span class="attr">valueOf</span>:<span class="function"><span class="params">()</span>=&gt;</span><span class="number">123</span>&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(&#123;<span class="attr">toString</span>:<span class="function"><span class="params">()</span>=&gt;</span><span class="number">456</span>&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(&#123;<span class="attr">valueOf</span>:<span class="function"><span class="params">()</span>=&gt;</span><span class="number">123</span>,<span class="attr">toString</span>:<span class="function"><span class="params">()</span>=&gt;</span><span class="number">456</span>&#125;));</span><br></pre></td></tr></table></figure><p>答案：</p><blockquote><p>0<br>NaN<br>0<br>12<br>NaN<br>123<br>456<br>123</p></blockquote><p>点评:<br><strong>Number转换的时候不传值和传入null的时候是0；如果是undefined的时候然后的是NaN；字符串会忽略前置的0（而不是8进制）；不以数字开头的是NaN；对象会调用valueOf()方法，如果结果用Number转化后还是NaN，那么就会用toString()的结果再转换一次。</strong></p><h3 id="下面输出的是什么-6"><a href="#下面输出的是什么-6" class="headerlink" title="下面输出的是什么"></a>下面输出的是什么</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"0xA"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"0xA"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"012"</span>));</span><br></pre></td></tr></table></figure><p>答案：</p><blockquote><p>0<br>10<br>12</p></blockquote><p>点评:<br><strong>parseFloat对于16进制的都换转化为0，parseInt对0开头的都会忽略（ES3的时候是按照8进制转换的）。</strong></p><h3 id="下面输出的是什么-7"><a href="#下面输出的是什么-7" class="headerlink" title="下面输出的是什么"></a>下面输出的是什么</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.POSITIVE_INFINITY + <span class="built_in">Number</span>.POSITIVE_INFINITY);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.POSITIVE_INFINITY + <span class="built_in">Number</span>.NEGATIVE_INFINITY);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.NEGATIVE_INFINITY + <span class="built_in">Number</span>.NEGATIVE_INFINITY);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + <span class="literal">NaN</span>);</span><br></pre></td></tr></table></figure><p>答案：</p><blockquote><p>Infinity<br>NaN<br>-Infinity<br>NaN</p></blockquote><p>点评:<br><strong>正无穷加正无穷等于正无穷，负无穷加负无穷等于负无穷，正无穷加负无穷不是个数，不是个数加其他数任然不是个数。</strong></p><h3 id="下面输出的是什么-8"><a href="#下面输出的是什么-8" class="headerlink" title="下面输出的是什么"></a>下面输出的是什么</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> &lt; <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> = <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> &gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>答案：</p><blockquote><p>false<br>false<br>false</p></blockquote><p>点评:<br><strong>NaN和任何数字比较都是false。</strong></p><h3 id="下面输出的是什么-9"><a href="#下面输出的是什么-9" class="headerlink" title="下面输出的是什么"></a>下面输出的是什么</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = (a = <span class="number">1</span>,b = <span class="number">2</span>,c = <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure><p>答案：</p><blockquote><p>3</p></blockquote><p>点评:<br><strong>逗号表达式返回最后一个。</strong></p><h3 id="下面输出的是什么-10"><a href="#下面输出的是什么-10" class="headerlink" title="下面输出的是什么"></a>下面输出的是什么</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>);</span><br></pre></td></tr></table></figure><p>答案：</p><blockquote><p>false</p></blockquote><p>点评:<br><strong>123的数据类型是number而不是object，所有不是对象的数据类型使用instanceof都返回false。</strong></p><h3 id="下面输出的是什么-11"><a href="#下面输出的是什么-11" class="headerlink" title="下面输出的是什么"></a>下面输出的是什么</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>答案：</p><blockquote><p>[3, 2, 1]<br>[undefined, undefined, undefined]</p></blockquote><p>点评:<br><strong>new Array的时候多个参数的时候会认为是数组的内容，一个参数的时候会认为是数组的长度。</strong></p><h3 id="下面输出的是什么-12"><a href="#下面输出的是什么-12" class="headerlink" title="下面输出的是什么"></a>下面输出的是什么</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F1</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F2</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;<span class="attr">name</span>:<span class="string">"不告诉你"</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F3</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> F1());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> F2());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> F3());</span><br></pre></td></tr></table></figure><p>答案：</p><blockquote><p>F1 {}<br>{name: “不告诉你”}<br>F3 {}</p></blockquote><p>点评:<br><strong>new的时候如果构造方法返回的是一个对象，那么new的结果就是这个对象，否则创建一个对象，新创建的对象的原型指向构造方法的原型。</strong></p><h3 id="下面输出的是什么-13"><a href="#下面输出的是什么-13" class="headerlink" title="下面输出的是什么"></a>下面输出的是什么</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"我就要抛出错误"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn());</span><br></pre></td></tr></table></figure><p>答案：</p><blockquote><p>2</p></blockquote><p>点评:<br><strong>finally一定会执行，即使有return也阻止不了。</strong></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 易错点 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3卡片光照效果</title>
      <link href="/2019/03/25/CSS3%E5%8D%A1%E7%89%87%E5%85%89%E7%85%A7%E6%95%88%E6%9E%9C/"/>
      <url>/2019/03/25/CSS3%E5%8D%A1%E7%89%87%E5%85%89%E7%85%A7%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<p>我们今天要使用CSS3实现下面这样的卡片光照效果：</p><p><img src="/2019/03/25/CSS3卡片光照效果/1.gif" alt="卡片光照"></p><hr><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>首先给出HTML结构：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hover-light"</span>&gt;</span>卡片光照效果<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后给出初始的CSS结构:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hover-light</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">180px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#70c3ff</span>;</span><br><span class="line">    <span class="attribute">color</span>:white;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时效果大概是这个样子:<br><img src="/2019/03/25/CSS3卡片光照效果/2.png" alt="初始样式"></p><p>要实现卡片光照的效果，我们需要添加子元素，此时使用伪元素<code>::after</code>是最好的选择。我们需要给<code>::after</code>添加一个斜着的渐变来模拟光照效果，这里我们使用从左到右的渐变，然后再给一个倾斜的形变就可以模拟了。最好再给一个简单的悬浮动画就完事了。下面直接给出CSS的其他代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hover-light</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">180px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#70c3ff</span>;</span><br><span class="line">    <span class="attribute">color</span>:white;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*子绝父相对*/</span></span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="comment">/*子溢出父元素隐藏 这样hover子元素的时候 不算hover父元素*/</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hover-light</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="comment">/*首先隐藏子元素*/</span></span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*设置和父元素一样大*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="comment">/*添加从左往右的渐变 即模仿光照效果*/</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(0deg,hsla(0,0%,100%,0),<span class="built_in">hsla</span>(0,0%,100%,.5),<span class="built_in">hsla</span>(0,0%,100%,0));</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right,hsla(0,0%,100%,0),<span class="built_in">hsla</span>(0,0%,100%,.5),<span class="built_in">hsla</span>(0,0%,100%,0));</span><br><span class="line">    <span class="comment">/*光照是斜着的更好看*/</span></span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">skewx</span>(-25deg);</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">skewx</span>(-25deg);</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">skewx</span>(-25deg);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">skewx</span>(-25deg);</span><br><span class="line">    <span class="comment">/*添加动画效果*/</span></span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hover-light</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="comment">/*鼠标放在父元素上 移动子元素*/</span></span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这样就实现了上面的卡片光照效果!</p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>上面光照效果已经完成，其实CSS3的形变投影等功能组合起来可以实现更好的效果，我们现在添加样式，给父元素也添加一个动画的效果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hover-light</span>&#123;</span><br><span class="line">    <span class="comment">/*... 其他代码相上*/</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hover-light</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="comment">/*... 其他代码相上*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*添加动画效果 直接继承父类的效果*/</span></span><br><span class="line">    <span class="attribute">transition</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hover-light</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="comment">/*向上移动6个像素*/</span></span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">translateY</span>(-6px);</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(-6px);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-6px);</span><br><span class="line">    <span class="comment">/*添加一个淡一点的阴影*/</span></span><br><span class="line">    <span class="attribute">-moz-box-shadow</span>: <span class="number">0</span> <span class="number">26px</span> <span class="number">40px</span> -<span class="number">24px</span> <span class="built_in">rgba</span>(0,36,100,.5);</span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">26px</span> <span class="number">40px</span> -<span class="number">24px</span> <span class="built_in">rgba</span>(0,36,100,.5);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">26px</span> <span class="number">40px</span> -<span class="number">24px</span> <span class="built_in">rgba</span>(0,36,100,.5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的效果：</p><p><img src="/2019/03/25/CSS3卡片光照效果/3.gif" alt="添加阴影动画"></p><p>完整HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSSS3卡片光照效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        body&#123;</span></span><br><span class="line"><span class="undefined">            padding: 20px;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.hover-light</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 250px;</span></span><br><span class="line"><span class="undefined">            height: 180px;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#70c3ff</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span><span class="selector-pseudo">:white</span>;</span></span><br><span class="line"><span class="undefined">            font-size: 2rem;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">            border-radius: 8px;</span></span><br><span class="line"><span class="css">            <span class="comment">/*子绝父相对*/</span></span></span><br><span class="line"><span class="undefined">            position: relative;</span></span><br><span class="line"><span class="css">            <span class="comment">/*子溢出父元素隐藏 这样hover子元素的时候 不算hover父元素*/</span></span></span><br><span class="line"><span class="undefined">            overflow: hidden;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.3s</span> <span class="selector-tag">ease</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.hover-light</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="undefined">            content: "";</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="css">            <span class="comment">/*首先隐藏子元素*/</span></span></span><br><span class="line"><span class="undefined">            left: -100%;</span></span><br><span class="line"><span class="undefined">            top: 0;</span></span><br><span class="line"><span class="css">            <span class="comment">/*设置和父元素一样大*/</span></span></span><br><span class="line"><span class="undefined">            width: 100%;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="css">            <span class="comment">/*添加从左往右的渐变 即模仿光照效果*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-image</span>: <span class="selector-tag">-webkit-linear-gradient</span>(0<span class="selector-tag">deg</span>,<span class="selector-tag">hsla</span>(0,0%,100%,0),<span class="selector-tag">hsla</span>(0,0%,100%,<span class="selector-class">.5</span>),<span class="selector-tag">hsla</span>(0,0%,100%,0));</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>,<span class="selector-tag">hsla</span>(0,0%,100%,0),<span class="selector-tag">hsla</span>(0,0%,100%,<span class="selector-class">.5</span>),<span class="selector-tag">hsla</span>(0,0%,100%,0));</span></span><br><span class="line"><span class="css">            <span class="comment">/*光照是斜着的更好看*/</span></span></span><br><span class="line"><span class="undefined">            -o-transform: skewx(-25deg);</span></span><br><span class="line"><span class="undefined">            -moz-transform: skewx(-25deg);</span></span><br><span class="line"><span class="undefined">            -webkit-transform: skewx(-25deg);</span></span><br><span class="line"><span class="undefined">            transform: skewx(-25deg);</span></span><br><span class="line"><span class="css">            <span class="comment">/*添加动画效果 直接继承父类的效果*/</span></span></span><br><span class="line"><span class="undefined">            transition: inherit;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.hover-light</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*鼠标放在父元素上 移动子元素*/</span></span></span><br><span class="line"><span class="undefined">            left: 100%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.hover-light</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*向上移动6个像素*/</span></span></span><br><span class="line"><span class="undefined">            -moz-transform: translateY(-6px);</span></span><br><span class="line"><span class="undefined">            -webkit-transform: translateY(-6px);</span></span><br><span class="line"><span class="undefined">            transform: translateY(-6px);</span></span><br><span class="line"><span class="css">            <span class="comment">/*添加一个淡一点的阴影*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">-moz-box-shadow</span>: 0 26<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> <span class="selector-tag">-24px</span> <span class="selector-tag">rgba</span>(0,36,100,<span class="selector-class">.5</span>);</span></span><br><span class="line"><span class="css">            <span class="selector-tag">-webkit-box-shadow</span>: 0 26<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> <span class="selector-tag">-24px</span> <span class="selector-tag">rgba</span>(0,36,100,<span class="selector-class">.5</span>);</span></span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 0 26<span class="selector-tag">px</span> 40<span class="selector-tag">px</span> <span class="selector-tag">-24px</span> <span class="selector-tag">rgba</span>(0,36,100,<span class="selector-class">.5</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hover-light"</span>&gt;</span>卡片光照效果<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS效果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3实现彩色炫酷文字</title>
      <link href="/2019/03/19/CSS3%E5%AE%9E%E7%8E%B0%E5%BD%A9%E8%89%B2%E7%82%AB%E9%85%B7%E6%96%87%E5%AD%97/"/>
      <url>/2019/03/19/CSS3%E5%AE%9E%E7%8E%B0%E5%BD%A9%E8%89%B2%E7%82%AB%E9%85%B7%E6%96%87%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>我们今天要使用CSS3实现下面这样的酷酷的效果：</p><p><img src="/2019/03/19/CSS3实现彩色炫酷文字/1.gif" alt="彩色炫酷文字"></p><hr><p>要实现这样的效果只需要三步：</p><ol><li>设置渐变背景色；</li><li>按照文字拆分背景；</li><li>去掉文字本身的颜色；</li><li>设置动画。</li></ol><p>我们也按照这个步骤一步一步的写出样式，首先给出HTML结构：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"color-text"</span>&gt;</span>这里是彩色的文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后给出初始的CSS结构:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.color-text</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时效果大概是这个样子:<br><img src="/2019/03/19/CSS3实现彩色炫酷文字/2.png" alt="初始样式"></p><h2 id="一、设置渐变背景色"><a href="#一、设置渐变背景色" class="headerlink" title="一、设置渐变背景色"></a>一、设置渐变背景色</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.color-text</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(left, blue,</span><br><span class="line">        #66ffff 10%, #cc00ff 20%,</span><br><span class="line">        #CC00CC 30%, #CCCCFF 40%,</span><br><span class="line">        #00FFFF 50%, #CCCCFF 60%,</span><br><span class="line">        #CC00CC 70%, #CC00FF 80%,</span><br><span class="line">        #66FFFF 90%, blue 100%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意一点是渐变背景色应该是按照50%对称的不然就会出现断层。这个时候的效果大概是这个样子了：<br><img src="/2019/03/19/CSS3实现彩色炫酷文字/3.png" alt="设置渐变色"></p><h2 id="二、按照文字拆分背景"><a href="#二、按照文字拆分背景" class="headerlink" title="二、按照文字拆分背景"></a>二、按照文字拆分背景</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.color-text</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(left, blue,</span><br><span class="line">        #66ffff 10%, #cc00ff 20%,</span><br><span class="line">        #CC00CC 30%, #CCCCFF 40%,</span><br><span class="line">        #00FFFF 50%, #CCCCFF 60%,</span><br><span class="line">        #CC00CC 70%, #CC00FF 80%,</span><br><span class="line">        #66FFFF 90%, blue 100%);</span><br><span class="line">    <span class="attribute">-webkit-background-clip</span>: text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的效果是：</p><p><img src="/2019/03/19/CSS3实现彩色炫酷文字/4.png" alt="按照文字拆分背景"></p><p>咦？貌似没什么效果？其实仔细看你可以看到文字已经不是默认的那种黑色了，其实已经生效了，只是字体本身的颜色把背景色覆盖了。</p><h2 id="三、去掉文字本身的颜色"><a href="#三、去掉文字本身的颜色" class="headerlink" title="三、去掉文字本身的颜色"></a>三、去掉文字本身的颜色</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.color-text</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(left, blue,</span><br><span class="line">        #66ffff 10%, #cc00ff 20%,</span><br><span class="line">        #CC00CC 30%, #CCCCFF 40%,</span><br><span class="line">        #00FFFF 50%, #CCCCFF 60%,</span><br><span class="line">        #CC00CC 70%, #CC00FF 80%,</span><br><span class="line">        #66FFFF 90%, blue 100%);</span><br><span class="line">    <span class="attribute">-webkit-background-clip</span>: text;</span><br><span class="line">    <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去掉字体本身的颜色CSS3还有一种方法叫<code>text-fill-color</code>他可以设置文字的填充色优先级比<code>color</code>高，我们也可以使用它来代替<code>color: transparent;</code>：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-text-fill-color</span>: <span class="selector-tag">transparent</span>;</span><br></pre></td></tr></table></figure></p><p>此时的效果是:<br><img src="/2019/03/19/CSS3实现彩色炫酷文字/5.png" alt="去掉文字本身的颜色"></p><h2 id="四、设置动画"><a href="#四、设置动画" class="headerlink" title="四、设置动画"></a>四、设置动画</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.color-text</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="comment">/* 设置背景透明色 */</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(left, blue,</span><br><span class="line">        #66ffff 10%, #cc00ff 20%,</span><br><span class="line">        #CC00CC 30%, #CCCCFF 40%,</span><br><span class="line">        #00FFFF 50%, #CCCCFF 60%,</span><br><span class="line">        #CC00CC 70%, #CC00FF 80%,</span><br><span class="line">        #66FFFF 90%, blue 100%);</span><br><span class="line">    <span class="comment">/* 改变background-size是为了让动画动起来 */</span></span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">200%</span> <span class="number">100%</span>;</span><br><span class="line">    <span class="comment">/* 按照文字拆分背景 */</span></span><br><span class="line">    <span class="attribute">-webkit-background-clip</span>: text;</span><br><span class="line">    <span class="comment">/* 将字体设置成透明色 */</span></span><br><span class="line">    <span class="attribute">-webkit-text-fill-color</span>: transparent;</span><br><span class="line">    <span class="comment">/* 启用动画 */</span></span><br><span class="line">    <span class="attribute">animation</span>: masked-animation <span class="number">4s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> masked-animation &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">background-position</span>: -<span class="number">100%</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这样设置我们就大功告成了!</p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>上面使用到了<code>text-fill-color</code>，我们可以在这里看看它的<a href="https://caniuse.com/#search=text-fill-color" target="_blank" rel="noopener">兼容性</a>。它的一大用途就是上面这样设置炫酷的彩色文字，还有一个用途就是设置镂空文字，如下。<br>HTML：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hollow-out-text"</span>&gt;</span>镂空文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>CSS：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hollow-out-text</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="comment">/*设置背景透明*/</span></span><br><span class="line">    <span class="attribute">-webkit-text-fill-color</span>: transparent;</span><br><span class="line">    <span class="comment">/*设置镂空线条*/</span></span><br><span class="line">    <span class="attribute">-webkit-text-stroke</span>: <span class="number">1px</span> <span class="number">#cc00ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最终效果：</p><p><img src="/2019/03/19/CSS3实现彩色炫酷文字/6.png" alt="镂空文字"></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS效果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何判断一个对象是不是数组</title>
      <link href="/2019/03/17/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E4%B8%8D%E6%98%AF%E6%95%B0%E7%BB%84/"/>
      <url>/2019/03/17/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E4%B8%8D%E6%98%AF%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<ol><li><p>使用<code>instanceof</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果返回true那么说明就是数组</span></span><br><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Object.prototype.toString</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由于数组重写了toString方法，我们可以使用Object.prototype.toString方法来判断对象是不是数组</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(value) === <span class="string">"[object Array]"</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>value.constructor.name</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测构造函数的名称是不是Array</span></span><br><span class="line"><span class="keyword">if</span> (value.constructor.name === <span class="string">"Array"</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用ES5的<code>Array.isArray()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5标准 简单 好用 低版本浏览器不支持</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value))&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 判断数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JavaScript函数式编程指南》读书笔记</title>
      <link href="/2019/03/10/%E3%80%8AJavaScript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/10/%E3%80%8AJavaScript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>老规矩，这篇文章记录书中的重点部分，外加自己的见解，不会对全书进行复述，但记录的绝对是最重要的部分，想要了解跟多内容请看原版图书。</p><p><img src="/2019/03/10/《JavaScript函数式编程指南》读书笔记/1.jpg" alt="《JavaScript函数式编程指南》"></p><hr><p>函数式编程的目标：使用函数来抽象作用在数据之上的控制流与操作，从而在系统中消除副作用并减少对状态的改变。</p><p>纯函数所具有的性质：</p><blockquote><p>仅取决于提供的输入，而不依赖于任何在函数求值期间或调用间隔时可能变化的隐藏状态和外部状态。<br>不会造成或超出其作用域的变化。如修改全局变量对象或引用传递的参数。</p></blockquote><p>引用透明：如果一个函数对于相同的输入始终产生相同的结果，那么说它是引用透明的。</p><p>函数式编程是指为创建不可变的程序，通过消除外部可见的副作用，来对纯函数的声明式的求值过程。</p><p>高阶函数：某些函数可以接收其它的函数作为参数，或者返回一个函数，这样的函数称为高阶函数。</p><p>map函数的简单实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> len = arr.length,</span><br><span class="line">            result = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> idx = <span class="number">0</span>; idx &lt; len; ++idx) &#123;</span><br><span class="line">        result[idx] = fn(arr[idx], idx, arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>reduce函数的简单实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">arr, fn,accumulator</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="number">-1</span>,</span><br><span class="line">        len = arr.length;</span><br><span class="line">    <span class="keyword">if</span> (!accumulator &amp;&amp; len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        accumulator = arr[++idx];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (++idx &lt; len) &#123;</span><br><span class="line">        accumulator = fn(accumulator,arr[idx], idx, arr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> accumulator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>filter函数的简单实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">arr, predicate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="number">-1</span>,</span><br><span class="line">        len = arr.length,</span><br><span class="line">        result = [];</span><br><span class="line">    <span class="keyword">while</span> (++idx &lt; len) &#123;</span><br><span class="line">        <span class="keyword">let</span> value = arr[idx];</span><br><span class="line">        <span class="keyword">if</span> (predicate(value, idx, <span class="keyword">this</span>)) &#123;</span><br><span class="line">            result.push(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>lodash对象已经定义了好了很多函数，在本章中_代表lodash对象。使用lodash的reduce对数组求和：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_([<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]).reduce(_.add);  <span class="comment">//-&gt; 13</span></span><br></pre></td></tr></table></figure></p><p>实战：格式化名字<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">'alonzo church'</span>, <span class="string">'Haskell curry'</span>, <span class="string">'stephen_kleene'</span>,</span><br><span class="line">             <span class="string">'John Von Neumann'</span>, <span class="string">'stephen_kleene'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isValid = <span class="function"><span class="params">val</span> =&gt;</span> !_.isUndefined(val) &amp;&amp; !_.isNull(val);</span><br><span class="line"></span><br><span class="line">_.chain(names)</span><br><span class="line">    .filter(isValid)</span><br><span class="line">    .map(<span class="function"><span class="params">s</span> =&gt;</span> s.replace(<span class="regexp">/_/</span>, <span class="string">' '</span>))</span><br><span class="line">    .uniq()</span><br><span class="line">    .map(_.startCase)</span><br><span class="line">    .sort()</span><br><span class="line">    .value(); </span><br><span class="line"><span class="comment">//-&gt; ['Alonzo Church', 'Haskell Curry', 'Jon Von Neumann', 'Stephen Kleene']</span></span><br></pre></td></tr></table></figure></p><p><code>_.chain</code>可以添加一个输入对象（或数组）的状态，从而能将这些输入转换为所需输出的操作链接在一起。<br><code>_.chain</code>的另一个好处是可以惰性计算，在调用<code>value()</code>前并不会真正的执行任何操作。<br>它返回的是一个lodash包装对象，而不是原生的对象。</p><p>像写SQL一样编程<br>假如有SQL语句：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.firstname <span class="keyword">FROM</span> Person p</span><br><span class="line"><span class="keyword">WHERE</span> p.birthYear &gt; <span class="number">1903</span> <span class="keyword">and</span> p.country <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="string">'US'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> p.firstname</span><br></pre></td></tr></table></figure></p><p>使用<code>_.mixin</code>可以给lodash对象添加新的函数（这里其实相当于起别名），如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_.mixin(&#123;<span class="string">'select'</span>:   _.map,</span><br><span class="line">         <span class="string">'from'</span>:     _.chain,</span><br><span class="line">         <span class="string">'where'</span>:    _.filter,</span><br><span class="line">         <span class="string">'sortBy'</span>:   _.sortByOrder&#125;);</span><br></pre></td></tr></table></figure></p><p>那么查询语句就可以修改为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_.from(persons)</span><br><span class="line">   .where(<span class="function"><span class="params">p</span> =&gt;</span> p.birthYear &gt; <span class="number">1903</span> &amp;&amp; p.address.country !== <span class="string">'US'</span>)</span><br><span class="line">   .sortBy([<span class="string">'firstname'</span>])</span><br><span class="line">   .select(<span class="function"><span class="params">p</span> =&gt;</span> p.firstname)</span><br><span class="line">   .value();</span><br></pre></td></tr></table></figure></p><p>递归求和<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(_.isEmpty(arr)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> _.first(arr) + sum(_.rest(arr));<span class="comment">//_.first获取的是第一个值 _.rest是剩下的值</span></span><br><span class="line">&#125;</span><br><span class="line">sum([]); <span class="comment">//-&gt; 0</span></span><br><span class="line">sum([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]); <span class="comment">//-&gt;45</span></span><br></pre></td></tr></table></figure></p><p>尾递归的递归求和<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr, acc = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(_.isEmpty(arr)) &#123; </span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> sum(_.rest(arr), acc + _.first(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>元数：函数所接受的参数数量，也被称为函数的长度。</p><p>柯里化：柯里化是一种在所有参数被提供之前，挂起或“延迟”函数执行，将多个参数转化为一元函数序列的技术。<br>如一个三个参数的柯里化函数定义：<code>curry(f) :: ((a,b,c) -&gt; d) -&gt; a -&gt; b -&gt; c -&gt; d</code>。</p><p>一个二元柯里化的实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry2</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">firstArg</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">secondArg</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> fn(firstArg, secondArg);</span><br><span class="line">          &#125;;</span><br><span class="line">     &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> curry2AddFn = curry2(add);</span><br><span class="line">curry2AddFn(<span class="number">1</span>)(<span class="number">2</span>);<span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>多元柯里化实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> length = fn.length</span><br><span class="line">    <span class="keyword">let</span> lists = args || []</span><br><span class="line">    <span class="keyword">let</span> listLen</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">..._args</span>) </span>&#123;</span><br><span class="line">        lists = [...lists, ..._args]</span><br><span class="line">        listLen = lists.length</span><br><span class="line">        <span class="keyword">if</span> (listLen &lt; length) &#123;</span><br><span class="line">            <span class="keyword">const</span> that = lists</span><br><span class="line">            lists = []</span><br><span class="line">            <span class="keyword">return</span> curry(fn, ...that)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (listLen === length) &#123;</span><br><span class="line">            <span class="keyword">const</span> that = lists</span><br><span class="line">            lists = []</span><br><span class="line">            <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, that)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>应用部分：应用部分是一种通过将函数的不可变参数自己初始化为固定值来创建更小元数函数的操作。就比如一个5个参数的函数我们通过应用部分可以定义为一个给定了2个特定参数的函数，那么调用的时候只要给另外三个就行了。</p><p>应用部分的实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partial</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="keyword">this</span>, boundArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">let</span> placeholder = &lt;&lt;partialPlaceholderObj&gt;&gt;;// &lt;&lt;partialPlaceholderObj&gt;&gt; 是一个占位符 通常用undefined lodash使用的是_   </span><br><span class="line">    let bound = function() &#123;</span><br><span class="line">        let position = 0, length = args.length;</span><br><span class="line">        let args = Array(length);</span><br><span class="line">        for (let i = 0; i &lt; length; i++) &#123;</span><br><span class="line">            args[i] = boundArgs[i] === placeholder</span><br><span class="line">                ? arguments[position++] : boundArgs[i];</span><br><span class="line">        &#125;</span><br><span class="line">        while (position &lt; arguments.length) &#123;</span><br><span class="line">            args.push(arguments[position++]);</span><br><span class="line">        &#125;</span><br><span class="line">        return fn.apply(this, args);</span><br><span class="line">    &#125;;</span><br><span class="line">    return bound;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>实战1：使用lodash的应用部分对核心语言扩展。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意lodash中的占位符是_，也就是_.partial参数中的_会在调用时替换为调用时的参数</span></span><br><span class="line"><span class="comment">// 获取字符串前几个子串</span></span><br><span class="line"><span class="built_in">String</span>.prototype.first = _.partial(<span class="built_in">String</span>.prototype.substring, <span class="number">0</span>, _);</span><br><span class="line"><span class="string">'Functional Programming'</span>.first(<span class="number">3</span>); <span class="comment">// -&gt; 'Fun'</span></span><br><span class="line"><span class="comment">// 将名字转化为[Last, First]格式</span></span><br><span class="line"><span class="built_in">String</span>.prototype.asName = </span><br><span class="line">    _.partial(<span class="built_in">String</span>.prototype.replace, /(\w+)\s(\w+)/, <span class="string">'$2, $1'</span>);</span><br><span class="line"><span class="string">'Alonzo Church'</span>.asName(); <span class="comment">//-&gt;  'Church, Alonzo'</span></span><br><span class="line"><span class="comment">// 实现类似于split的效果</span></span><br><span class="line"><span class="built_in">String</span>.prototype.explode = </span><br><span class="line">   _.partial(<span class="built_in">String</span>.prototype.match, /[\w]/gi);</span><br><span class="line"><span class="string">'ABC'</span>.explode(); <span class="comment">//-&gt;  ['A', 'B', 'C']</span></span><br><span class="line"><span class="comment">// 解析URL </span></span><br><span class="line"><span class="built_in">String</span>.prototype.parseUrl = _.partial(<span class="built_in">String</span>.prototype.match,</span><br><span class="line">/(http[s]?|ftp):\/\/([^:\/\s]+)\.([^:\/\s]&#123;<span class="number">2</span>,<span class="number">5</span>&#125;)/); </span><br><span class="line"><span class="string">'http://example.com'</span>.parseUrl(); <span class="comment">// -&gt; [ 'http://example.com', 'http', 'example', 'com' ]</span></span><br></pre></td></tr></table></figure></p><p>实战2：生成特定秒数的延迟函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Scheduler = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// lodash中_也可用于_.bind中 表示占位符 </span></span><br><span class="line">    <span class="comment">// _.bind的第一个参数是要绑定的函数 第二个函数是宿主对象 之后的参数是绑定函数的参数 </span></span><br><span class="line">    <span class="comment">// 下例中两个占位符相当于都是setTimeout函数的参数 他的第一个参数是一个函数 第二个参数是毫秒数</span></span><br><span class="line">    <span class="keyword">const</span> delayedFn = _.bind(setTimeout, <span class="literal">undefined</span>, _, _);</span><br><span class="line">    <span class="comment">// 下面相当于把setTimeout第一个参数使用调用的函数 第二个参数也就是时间给5000 10000 或者 自己传进去</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      delay5:  _.partial(delayedFn, _, <span class="number">5000</span>),</span><br><span class="line">      delay10: _.partial(delayedFn, _, <span class="number">10000</span>),</span><br><span class="line">      delay:   _.partial(delayedFn, _, _)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">Scheduler.delay5(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   consoleLog(<span class="string">'Executing After 5 seconds!'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>函数组合：函数组合是一种将已被分割的简单任务组织成复杂行为的整体过程。<br>定义如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">g :: A -&gt; B <span class="comment">//函数g输入A返回B</span></span><br><span class="line">f :: B -&gt; C <span class="comment">//函数f输入B返回C</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//那么f和g的组合 可以定义为一个函数输入f和g 生成一个可以输入A 直接变成C的函数</span></span><br><span class="line">f ● g = f(g) = compose :: ((B -&gt; C), (A -&gt; B)) -&gt; (A -&gt; C)</span><br></pre></td></tr></table></figure></p><p>组合的实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params"><span class="regexp">/* fns */</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">   <span class="keyword">let</span> start = args.length - <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> i = start;</span><br><span class="line">      <span class="keyword">let</span> result = args[start].apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      <span class="keyword">while</span> (i--)</span><br><span class="line">          result = args[i].call(<span class="keyword">this</span>, result);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>identity（I-组合子）：返回和参数相同的组合子。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// identity :: (a) -&gt; a</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：这里的组合子只写了单纯的一层的实现，实际使用的时候都是柯里化后的结果。就比如identity组合子其实是<code>R.curry(identity)</code>，柯里化后的组合子操作起来更方便。</p><p>tap（K-组合子）：将没有函数返回值的函数返回输入值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tap :: (a -&gt; *) -&gt; a -&gt; a</span></span><br><span class="line"><span class="keyword">var</span> tap = <span class="function"><span class="keyword">function</span> <span class="title">tap</span>(<span class="params">fn, x</span>) </span>&#123;</span><br><span class="line">  fn(x);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>alt（OR-组合子）：如果第一个函数返回有值，那么就返回第一个函数的返回值否则返回第二个参数的返回值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> alt = <span class="function"><span class="keyword">function</span> (<span class="params">func1, func2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> func1(val) || func2(val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Ramda的实现</span></span><br><span class="line"><span class="keyword">const</span> alt = <span class="function">(<span class="params">func1, func2, val</span>) =&gt;</span> func1(val) || func2(val);</span><br></pre></td></tr></table></figure></p><p>seq（S-组合子）：两个或者多个函数作为参数并返回一个新的函数，会用相同的值顺序调用所有的这些函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> seq = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="regexp">/*funcs*/</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> funcs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">       funcs.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">          fn(val);</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>fork（join-组合子）：需要三个函数作为参数，即以一个join函数将两个fork函数的处理结果再次进行处理。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fork = <span class="function"><span class="keyword">function</span>(<span class="params">join, func1, func2</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> join(func1(val), func2(val));</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>函数式编程空值的处理：Functor和Monad。<br>函数式编程对空值的处理通常不是用<code>try-catch</code>和判断是否为空来处理，它的处理方式通常是在外面包一层数据结构。类似与jQuery处理DOM元素一样，会包装一层jQuery对象，这样如果没有找到DOM元素处理起来也不会报错。</p><p>Functor（函子）是一个可以将函数应用到它包裹的值上，并将结果再包裹起来的数据结构。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>._value = value; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// map :: (A -&gt; B) -&gt; A -&gt; B </span></span><br><span class="line">    map(f) &#123; </span><br><span class="line">        <span class="keyword">return</span> f(<span class="keyword">this</span>._value);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Wrapper ('</span> + <span class="keyword">this</span>._value + <span class="string">')'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// wrap :: A -&gt; Wrapper(A)</span></span><br><span class="line"><span class="keyword">const</span> wrap = <span class="function">(<span class="params">val</span>) =&gt;</span> <span class="keyword">new</span> Wrapper(val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fmap :: (A -&gt; B) -&gt; Wrapper[A] -&gt; Wrapper[B] </span></span><br><span class="line"><span class="comment">// 这个地方其实就是Functor</span></span><br><span class="line">Wrapper.prototype.fmap = <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> wrap(f(<span class="keyword">this</span>._value));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wrappedValue = wrap(<span class="string">'Get Functional'</span>);<span class="comment">//将字符串包裹起来</span></span><br><span class="line"><span class="comment">// 还记得前面说的组合子identity吗 就是这么使用的 这里可以获取到被包装的内容 </span></span><br><span class="line">wrappedValue.map(R.identity); <span class="comment">// 'Get Functional'</span></span><br><span class="line"><span class="comment">// 也可以做其他处理</span></span><br><span class="line">wrappedValue.map(<span class="built_in">console</span>.log); </span><br><span class="line">wrappedValue.map(R.toUpper); <span class="comment">//-&gt; 'GET FUNCTIONAL'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用fmap</span></span><br><span class="line"><span class="keyword">const</span> plus = R.curry(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line"><span class="keyword">const</span> plus3 = plus(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> two = wrap(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> five = two.fmap(plus3); <span class="comment">//-&gt; Wrapper(5)</span></span><br><span class="line">five.map(R.identity); <span class="comment">//-&gt; 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> plus10 = plus(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">const</span> fifteen = two.fmap(plus3).fmap(plus10); <span class="comment">//-&gt; Wrapper(15)</span></span><br><span class="line">fifteen.map(R.identity);<span class="comment">//-&gt; 15</span></span><br></pre></td></tr></table></figure></p><p>Functor的局限性：使用compose组合包装函数后会有多层包装结构，也就是需要多个<code>.map(R.identity)</code>来抽出结果，比较麻烦。可以使用Monad来处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(value) &#123;  </span><br><span class="line">        <span class="keyword">this</span>._value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Wrapper.of其实就是创建对象</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">of</span>(a) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Wrapper(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    map(f) &#123;  </span><br><span class="line">        <span class="keyword">return</span> Wrapper.of(f(<span class="keyword">this</span>._value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归抽离值</span></span><br><span class="line">    join() &#123;  </span><br><span class="line">        <span class="keyword">if</span>(!(<span class="keyword">this</span>._value <span class="keyword">instanceof</span> Wrapper)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._value.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString() &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Wrapper (<span class="subst">$&#123;<span class="keyword">this</span>._value&#125;</span>)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单使用</span></span><br><span class="line"><span class="keyword">var</span> msg = Wrapper.of(<span class="string">'Hello Monads!'</span>)</span><br><span class="line">   .map(R.toUpper)</span><br><span class="line">   .map(R.identity); <span class="comment">//-&gt; Wrapper('HELLO MONADS!')</span></span><br><span class="line"><span class="comment">// 无论多少层只要调用.join就会返回最后一层</span></span><br><span class="line">msg.join();<span class="comment">//-&gt; Wrapper('HELLO MONADS!')</span></span><br><span class="line">msg.join().get();<span class="comment">//-&gt; 'HELLO MONADS!'</span></span><br></pre></td></tr></table></figure><p>Maybe Monad用来处理是否为空的判断逻辑。它有2个具体的类型：Just和Nothing。</p><blockquote><p>Just(value)表示有值时的容器。<br>Nothing()表示没有值时的容器。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Maybe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> just(a) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Just(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> nothing() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Nothing();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> fromNullable(a) &#123;</span><br><span class="line">        <span class="keyword">return</span> a !== <span class="literal">null</span> ? Maybe.just(a) : Maybe.nothing();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">of</span>(a) &#123;</span><br><span class="line">        <span class="keyword">return</span> just(a);</span><br><span class="line">    &#125;</span><br><span class="line">    get isNothing() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">    get isJust() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Just</span> <span class="keyword">extends</span> <span class="title">Maybe</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>._value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get value() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    map(f) &#123;</span><br><span class="line">        <span class="keyword">return</span> Maybe.fromNullable(f(<span class="keyword">this</span>._value));  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getOrElse() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._value;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    filter(f) &#123;</span><br><span class="line">        <span class="keyword">return</span> Maybe.fromNullable(f(<span class="keyword">this</span>._value) ? <span class="keyword">this</span>._value : <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    chain(f) &#123;</span><br><span class="line">        <span class="keyword">return</span> f(<span class="keyword">this</span>._value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString () &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Maybe.Just(<span class="subst">$&#123;<span class="keyword">this</span>._value&#125;</span>)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nothing</span> <span class="keyword">extends</span> <span class="title">Maybe</span> </span>&#123;</span><br><span class="line">    map(f) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    get value() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Can't extract the value of a Nothing."</span>);  </span><br><span class="line">    &#125; </span><br><span class="line">    getOrElse(other) &#123;</span><br><span class="line">        <span class="keyword">return</span> other;</span><br><span class="line">    &#125;  </span><br><span class="line">    filter(f) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._value;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    chain(f) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    get isNothing() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    toString() &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Maybe.Nothing'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//看完上面估计你也懵了 看一下使用你就会瞬间明白</span></span><br><span class="line">Maybe.fromNullable(<span class="string">"abc"</span>).map(<span class="function"><span class="params">r</span> =&gt;</span> r.toUpperCase()).getOrElse(<span class="string">"不能为空"</span>);<span class="comment">//-&gt; "ABC"</span></span><br><span class="line">Maybe.fromNullable(<span class="literal">null</span>).map(<span class="function"><span class="params">r</span> =&gt;</span> r.toUpperCase()).getOrElse(<span class="string">"不能为空"</span>);<span class="comment">//-&gt; "不能为空"</span></span><br></pre></td></tr></table></figure><p>Either Monad用来或的判断逻。它也有2个具体的类型：Left和Right。</p><blockquote><p>Left(a)包含一个可能的错误消息或抛出的异常对象。<br>Right(b)包含一个成功值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Either</span> </span>&#123; </span><br><span class="line">    <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">        <span class="keyword">this</span>._value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    get value() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> left(a) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Left(a); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> right(a) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Right(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> fromNullable(val) &#123; </span><br><span class="line">        <span class="keyword">return</span> val !== <span class="literal">null</span> &amp;&amp; val !== <span class="literal">undefined</span> ? Either.right(val) : Either.left(val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">of</span>(a) &#123;  </span><br><span class="line">        <span class="keyword">return</span> Either.right(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Left</span> <span class="keyword">extends</span> <span class="title">Either</span> </span>&#123;</span><br><span class="line">    map(_) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">// noop</span></span><br><span class="line">    &#125;</span><br><span class="line">    get value() &#123;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Can't extract the value of a Left(a)."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 提取right的值</span></span><br><span class="line">    getOrElse(other) &#123; </span><br><span class="line">        <span class="keyword">return</span> other;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对left操作 不对right操作</span></span><br><span class="line">    orElse(f) &#123;</span><br><span class="line">        <span class="keyword">return</span> f(<span class="keyword">this</span>._value);  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    chain(f) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    getOrElseThrow(a) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(a);</span><br><span class="line">    &#125; </span><br><span class="line">    filter(f) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Either.Left(<span class="subst">$&#123;<span class="keyword">this</span>._value&#125;</span>)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Right</span> <span class="keyword">extends</span> <span class="title">Either</span> </span>&#123;</span><br><span class="line">    map(f) &#123;   </span><br><span class="line">        <span class="keyword">return</span> Either.of(f(<span class="keyword">this</span>._value));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 提取right的值</span></span><br><span class="line">    getOrElse(other) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._value;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对left操作 不对right操作</span></span><br><span class="line">    orElse() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    chain(f) &#123;   </span><br><span class="line">        <span class="keyword">return</span> f(<span class="keyword">this</span>._value);</span><br><span class="line">    &#125;</span><br><span class="line">    getOrElseThrow() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    filter(f) &#123;   </span><br><span class="line">        <span class="keyword">return</span> Either.fromNullable(f(<span class="keyword">this</span>._value) ? <span class="keyword">this</span>._value : <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Either.Right(<span class="subst">$&#123;<span class="keyword">this</span>._value&#125;</span>)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 看不懂吧 那就再看一个例子，给一个数字取绝对值，如果小于0那么返回它的相反数 否则返回这个数字：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLT0</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Either.of(num);<span class="comment">// of其实就是right</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Either.left(<span class="string">"小于0"</span>);<span class="comment">// left说明是小于0的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// right的话 不会执行orElse里面的函数</span></span><br><span class="line">isLT0(<span class="number">1</span>).orElse(<span class="function"><span class="params">val</span>=&gt;</span>Either.of(-val)).value;<span class="comment">// 1</span></span><br><span class="line">isLT0(<span class="number">-1</span>).orElse(<span class="function"><span class="params">val</span>=&gt;</span>Either.of(-val)).value;<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>IO Monad用来处理不纯的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IO</span> </span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span>(effect) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!_.isFunction(effect)) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="string">'IO Usage: function required'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.effect = effect;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">of</span>(a) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> IO( <span class="function"><span class="params">()</span> =&gt;</span> a ); </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">from</span>(fn) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> IO(fn);   </span><br><span class="line">   &#125; </span><br><span class="line">   map(fn) &#123;</span><br><span class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fn(self.effect());</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   chain(fn) &#123; </span><br><span class="line">        <span class="keyword">return</span> fn(<span class="keyword">this</span>.effect());</span><br><span class="line">   &#125;</span><br><span class="line">   run() &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.effect();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这时你特别懵逼 同样来一个例子</span></span><br><span class="line"><span class="comment">// read和write是不纯的函数 操作DOM了 有副作用</span></span><br><span class="line"><span class="keyword">const</span> read = <span class="function"><span class="keyword">function</span> (<span class="params">document, id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(<span class="string">`\#<span class="subst">$&#123;id&#125;</span>`</span>).innerHTML;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> write = <span class="function"><span class="keyword">function</span>(<span class="params">document, id</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(<span class="string">`\#<span class="subst">$&#123;id&#125;</span>`</span>).innerHTML = val;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还记得之前的应用部分吗</span></span><br><span class="line"><span class="keyword">const</span> readDom = _.partial(read, <span class="built_in">document</span>);</span><br><span class="line"><span class="keyword">const</span> writeDom = _.partial(write, <span class="built_in">document</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在加入有DOM结构：&lt;div id="student-name"&gt;alonzo church&lt;/div&gt;</span></span><br><span class="line"><span class="keyword">const</span> changeToStartCase = </span><br><span class="line">    IO.from(readDom(<span class="string">'student-name'</span>)).</span><br><span class="line">           map(_.startCase).</span><br><span class="line">           map(writeDom(<span class="string">'student-name'</span>));</span><br><span class="line"><span class="comment">//最后执行不纯的函数 调用后DOM结构变成了：&lt;div id="student-name"&gt;Alonzo Church&lt;/div&gt;</span></span><br><span class="line">changeToStartCase.run();</span><br></pre></td></tr></table></figure><p>记忆化（memoization）：将函数的计算结果保存起来，如果下次传入相同的参数那么就直接返回结果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.memoized = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">// 记忆化函数</span></span><br><span class="line">    <span class="keyword">let</span> key = <span class="built_in">JSON</span>.stringify(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">this</span>._cache = <span class="keyword">this</span>._cache || &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>._cache[key] = <span class="keyword">this</span>._cache[key] || </span><br><span class="line">            <span class="keyword">this</span>.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._cache[key];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Function</span>.prototype.memoize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">// 激活记忆化</span></span><br><span class="line">    <span class="keyword">let</span> fn = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (fn.length !== <span class="number">1</span>)&#123; <span class="comment">//假设这里只记忆化一元函数 如果多元函数会有如何做呢 你可以考虑一下</span></span><br><span class="line">        <span class="keyword">return</span> fn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> fn.memoized.apply(fn, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用记忆化：</span></span><br><span class="line"><span class="comment">//定义一个斐波拉契函数</span></span><br><span class="line"><span class="keyword">const</span> factorial = <span class="function">(<span class="params">(n</span>) =&gt;</span> (n === <span class="number">0</span>) ? <span class="number">1</span> </span><br><span class="line">         : (n * factorial(n - <span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">factorial = factorial.memoize();<span class="comment">//激活记忆化</span></span><br><span class="line">factorial(<span class="number">10</span>);<span class="comment">//首次会计算</span></span><br><span class="line">factorial(<span class="number">10</span>);<span class="comment">//第二次直接使用计算后的值</span></span><br></pre></td></tr></table></figure></p><p>上述斐波拉契函数使用了递归会有较高的空间使用率可以使用尾递归来优化：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> factorial = <span class="function">(<span class="params">n, current = <span class="number">1</span></span>) =&gt;</span></span><br><span class="line">    (n === <span class="number">1</span>) ? current :</span><br><span class="line">    factorial(n - <span class="number">1</span>, n * current);</span><br></pre></td></tr></table></figure></p><p>最后我们简单的用Promise封装一下AJAX作为本篇文章的结束：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getJSON = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        req.responseType = <span class="string">'json'</span>;</span><br><span class="line">        req.open(<span class="string">'GET'</span>, url);</span><br><span class="line">        req.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(req.status == <span class="number">200</span>) &#123;</span><br><span class="line">               <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(req.responseText);</span><br><span class="line">               resolve(data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        req.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(reject) &#123;</span><br><span class="line">              reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'IO Error'</span>));</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        req.send();</span><br><span class="line">    &#125;);     </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">getJSON(<span class="string">'/students'</span>).then(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">students</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(R.map(<span class="function"><span class="params">student</span> =&gt;</span> student.name, students));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error.message);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JavaScript数据结构与算法》读书笔记</title>
      <link href="/2019/03/10/%E3%80%8AJavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/10/%E3%80%8AJavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>这本书让我回顾了一遍大学时候学的数据结构。数据结构和算法是程序员最喜欢也是最痛苦的部分，这本书很轻松的描述了这部分东西，是一本很不错的书。这篇文章记录书中的重点部分，并不会对书中所有的内容都复述一遍，如果希望了解更多的内容可以去看看这本书。由于ES5和ES6思想基本上是相同的，这里只记录ES6的实现。</p><p><img src="/2019/03/10/《JavaScript数据结构与算法》读书笔记/1.jpg" alt="《JavaScript数据结构与算法》"></p><hr><p><strong>1. 栈</strong></p><p>栈是一种遵从后进先出（LIFO）原则的有序集合。<br>新添加的或待删除的元素都保存在栈的同一端，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。</p><p>栈的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Stack = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span> () &#123;</span><br><span class="line">            items.set(<span class="keyword">this</span>, []);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        push(element)&#123;</span><br><span class="line">            <span class="keyword">let</span> s = items.get(<span class="keyword">this</span>);</span><br><span class="line">            s.push(element);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pop()&#123;</span><br><span class="line">            <span class="keyword">let</span> s = items.get(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">let</span> r = s.pop();</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        peek()&#123;</span><br><span class="line">            <span class="keyword">let</span> s = items.get(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> s[s.length<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        isEmpty()&#123;</span><br><span class="line">            <span class="keyword">return</span> items.get(<span class="keyword">this</span>).length == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size()&#123;</span><br><span class="line">            <span class="keyword">let</span> s = items.get(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> s.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        clear()&#123;</span><br><span class="line">            items.set(<span class="keyword">this</span>, []);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        print()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        toString()&#123;</span><br><span class="line">            <span class="keyword">return</span> items.get(<span class="keyword">this</span>).toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Stack3;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>应用：十进制转换成其他进制。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseConverter</span>(<span class="params">decNumber, base = <span class="number">2</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> remStack = <span class="keyword">new</span> Stack(),</span><br><span class="line">        rem,</span><br><span class="line">        baseString = <span class="string">''</span>,</span><br><span class="line">        digits = <span class="string">'0123456789ABCDEF'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (decNumber &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        rem = <span class="built_in">Math</span>.floor(decNumber % base);</span><br><span class="line">        remStack.push(rem);</span><br><span class="line">        decNumber = <span class="built_in">Math</span>.floor(decNumber / base);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!remStack.isEmpty())&#123;</span><br><span class="line">        baseString += digits[remStack.pop()];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> baseString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(baseConverter(<span class="number">100345</span>, <span class="number">2</span>));<span class="comment">// 11000011111111001</span></span><br><span class="line"><span class="built_in">console</span>.log(baseConverter(<span class="number">100345</span>, <span class="number">8</span>));<span class="comment">// 303771</span></span><br><span class="line"><span class="built_in">console</span>.log(baseConverter(<span class="number">100345</span>, <span class="number">16</span>));<span class="comment">// 187F9</span></span><br></pre></td></tr></table></figure></p><p><strong>2. 队列</strong></p><p>队列是遵循FIFO（First In First Out，先进先出，也称为先来先服务）原则的一组有序的项。<br>队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。<br>队列的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Queue = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span> () &#123;</span><br><span class="line">            items.set(<span class="keyword">this</span>, []);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        enqueue(element) &#123;</span><br><span class="line">            <span class="keyword">let</span> q = items.get(<span class="keyword">this</span>);</span><br><span class="line">            q.push(element);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dequeue() &#123;</span><br><span class="line">            <span class="keyword">let</span> q = items.get(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">let</span> r = q.shift();</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        front() &#123;</span><br><span class="line">            <span class="keyword">let</span> q = items.get(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> q[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        isEmpty()&#123;</span><br><span class="line">            <span class="keyword">return</span> items.get(<span class="keyword">this</span>).length == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size()&#123;</span><br><span class="line">            <span class="keyword">let</span> q = items.get(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> q.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        clear()&#123;</span><br><span class="line">            items.set(<span class="keyword">this</span>, []);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        print()&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        toString()&#123;</span><br><span class="line">            <span class="keyword">return</span> items.get(<span class="keyword">this</span>).toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Queue;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>优先队列：给定一个优先级，如果新插入的元素按照优先级高低从栈顶到栈尾插入到第一个优先级比他的小元素的前面。<br>注：这个实现中值越小优先级越高。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> PriorityQueue = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">QueueElement</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(element, priority)&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.priority = priority;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span> </span>&#123; <span class="comment">//extends Queue &#123; //with this approach the private properties are not reachable through inheritance</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span> () &#123;</span><br><span class="line">            items.set(<span class="keyword">this</span>, []);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        enqueue(element, priority)&#123;</span><br><span class="line">            <span class="keyword">let</span> queueElement = <span class="keyword">new</span> QueueElement(element, priority);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> q = items.get(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> added = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;q.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (queueElement.priority &lt; q[i].priority)&#123;<span class="comment">// 如果插入的优先级比元素的优先级高</span></span><br><span class="line">                    q.splice(i,<span class="number">0</span>,queueElement);</span><br><span class="line">                    added = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!added)&#123;<span class="comment">//如果前面的优先级都比自己大那么插入到栈尾</span></span><br><span class="line">                q.push(queueElement);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            items.set(<span class="keyword">this</span>, q);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        dequeue() &#123;</span><br><span class="line">            <span class="keyword">let</span> q = items.get(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">let</span> r = q.shift();</span><br><span class="line">            items.set(<span class="keyword">this</span>, q);</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        front() &#123;</span><br><span class="line">            <span class="keyword">let</span> q = items.get(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> q[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        isEmpty()&#123;</span><br><span class="line">            <span class="keyword">return</span> items.get(<span class="keyword">this</span>).length == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size()&#123;</span><br><span class="line">            <span class="keyword">let</span> q = items.get(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> q.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        clear()&#123;</span><br><span class="line">            items.set(<span class="keyword">this</span>, []);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        print()&#123;</span><br><span class="line">            <span class="keyword">let</span> q = items.get(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;q.length; i++)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;q[i].element&#125;</span>  - <span class="subst">$&#123;q[i].priority&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> PriorityQueue;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> priorityQueue = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line">priorityQueue.enqueue(<span class="string">"John"</span>, <span class="number">2</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">"Jack"</span>, <span class="number">1</span>);</span><br><span class="line">priorityQueue.enqueue(<span class="string">"Ana"</span>, <span class="number">3</span>);</span><br><span class="line">priorityQueue.print();</span><br></pre></td></tr></table></figure><p>实战：击鼓传花，使用循环队列来实现。<br>题目描述：在这个游戏中，孩子们围成一个圆圈，把花尽快地传递给旁边的人。某一时刻传花停止，<br>这个时候花在谁手里，谁就退出圆圈结束游戏。重复这个过程，直到只剩一个孩子（胜者）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hotPotato</span> (<span class="params">nameList, num</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;nameList.length; i++)&#123;</span><br><span class="line">        queue.enqueue(nameList[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> eliminated = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span> (queue.size() &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;</span><br><span class="line">            queue.enqueue(queue.dequeue());</span><br><span class="line">        &#125;</span><br><span class="line">        eliminated = queue.dequeue();</span><br><span class="line">        <span class="built_in">console</span>.log(eliminated + <span class="string">' was eliminated from the Hot Potato game.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> queue.dequeue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> names = [<span class="string">'John'</span>,<span class="string">'Jack'</span>,<span class="string">'Camila'</span>,<span class="string">'Ingrid'</span>,<span class="string">'Carl'</span>];</span><br><span class="line"><span class="keyword">let</span> winner = hotPotato(names, <span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'The winner is: '</span> + winner);<span class="comment">// The winner is: John</span></span><br></pre></td></tr></table></figure><p>运行示例图：<br><img src="/2019/03/10/《JavaScript数据结构与算法》读书笔记/2.png" alt="击鼓传花"></p><p><strong>3. 列表</strong><br>列表是为了解决数组插入或移除消耗内存大而出现的数据结构。<br>链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称指针或链接）组成。</p><p>列表的实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> LinkedList = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(element)&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> length = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">    <span class="keyword">const</span> head = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span> () &#123;</span><br><span class="line">            length.set(<span class="keyword">this</span>, <span class="number">0</span>);</span><br><span class="line">            head.set(<span class="keyword">this</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        append(element) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">                current;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.getHead() === <span class="literal">null</span>) &#123; <span class="comment">//first node on list</span></span><br><span class="line">                head.set(<span class="keyword">this</span>, node);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                current = <span class="keyword">this</span>.getHead();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//loop the list until find last item</span></span><br><span class="line">                <span class="keyword">while</span> (current.next) &#123;</span><br><span class="line">                    current = current.next;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//get last item and assign next to added item to make the link</span></span><br><span class="line">                current.next = node;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//update size of list</span></span><br><span class="line">            <span class="keyword">let</span> l = <span class="keyword">this</span>.size();</span><br><span class="line">            l++;</span><br><span class="line">            length.set(<span class="keyword">this</span>, l);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        insert(position, element) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//check for out-of-bounds values</span></span><br><span class="line">            <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= <span class="keyword">this</span>.size()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">                    current = <span class="keyword">this</span>.getHead(),</span><br><span class="line">                    previous,</span><br><span class="line">                    index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">//add on first position</span></span><br><span class="line"></span><br><span class="line">                    node.next = current;</span><br><span class="line">                    head.set(<span class="keyword">this</span>, node);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (index++ <span class="xml"><span class="tag">&lt; <span class="attr">position</span>) &#123;</span></span></span><br><span class="line"><span class="xml">                        previous = current;</span></span><br><span class="line"><span class="xml">                        current = current.next;</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    node.next = current;</span></span><br><span class="line"><span class="xml">                    previous.next = node;</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                //update size of list</span></span><br><span class="line"><span class="xml">                let l = this.size();</span></span><br><span class="line"><span class="xml">                l++;</span></span><br><span class="line"><span class="xml">                length.set(this, l);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                return true;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            &#125; else &#123;</span></span><br><span class="line"><span class="xml">                return false;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        removeAt(position) &#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            //check for out-of-bounds values</span></span><br><span class="line"><span class="xml">            if (position &gt; -1 &amp;&amp; position <span class="tag">&lt; <span class="attr">this.size</span>()) &#123;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                let current = this.getHead(),</span></span><br><span class="line"><span class="xml">                    previous,</span></span><br><span class="line"><span class="xml">                    index = 0;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                //removing first item</span></span><br><span class="line"><span class="xml">                if (position === 0) &#123;</span></span><br><span class="line"><span class="xml">                    head.set(this, current.next);</span></span><br><span class="line"><span class="xml">                &#125; else &#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                    while (index++ <span class="tag">&lt; <span class="attr">position</span>) &#123;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                        previous = current;</span></span><br><span class="line"><span class="xml">                        current = current.next;</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                    //link previous with current's next - skip it to remove</span></span><br><span class="line"><span class="xml">                    previous.next = current.next;</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                let l = this.size();</span></span><br><span class="line"><span class="xml">                l--;</span></span><br><span class="line"><span class="xml">                length.set(this, l);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                return current.element;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            &#125; else &#123;</span></span><br><span class="line"><span class="xml">                return null;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        remove(element) &#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            let index = this.indexOf(element);</span></span><br><span class="line"><span class="xml">            return this.removeAt(index);</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        indexOf(element) &#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            let current = this.getHead(),</span></span><br><span class="line"><span class="xml">                index = 0;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            while (current) &#123;</span></span><br><span class="line"><span class="xml">                if (element === current.element) &#123;</span></span><br><span class="line"><span class="xml">                    return index;</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">                index++;</span></span><br><span class="line"><span class="xml">                current = current.next;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            return -1;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        isEmpty() &#123;</span></span><br><span class="line"><span class="xml">            return this.size() === 0;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        size() &#123;</span></span><br><span class="line"><span class="xml">            return length.get(this);</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        getHead() &#123;</span></span><br><span class="line"><span class="xml">            return head.get(this);</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        toString() &#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            let current = this.getHead(),</span></span><br><span class="line"><span class="xml">                string = '';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            while (current) &#123;</span></span><br><span class="line"><span class="xml">                string += current.element + (current.next ? ', ' : '');</span></span><br><span class="line"><span class="xml">                current = current.next;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">            return string;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        print() &#123;</span></span><br><span class="line"><span class="xml">            console.log(this.toString());</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    return LinkedList;</span></span><br><span class="line"><span class="xml">&#125;)();</span></span><br></pre></td></tr></table></figure></p><p>双向列表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> DoublyLinkedList = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(element) &#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.prev = <span class="literal">null</span>; <span class="comment">//NEW</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> length = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">    <span class="keyword">const</span> head = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">    <span class="keyword">const</span> tail = <span class="keyword">new</span> <span class="built_in">WeakMap</span>(); <span class="comment">//NEW</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DoublyLinkedList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span> () &#123;</span><br><span class="line">            length.set(<span class="keyword">this</span>, <span class="number">0</span>);</span><br><span class="line">            head.set(<span class="keyword">this</span>, <span class="literal">null</span>);</span><br><span class="line">            tail.set(<span class="keyword">this</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        append(element) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">                current, _tail;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.getHead() === <span class="literal">null</span>) &#123; <span class="comment">//first node on list</span></span><br><span class="line">                head.set(<span class="keyword">this</span>, node);</span><br><span class="line">                tail.set(<span class="keyword">this</span>, node); <span class="comment">//NEW</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//attach to the tail node //NEW</span></span><br><span class="line">                _tail = <span class="keyword">this</span>.getTail();</span><br><span class="line">                _tail.next = node;</span><br><span class="line">                node.prev = _tail;</span><br><span class="line">                tail.set(<span class="keyword">this</span>, node);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//update size of list</span></span><br><span class="line">            <span class="keyword">let</span> l = <span class="keyword">this</span>.size();</span><br><span class="line">            l++;</span><br><span class="line">            length.set(<span class="keyword">this</span>, l);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        insert(position, element) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//check for out-of-bounds values</span></span><br><span class="line">            <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= <span class="keyword">this</span>.size()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">                    current = <span class="keyword">this</span>.getHead(),</span><br><span class="line">                    previous,</span><br><span class="line">                    index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (position === <span class="number">0</span>) &#123; <span class="comment">//add on first position</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="keyword">this</span>.getHead()) &#123;       <span class="comment">//NEW</span></span><br><span class="line">                        head.set(<span class="keyword">this</span>, node);</span><br><span class="line">                        tail.set(<span class="keyword">this</span>, node);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        node.next = current;</span><br><span class="line">                        current.prev = node; <span class="comment">//NEW &#123;1&#125;</span></span><br><span class="line">                        head.set(<span class="keyword">this</span>, node);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="keyword">this</span>.size()) &#123; <span class="comment">//last item //NEW</span></span><br><span class="line"></span><br><span class="line">                    current = tail;     </span><br><span class="line">                    current.next = node;</span><br><span class="line">                    node.prev = current;</span><br><span class="line">                    tail.set(<span class="keyword">this</span>, node);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (index++ <span class="xml"><span class="tag">&lt; <span class="attr">position</span>) &#123; </span></span></span><br><span class="line"><span class="xml">                        previous = current;</span></span><br><span class="line"><span class="xml">                        current = current.next;</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                    node.next = current;</span></span><br><span class="line"><span class="xml">                    previous.next = node;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                    current.prev = node; //NEW</span></span><br><span class="line"><span class="xml">                    node.prev = previous; //NEW</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                //update size of list</span></span><br><span class="line"><span class="xml">                let l = this.size();</span></span><br><span class="line"><span class="xml">                l++;</span></span><br><span class="line"><span class="xml">                length.set(this, l);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                return true;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            &#125; else &#123;</span></span><br><span class="line"><span class="xml">                return false;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        removeAt(position) &#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            //check for out-of-bounds values</span></span><br><span class="line"><span class="xml">            if (position &gt; -1 &amp;&amp; position <span class="tag">&lt; <span class="attr">this.size</span>()) &#123;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                let _head = this.getHead(),</span></span><br><span class="line"><span class="xml">                    _tail = this.getTail(),</span></span><br><span class="line"><span class="xml">                    current = _head,</span></span><br><span class="line"><span class="xml">                    previous,</span></span><br><span class="line"><span class="xml">                    index = 0;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                //removing first item</span></span><br><span class="line"><span class="xml">                if (position === 0) &#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                    _head = current.next; </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                    //if there is only one item, then we update tail as well //NEW</span></span><br><span class="line"><span class="xml">                    if (this.size() === 1) &#123; </span></span><br><span class="line"><span class="xml">                        _tail = null;</span></span><br><span class="line"><span class="xml">                    &#125; else &#123;</span></span><br><span class="line"><span class="xml">                        _head.prev = null; </span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                &#125; else if (position === this.size() - 1) &#123; //last item //NEW</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                    current = _tail; </span></span><br><span class="line"><span class="xml">                    _tail = current.prev;</span></span><br><span class="line"><span class="xml">                    _tail.next = null;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                &#125; else &#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                    while (index++ <span class="tag">&lt; <span class="attr">position</span>) &#123; </span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                        previous = current;</span></span><br><span class="line"><span class="xml">                        current = current.next;</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                    //link previous with current's next - skip it to remove</span></span><br><span class="line"><span class="xml">                    previous.next = current.next; </span></span><br><span class="line"><span class="xml">                    current.next.prev = previous; //NEW</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                head.set(this,_head);</span></span><br><span class="line"><span class="xml">                tail.set(this,_tail);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                //update size of list</span></span><br><span class="line"><span class="xml">                let l = this.size();</span></span><br><span class="line"><span class="xml">                l--;</span></span><br><span class="line"><span class="xml">                length.set(this, l);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                return current.element;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            &#125; else &#123;</span></span><br><span class="line"><span class="xml">                return null;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        remove(element) &#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            let index = this.indexOf(element);</span></span><br><span class="line"><span class="xml">            return this.removeAt(index);</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        indexOf(element) &#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            let current = this.getHead(),</span></span><br><span class="line"><span class="xml">                index = -1;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            //check first item</span></span><br><span class="line"><span class="xml">            if (element == current.element) &#123;</span></span><br><span class="line"><span class="xml">                return 0;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            index++;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            //check in the middle of the list</span></span><br><span class="line"><span class="xml">            while (current.next) &#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                if (element == current.element) &#123;</span></span><br><span class="line"><span class="xml">                    return index;</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                current = current.next;</span></span><br><span class="line"><span class="xml">                index++;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            //check last item</span></span><br><span class="line"><span class="xml">            if (element == current.element) &#123;</span></span><br><span class="line"><span class="xml">                return index;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            return -1;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        isEmpty() &#123;</span></span><br><span class="line"><span class="xml">            return this.size() === 0;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        size() &#123;</span></span><br><span class="line"><span class="xml">            return length.get(this);</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        toString() &#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            let current = this.getHead(),</span></span><br><span class="line"><span class="xml">                s = current ? current.element : '';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            while (current &amp;&amp; current.next) &#123;</span></span><br><span class="line"><span class="xml">                current = current.next;</span></span><br><span class="line"><span class="xml">                s += ', ' + current.element;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            return s;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        inverseToString() &#123;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            let current = this.getTail(),</span></span><br><span class="line"><span class="xml">                s = current ? current.element : '';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            while (current &amp;&amp; current.prev) &#123;</span></span><br><span class="line"><span class="xml">                current = current.prev;</span></span><br><span class="line"><span class="xml">                s += ', ' + current.element;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            return s;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        print() &#123;</span></span><br><span class="line"><span class="xml">            console.log(this.toString());</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        printInverse() &#123;</span></span><br><span class="line"><span class="xml">            console.log(this.inverseToString());</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        getHead() &#123;</span></span><br><span class="line"><span class="xml">            return head.get(this);</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        getTail() &#123;</span></span><br><span class="line"><span class="xml">            return tail.get(this);</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    return DoublyLinkedList;</span></span><br><span class="line"><span class="xml">&#125;)();</span></span><br></pre></td></tr></table></figure><p><strong>4. 集合</strong><br>集合是由一组无序且唯一（即不能重复）的项组成的。这个数据结构使用了与有限集合相同的数学概念，但应用在计算机科学的数据结构中。<br>注：这里的名称叫Set但是最好不要用这个名字，因为ES6中本来就有这个全局变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">Set</span> = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Set</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">constructor</span> () &#123;</span><br><span class="line">            items.set(<span class="keyword">this</span>, &#123;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        add(value)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.has(value))&#123;</span><br><span class="line">                <span class="keyword">let</span> items_ = items.get(<span class="keyword">this</span>);</span><br><span class="line">                items_[value] = value;<span class="comment">// [键，键]形式</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">delete</span>(value)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.has(value))&#123;</span><br><span class="line">                <span class="keyword">let</span> items_ = items.get(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">delete</span> items_[value];</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        has(value)&#123;</span><br><span class="line">            <span class="keyword">let</span> items_ = items.get(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> items_.hasOwnProperty(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        clear()&#123;</span><br><span class="line">            items.set(<span class="keyword">this</span>, &#123;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size()&#123;</span><br><span class="line">            <span class="keyword">let</span> items_ = items.get(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.keys(items_).length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        values()&#123;</span><br><span class="line">            <span class="keyword">let</span> values = [];</span><br><span class="line">            <span class="keyword">let</span> items_ = items.get(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>, keys=<span class="built_in">Object</span>.keys(items_); i&lt;keys.length; i++) &#123;</span><br><span class="line">                values.push(items_[keys[i]]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> values;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        getItems()&#123;</span><br><span class="line">            <span class="keyword">return</span> items.get(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//并集 A合B的全部元素</span></span><br><span class="line">        union(otherSet)&#123;</span><br><span class="line">            <span class="keyword">let</span> unionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;values.length; i++)&#123;</span><br><span class="line">                unionSet.add(values[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            values = otherSet.values();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;values.length; i++)&#123;</span><br><span class="line">                unionSet.add(values[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> unionSet;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 交集 A和B公共的部分</span></span><br><span class="line">        intersection(otherSet)&#123;</span><br><span class="line">            <span class="keyword">let</span> intersectionSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;values.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (otherSet.has(values[i]))&#123;</span><br><span class="line">                    intersectionSet.add(values[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> intersectionSet;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 差集 A去过B的部分</span></span><br><span class="line">        difference(otherSet)&#123;</span><br><span class="line">            <span class="keyword">let</span> differenceSet = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;values.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (!otherSet.has(values[i]))&#123;</span><br><span class="line">                    differenceSet.add(values[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> differenceSet;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 子集 B是否包含A</span></span><br><span class="line">        subset(otherSet)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.size() &gt; otherSet.size())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> values = <span class="keyword">this</span>.values();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;values.length; i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!otherSet.has(values[i]))&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Set</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><strong>5. 字典</strong><br>在字典中，存储的是[键，值]对（其实就是我们的Map），其中键名是用来查询特定元素的。字典和集合很相似，集合以[值，值]的形式存储元素，字典则是以[键，值]的形式来存储元素。字典也称作映射。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dictionary</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> items = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.set = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>)</span>&#123;</span><br><span class="line">        items[key] = value; </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.delete = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.has(key))&#123;</span><br><span class="line">            <span class="keyword">delete</span> items[key];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.has = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.hasOwnProperty(key);</span><br><span class="line">        <span class="comment">//return value in items;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.has(key) ? items[key] : <span class="literal">undefined</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        items = &#123;&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.keys(items).length;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.keys = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.keys(items);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.values = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> values = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> items) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.has(k)) &#123;</span><br><span class="line">                values.push(items[k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.each = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> items) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.has(k)) &#123;</span><br><span class="line">                fn(k, items[k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.getItems = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6. 散列表</strong><br>散列表是散列值（HashCode）和真实值的对应关系，为了避免多个值对应相同HashCode的情况，在存储的时候会存在HashCode所在位置及以后第一个不为空的地方，查找的时候找到hashCode所处的位置，然后从这里开始向后找，知道找到键相同的元素。也可以使用之前开发好的LinkedList和HashCode的对应关系避免。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> table = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ValuePair = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'['</span> + <span class="keyword">this</span>.key + <span class="string">' - '</span> + <span class="keyword">this</span>.value + <span class="string">']'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> loseloseHashCode = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> hash = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++) &#123;</span><br><span class="line">            hash += key.charCodeAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hash % <span class="number">37</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> djb2HashCode = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> hash = <span class="number">5381</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; key.length; i++) &#123;</span><br><span class="line">            hash = hash * <span class="number">33</span> + key.charCodeAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hash % <span class="number">1013</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hashCode = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loseloseHashCode(key); <span class="comment">// 这里也可以使用djb2HashCode来生成hash值</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.put = <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> position = hashCode(key);</span><br><span class="line">        <span class="built_in">console</span>.log(position + <span class="string">' - '</span> + key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (table[position] == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            table[position] = <span class="keyword">new</span> ValuePair(key, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> index = ++position;</span><br><span class="line">            <span class="keyword">while</span> (table[index] != <span class="literal">undefined</span>)&#123;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            table[index] = <span class="keyword">new</span> ValuePair(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> position = hashCode(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (table[position] !== <span class="literal">undefined</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (table[position].key === key) &#123;</span><br><span class="line">                <span class="keyword">return</span> table[position].value;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> index = ++position;</span><br><span class="line">                <span class="keyword">while</span> (table[index] === <span class="literal">undefined</span> || table[index].key !== key)&#123;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (table[index].key === key) &#123;</span><br><span class="line">                    <span class="keyword">return</span> table[index].value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> position = hashCode(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (table[position] !== <span class="literal">undefined</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (table[position].key === key) &#123;</span><br><span class="line">                table[position] = <span class="literal">undefined</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> index = ++position;</span><br><span class="line">                <span class="keyword">while</span> (table[index] === <span class="literal">undefined</span> || table[index].key !== key)&#123;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (table[index].key === key) &#123;</span><br><span class="line">                    table[index] = <span class="literal">undefined</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; table.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table[i] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(i + <span class="string">' -&gt; '</span> + table[i].toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7. 树</strong><br>一个树结构包含一系列存在父子关系的节点。每个节点都有一个父节点（除了顶部的第一个节点）以及零个或多个子节点。</p><p><img src="/2019/03/10/《JavaScript数据结构与算法》读书笔记/tree.png" alt="树形结构"></p><p>位于树顶部的节点叫作根节点（11）。它没有父节点。树中的每个元素都叫作节点，节点分为内部节点和外部节点。至少有一个子节点的节点称为内部节点（7、5、9、15、13和20是内部节点）。没有子元素的节点称为外部节点或叶节点（3、6、8、10、12、14、18和25是叶节点）。</p><p>一个节点可以有祖先和后代。一个节点（除了根节点）的祖先包括父节点、祖父节点、曾祖父节点等。一个节点的后代包括子节点、孙子节点、曾孙节点等。</p><p>二叉树中的节点最多只能有两个子节点：一个是左侧子节点，另一个是右侧子节点。这些定义有助于我们写出更高效的向/从树中插入、查找和删除节点的算法。二叉树在计算机科学中的应用非常广泛。</p><p>二叉搜索树（BST）是二叉树的一种，但是它只允许你在左侧节点存储（比父节点）小的值，在右侧节点存储（比父节点）大（或者等于）的值。</p><p>二叉搜索树的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinarySearchTree</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> root = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//special case - first element</span></span><br><span class="line">        <span class="keyword">if</span> (root === <span class="literal">null</span>)&#123;</span><br><span class="line">            root = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            insertNode(root,newNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> insertNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, newNode</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (newNode.key &lt; node.key)&#123;</span><br><span class="line">            <span class="keyword">if</span> (node.left === <span class="literal">null</span>)&#123;</span><br><span class="line">                node.left = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                insertNode(node.left, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.right === <span class="literal">null</span>)&#123;</span><br><span class="line">                node.right = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                insertNode(node.right, newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.getRoot = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.search = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> searchNode(root, key);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> searchNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, key</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key &lt; node.key)&#123;</span><br><span class="line">            <span class="keyword">return</span> searchNode(node.left, key);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key)&#123;</span><br><span class="line">            <span class="keyword">return</span> searchNode(node.right, key);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//element is equal to node.item</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历 前-&gt;中-&gt;后</span></span><br><span class="line">    <span class="keyword">this</span>.inOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        inOrderTraverseNode(root, callback);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> inOrderTraverseNode = <span class="function"><span class="keyword">function</span> (<span class="params">node, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">            inOrderTraverseNode(node.left, callback);</span><br><span class="line">            callback(node.key);</span><br><span class="line">            inOrderTraverseNode(node.right, callback);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前序遍历 中-&gt;前-&gt;后</span></span><br><span class="line">    <span class="keyword">this</span>.preOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        preOrderTraverseNode(root, callback);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> preOrderTraverseNode = <span class="function"><span class="keyword">function</span> (<span class="params">node, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">            callback(node.key);</span><br><span class="line">            preOrderTraverseNode(node.left, callback);</span><br><span class="line">            preOrderTraverseNode(node.right, callback);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后序遍历 前-&gt;后-&gt;中</span></span><br><span class="line">    <span class="keyword">this</span>.postOrderTraverse = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        postOrderTraverseNode(root, callback);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> postOrderTraverseNode = <span class="function"><span class="keyword">function</span> (<span class="params">node, callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">            postOrderTraverseNode(node.left, callback);</span><br><span class="line">            postOrderTraverseNode(node.right, callback);</span><br><span class="line">            callback(node.key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最小值 最左边的点</span></span><br><span class="line">    <span class="keyword">this</span>.min = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minNode(root);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> minNode = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node)&#123;</span><br><span class="line">            <span class="keyword">while</span> (node &amp;&amp; node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">                node = node.left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> node.key;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最小值 最右边的点</span></span><br><span class="line">    <span class="keyword">this</span>.max = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxNode(root);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> maxNode = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node)&#123;</span><br><span class="line">            <span class="keyword">while</span> (node &amp;&amp; node.right !== <span class="literal">null</span>) &#123;</span><br><span class="line">                node = node.right;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> node.key;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        root = removeNode(root, element);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> findMinNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (node &amp;&amp; node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> removeNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, element</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (element &lt; node.key)&#123;</span><br><span class="line">            node.left = removeNode(node.left, element);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element &gt; node.key)&#123;</span><br><span class="line">            node.right = removeNode(node.right, element);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//element is equal to node.item</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//handle 3 special conditions</span></span><br><span class="line">            <span class="comment">//1 - a leaf node</span></span><br><span class="line">            <span class="comment">//2 - a node with only 1 child</span></span><br><span class="line">            <span class="comment">//3 - a node with 2 children</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//case 1</span></span><br><span class="line">            <span class="keyword">if</span> (node.left === <span class="literal">null</span> &amp;&amp; node.right === <span class="literal">null</span>)&#123;</span><br><span class="line">                node = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//case 2</span></span><br><span class="line">            <span class="keyword">if</span> (node.left === <span class="literal">null</span>)&#123;</span><br><span class="line">                node = node.right;</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.right === <span class="literal">null</span>)&#123;</span><br><span class="line">                node = node.left;</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//case 3</span></span><br><span class="line">            <span class="keyword">var</span> aux = findMinNode(node.right);</span><br><span class="line">            node.key = aux.key;</span><br><span class="line">            node.right = removeNode(node.right, aux.key);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AVL树<br>BST（二叉搜索树）存在一个问题：取决于你添加的节点数，树的一条边可能会非常深；也就是说，树的一条分支会有很多层，而其他的分支却只有几层。就比如如果第一次添加的是1（根节点），其他节点添加的都是大于1的数，那么其他的节点都会在根节点的右边而左边就没有左子树了。这种情况下添加、移除和搜索某个节点时引起一些性能问题。为了解决这个问题，有一种树叫作Adelson-Velskii-Landi树（AVL树）。AVL树是一种自平衡二叉搜索树，意思是任何一个节点左右两侧子树的高度之差最多为1。也就是说这种树会在添加或移除节点时尽量试着成为一棵完全树。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AVLTree</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> root = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.getRoot = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> heightNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Math</span>.max(heightNode(node.left), heightNode(node.right)) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rotationLL = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = node.left;</span><br><span class="line">        node.left = tmp.right;</span><br><span class="line">        tmp.right = node;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rotationRR = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = node.right;</span><br><span class="line">        node.right = tmp.left;</span><br><span class="line">        tmp.left = node;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rotationLR = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        node.left = rotationRR(node.left);</span><br><span class="line">        <span class="keyword">return</span> rotationLL(node);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rotationRL = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        node.right = rotationLL(node.right);</span><br><span class="line">        <span class="keyword">return</span> rotationRR(node);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> insertNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, element</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            node = <span class="keyword">new</span> Node(element);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element &lt; node.key) &#123;</span><br><span class="line"></span><br><span class="line">            node.left = insertNode(node.left, element);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.left !== <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((heightNode(node.left) - heightNode(node.right)) &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (element &lt; node.left.key)&#123;</span><br><span class="line">                        node = rotationLL(node);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        node = rotationLR(node);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element &gt; node.key) &#123;</span><br><span class="line"></span><br><span class="line">            node.right = insertNode(node.right, element);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.right !== <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((heightNode(node.right) - heightNode(node.left)) &gt; <span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (element &gt; node.right.key)&#123;</span><br><span class="line">                        node = rotationRR(node);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        node = rotationRL(node);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">        root = insertNode(root, element);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> parentNode;</span><br><span class="line">    <span class="keyword">var</span> nodeToBeDeleted;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> removeNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, element</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        parentNode = node;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (element &lt; node.key) &#123;</span><br><span class="line">            node.left = removeNode(node.left, element);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nodeToBeDeleted = node;</span><br><span class="line">            node.right = removeNode(node.right, element);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node === parentNode) &#123; <span class="comment">//remove node</span></span><br><span class="line">            <span class="keyword">if</span> (nodeToBeDeleted !== <span class="literal">null</span> &amp;&amp; element === nodeToBeDeleted.key) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nodeToBeDeleted === parentNode) &#123;</span><br><span class="line">                    node = node.left;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> tmp = nodeToBeDeleted.key;</span><br><span class="line">                    nodeToBeDeleted.key = parentNode.key;</span><br><span class="line">                    parentNode.key = tmp;</span><br><span class="line">                    node = node.right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//do balancing</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.left === <span class="literal">undefined</span>) node.left = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (node.right === <span class="literal">undefined</span>) node.right = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((heightNode(node.left) - heightNode(node.right)) === <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element &lt; node.left.key) &#123;</span><br><span class="line">                    node = rotationLR(node);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    node = rotationLL(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((heightNode(node.right) - heightNode(node.left)) === <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element &gt; node.right.key) &#123;</span><br><span class="line">                    node = rotationRL(node);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    node = rotationRR(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">        parentNode = <span class="literal">null</span>;</span><br><span class="line">        nodeToBeDeleted = <span class="literal">null</span>;</span><br><span class="line">        root = removeNode(root, element);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>红黑树的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RedBlackTree</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Colors = &#123;</span><br><span class="line">        RED: <span class="number">0</span>,</span><br><span class="line">        BLACK: <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Node = <span class="function"><span class="keyword">function</span> (<span class="params">key, color</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.flipColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.color === Colors.RED) &#123;</span><br><span class="line">                <span class="keyword">this</span>.color = Colors.BLACK;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.color = Colors.RED;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> root = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.getRoot = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> isRed = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.color === Colors.RED;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> flipColors = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">        node.left.flipColor();</span><br><span class="line">        node.right.flipColor();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rotateLeft = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = node.right;</span><br><span class="line">        <span class="keyword">if</span> (temp !== <span class="literal">null</span>) &#123;</span><br><span class="line">            node.right = temp.left;</span><br><span class="line">            temp.left = node;</span><br><span class="line">            temp.color = node.color;</span><br><span class="line">            node.color = Colors.RED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rotateRight = <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = node.left;</span><br><span class="line">        <span class="keyword">if</span> (temp !== <span class="literal">null</span>) &#123;</span><br><span class="line">            node.left = temp.right;</span><br><span class="line">            temp.right = node;</span><br><span class="line">            temp.color = node.color;</span><br><span class="line">            node.color = Colors.RED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> insertNode = <span class="function"><span class="keyword">function</span>(<span class="params">node, element</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Node(element, Colors.RED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> newRoot = node;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (element &lt; node.key) &#123;</span><br><span class="line"></span><br><span class="line">            node.left = insertNode(node.left, element);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element &gt; node.key) &#123;</span><br><span class="line"></span><br><span class="line">            node.right = insertNode(node.right, element);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.key = element;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isRed(node.right) &amp;&amp; !isRed(node.left)) &#123;</span><br><span class="line">            newRoot = rotateLeft(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isRed(node.left) &amp;&amp; isRed(node.left.left)) &#123;</span><br><span class="line">            newRoot = rotateRight(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isRed(node.left) &amp;&amp; isRed(node.right)) &#123;</span><br><span class="line">            flipColors(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newRoot;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">        root = insertNode(root, element);</span><br><span class="line">        root.color = Colors.BLACK;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>8. 图</strong><br>图是网络结构的抽象模型。图是一组由边连接的节点（或顶点）。学习图是重要的，因为任何二元关系都可以用图来表示。<br>一个图G = (V, E)由以下元素组成。</p><blockquote><p>V：一组顶点<br>E：一组边，连接V中的顶点</p></blockquote><p>由一条边连接在一起的顶点称为相邻顶点。<br>一个顶点的度是其相邻顶点的数量。<br>如果图中不存在环，则称该图是无环的。如果图中每两个顶点间都存在路径，则该图是连通的。<br>图可以分为是无向图（边没有方向）和有向图（有向图）。<br>图也可以是未加权的（目前为止我们看到的图都是未加权的）或是加权的。</p><p>图有的三种表示法<br>8.1.1 邻接矩阵</p><p><img src="/2019/03/10/《JavaScript数据结构与算法》读书笔记/graph1.png" alt="邻接矩阵"><br>8.1.2 邻接表</p><p><img src="/2019/03/10/《JavaScript数据结构与算法》读书笔记/graph2.png" alt="邻接表"></p><p>8.1.3 关联矩阵</p><p><img src="/2019/03/10/《JavaScript数据结构与算法》读书笔记/graph3.png" alt="关联矩阵"></p><p>图的遍历有两种：<br>8.2.1 广度优先搜索：</p><p><img src="/2019/03/10/《JavaScript数据结构与算法》读书笔记/bfs.png" alt="广度优先搜索"></p><p>8.2.2 深度优先搜索：</p><p><img src="/2019/03/10/《JavaScript数据结构与算法》读书笔记/dfs.png" alt="深度优先搜索"></p><p>图的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Graph</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> vertices = []; <span class="comment">//list</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> adjList = <span class="keyword">new</span> Dictionary();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.addVertex = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">        vertices.push(v);</span><br><span class="line">        adjList.set(v, []); <span class="comment">//initialize adjacency list with array as well;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.addEdge = <span class="function"><span class="keyword">function</span>(<span class="params">v, w</span>)</span>&#123;</span><br><span class="line">        adjList.get(v).push(w);</span><br><span class="line">        <span class="comment">//adjList.get(w).push(v); //commented to run the improved DFS with topological sorting</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> s = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;vertices.length; i++)&#123;</span><br><span class="line">            s += vertices[i] + <span class="string">' -&gt; '</span>;</span><br><span class="line">            <span class="keyword">var</span> neighbors = adjList.get(vertices[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;neighbors.length; j++)&#123;</span><br><span class="line">                s += neighbors[j] + <span class="string">' '</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            s += <span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> initializeColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> color = &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;vertices.length; i++)&#123;</span><br><span class="line">            color[vertices[i]] = <span class="string">'white'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.bfs = <span class="function"><span class="keyword">function</span>(<span class="params">v, callback</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> color = initializeColor(),</span><br><span class="line">            queue = <span class="keyword">new</span> Queue();</span><br><span class="line">        queue.enqueue(v);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">var</span> u = queue.dequeue(),</span><br><span class="line">                neighbors = adjList.get(u);</span><br><span class="line">            color[u] = <span class="string">'grey'</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;neighbors.length; i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> w = neighbors[i];</span><br><span class="line">                <span class="keyword">if</span> (color[w] === <span class="string">'white'</span>)&#123;</span><br><span class="line">                    color[w] = <span class="string">'grey'</span>;</span><br><span class="line">                    queue.enqueue(w);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            color[u] = <span class="string">'black'</span>;</span><br><span class="line">            <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">                callback(u);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.dfs = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> color = initializeColor();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;vertices.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (color[vertices[i]] === <span class="string">'white'</span>)&#123;</span><br><span class="line">                dfsVisit(vertices[i], color, callback);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfsVisit = <span class="function"><span class="keyword">function</span>(<span class="params">u, color, callback</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        color[u] = <span class="string">'grey'</span>;</span><br><span class="line">        <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">            callback(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Discovered '</span> + u);</span><br><span class="line">        <span class="keyword">var</span> neighbors = adjList.get(u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;neighbors.length; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> w = neighbors[i];</span><br><span class="line">            <span class="keyword">if</span> (color[w] === <span class="string">'white'</span>)&#123;</span><br><span class="line">                dfsVisit(w, color, callback);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        color[u] = <span class="string">'black'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'explored '</span> + u);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 广度优先搜索（Breadth-First Search，BFS）</span></span><br><span class="line">    <span class="keyword">this</span>.BFS = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> color = initializeColor(),</span><br><span class="line">            queue = <span class="keyword">new</span> Queue(),</span><br><span class="line">            d = &#123;&#125;,</span><br><span class="line">            pred = &#123;&#125;;</span><br><span class="line">        queue.enqueue(v);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;vertices.length; i++)&#123;</span><br><span class="line">            d[vertices[i]] = <span class="number">0</span>;</span><br><span class="line">            pred[vertices[i]] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">var</span> u = queue.dequeue(),</span><br><span class="line">                neighbors = adjList.get(u);</span><br><span class="line">            color[u] = <span class="string">'grey'</span>;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;neighbors.length; i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> w = neighbors[i];</span><br><span class="line">                <span class="keyword">if</span> (color[w] === <span class="string">'white'</span>)&#123;</span><br><span class="line">                    color[w] = <span class="string">'grey'</span>;</span><br><span class="line">                    d[w] = d[u] + <span class="number">1</span>;</span><br><span class="line">                    pred[w] = u;</span><br><span class="line">                    queue.enqueue(w);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            color[u] = <span class="string">'black'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            distances: d,</span><br><span class="line">            predecessors: pred</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//深度优先搜索（Depth-First Search，DFS）</span></span><br><span class="line">    <span class="keyword">var</span> time = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.DFS = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> color = initializeColor(),</span><br><span class="line">            d = &#123;&#125;,</span><br><span class="line">            f = &#123;&#125;,</span><br><span class="line">            p = &#123;&#125;;</span><br><span class="line">        time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;vertices.length; i++)&#123;</span><br><span class="line">            f[vertices[i]] = <span class="number">0</span>;</span><br><span class="line">            d[vertices[i]] = <span class="number">0</span>;</span><br><span class="line">            p[vertices[i]] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;vertices.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (color[vertices[i]] === <span class="string">'white'</span>)&#123;</span><br><span class="line">                DFSVisit(vertices[i], color, d, f, p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            discovery: d,</span><br><span class="line">            finished: f,</span><br><span class="line">            predecessors: p</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> DFSVisit = <span class="function"><span class="keyword">function</span>(<span class="params">u, color, d, f, p</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'discovered '</span> + u);</span><br><span class="line">        color[u] = <span class="string">'grey'</span>;</span><br><span class="line">        d[u] = ++time;</span><br><span class="line">        <span class="keyword">var</span> neighbors = adjList.get(u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;neighbors.length; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> w = neighbors[i];</span><br><span class="line">            <span class="keyword">if</span> (color[w] === <span class="string">'white'</span>)&#123;</span><br><span class="line">                p[w] = u;</span><br><span class="line">                DFSVisit(w,color, d, f, p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        color[u] = <span class="string">'black'</span>;</span><br><span class="line">        f[u] = ++time;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'explored '</span> + u);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>9. 排序和查找</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> array = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.insert = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        array.push(item);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> swap = <span class="function"><span class="keyword">function</span>(<span class="params">array, index1, index2</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> aux = array[index1];</span><br><span class="line">        array[index1] = array[index2];</span><br><span class="line">        array[index2] = aux;</span><br><span class="line">        <span class="comment">//ES2015 swap - Firefox only, for other browser, uncomment code above and coment line below</span></span><br><span class="line">        <span class="comment">//[array[index1], array[index2]] = [array[index2], array[index1]];</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.toString= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.join();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.array= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 冒泡排序</span></span><br><span class="line">    <span class="keyword">this</span>.bubbleSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> length = array.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'--- '</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;length<span class="number">-1</span>; j++ )&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'compare '</span> + array[j] + <span class="string">' with '</span> + array[j+<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (array[j] &gt; array[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'swap '</span> + array[j] + <span class="string">' with '</span> + array[j+<span class="number">1</span>]);</span><br><span class="line">                    swap(array, j, j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 稍微改进一点的冒泡排序 （还可以加标示位来改进）</span></span><br><span class="line">    <span class="keyword">this</span>.modifiedBubbleSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> length = array.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'--- '</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;length<span class="number">-1</span>-i; j++ )&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'compare '</span> + array[j] + <span class="string">' with '</span> + array[j+<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (array[j] &gt; array[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'swap '</span> + array[j] + <span class="string">' with '</span> + array[j+<span class="number">1</span>]);</span><br><span class="line">                    swap(j, j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择排序：每次寻找数据结构中的最小值放在未排序结构的前面</span></span><br><span class="line">    <span class="keyword">this</span>.selectionSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> length = array.length,</span><br><span class="line">            indexMin;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;length<span class="number">-1</span>; i++)&#123;</span><br><span class="line">            indexMin = i;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'index '</span> + array[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j=i; j&lt;length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(array[indexMin]&gt;array[j])&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'new index min '</span> + array[j]);</span><br><span class="line">                    indexMin = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i !== indexMin)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'swap '</span> + array[i] + <span class="string">' with '</span> + array[indexMin]);</span><br><span class="line">                swap(i, indexMin);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入排序：元素插入到已排序的元素中</span></span><br><span class="line">    <span class="keyword">this</span>.insertionSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> length = array.length,</span><br><span class="line">            j, temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;length; i++)&#123;</span><br><span class="line">            j = i;</span><br><span class="line">            temp = array[i];</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'to be inserted '</span> + temp);</span><br><span class="line">            <span class="keyword">while</span> (j&gt;<span class="number">0</span> &amp;&amp; array[j<span class="number">-1</span>] &gt; temp)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'shift '</span> + array[j<span class="number">-1</span>]);</span><br><span class="line">                array[j] = array[j<span class="number">-1</span>];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'insert '</span> + temp);</span><br><span class="line">            array[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> insertionSort_ = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> length = array.length,</span><br><span class="line">            j, temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;length; i++)&#123;</span><br><span class="line">            j = i;</span><br><span class="line">            temp = array[i];</span><br><span class="line">            <span class="keyword">while</span> (j&gt;<span class="number">0</span> &amp;&amp; array[j<span class="number">-1</span>] &gt; temp)&#123;</span><br><span class="line">                array[j] = array[j<span class="number">-1</span>];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            array[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//归并排序</span></span><br><span class="line">    <span class="keyword">this</span>.mergeSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        array = mergeSortRec(array);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mergeSortRec = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> length = array.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(length === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(array);</span><br><span class="line">            <span class="keyword">return</span> array;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor(length / <span class="number">2</span>),</span><br><span class="line">            left = array.slice(<span class="number">0</span>, mid),</span><br><span class="line">            right = array.slice(mid, length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> merge(mergeSortRec(left), mergeSortRec(right));</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">left, right</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> result = [],</span><br><span class="line">            il = <span class="number">0</span>,</span><br><span class="line">            ir = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(il &lt; left.length &amp;&amp; ir &lt; right.length) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(left[il] &lt; right[ir]) &#123;</span><br><span class="line">                result.push(left[il++]);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                result.push(right[ir++]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (il &lt; left.length)&#123;</span><br><span class="line">            result.push(left[il++]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (ir &lt; right.length)&#123;</span><br><span class="line">            result.push(right[ir++]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//快速排序</span></span><br><span class="line">    <span class="keyword">this</span>.quickSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        quick(array,  <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> partition = <span class="function"><span class="keyword">function</span>(<span class="params">array, left, right</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> pivot = array[<span class="built_in">Math</span>.floor((right + left) / <span class="number">2</span>)],</span><br><span class="line">            i = left,</span><br><span class="line">            j = right;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'pivot is '</span> + pivot + <span class="string">'; left is '</span> + left + <span class="string">'; right is '</span> + right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (array[i] &lt; pivot) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'i = '</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (array[j] &gt; pivot) &#123;</span><br><span class="line">                j--;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'j = '</span> + j);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &lt;= j) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'swap '</span> + array[i] + <span class="string">' with '</span> + array[j]);</span><br><span class="line">                swap(array, i, j);</span><br><span class="line">                i++;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> quick = <span class="function"><span class="keyword">function</span>(<span class="params">array, left, right</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> index;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (array.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            index = partition(array, left, right);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (left &lt; index - <span class="number">1</span>) &#123;</span><br><span class="line">                quick(array, left, index - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (index &lt; right) &#123;</span><br><span class="line">                quick(array, index, right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//堆排序</span></span><br><span class="line">    <span class="keyword">this</span>.heapSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> heapSize = array.length;</span><br><span class="line"></span><br><span class="line">        buildHeap(array);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (heapSize &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            heapSize--;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'swap ('</span> + + array[<span class="number">0</span>] + <span class="string">','</span> + array[heapSize] + <span class="string">')'</span>);</span><br><span class="line">            swap(array, <span class="number">0</span>, heapSize);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'heapify '</span> + array.join());</span><br><span class="line">            heapify(array, heapSize, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> buildHeap = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'building heap'</span>);</span><br><span class="line">        <span class="keyword">var</span> heapSize = array.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="built_in">Math</span>.floor(array.length / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            heapify(array, heapSize, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'heap created: '</span> + array.join());</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> heapify = <span class="function"><span class="keyword">function</span>(<span class="params">array, heapSize, i</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> left = i * <span class="number">2</span> + <span class="number">1</span>,</span><br><span class="line">            right = i * <span class="number">2</span> + <span class="number">2</span>,</span><br><span class="line">            largest = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left &lt; heapSize &amp;&amp; array[left] &gt; array[largest]) &#123;</span><br><span class="line">            largest = left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (right &lt; heapSize &amp;&amp; array[right] &gt; array[largest]) &#123;</span><br><span class="line">            largest = right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Heapify Index = '</span>+ i + <span class="string">' and Heap Size = '</span> + heapSize);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (largest !== i) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'swap index '</span> + i + <span class="string">' with '</span> + largest + <span class="string">' ('</span> + + array[i] + <span class="string">','</span> + array[largest] + <span class="string">')'</span>);</span><br><span class="line">            swap(array, i, largest);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'heapify '</span> + array.join());</span><br><span class="line">            heapify(array, heapSize, largest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.countingSort = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> i,</span><br><span class="line">            maxValue = <span class="keyword">this</span>.findMaxValue(),</span><br><span class="line">            sortedIndex = <span class="number">0</span>,</span><br><span class="line">            counts = <span class="keyword">new</span> <span class="built_in">Array</span>(maxValue + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!counts[array[i]]) &#123;</span><br><span class="line">                counts[array[i]] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            counts[array[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Frequencies: '</span> + counts.join());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; counts.length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (counts[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                array[sortedIndex++] = i;</span><br><span class="line">                counts[i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.bucketSort = <span class="function"><span class="keyword">function</span>(<span class="params">bucketSize</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> i,</span><br><span class="line">            minValue = <span class="keyword">this</span>.findMinValue(),</span><br><span class="line">            maxValue = <span class="keyword">this</span>.findMaxValue(),</span><br><span class="line">            BUCKET_SIZE = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'minValue '</span> + minValue);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'maxValue '</span> + maxValue);</span><br><span class="line"></span><br><span class="line">        bucketSize = bucketSize || BUCKET_SIZE;</span><br><span class="line">        <span class="keyword">var</span> bucketCount = <span class="built_in">Math</span>.floor((maxValue - minValue) / bucketSize) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> buckets = <span class="keyword">new</span> <span class="built_in">Array</span>(bucketCount);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'bucketSize = '</span> + bucketCount);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">            buckets[i] = [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            buckets[<span class="built_in">Math</span>.floor((array[i] - minValue) / bucketSize)].push(array[i]);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'pushing item '</span> + array[i] + <span class="string">' to bucket index '</span> + <span class="built_in">Math</span>.floor((array[i] - minValue) / bucketSize));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        array = [];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">            insertionSort_(buckets[i]);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'bucket sorted '</span> + i + <span class="string">': '</span> + buckets[i].join());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; buckets[i].length; j++) &#123;</span><br><span class="line">                array.push(buckets[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.radixSort = <span class="function"><span class="keyword">function</span>(<span class="params">radixBase</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> i,</span><br><span class="line">            minValue = <span class="keyword">this</span>.findMinValue(),</span><br><span class="line">            maxValue = <span class="keyword">this</span>.findMaxValue(),</span><br><span class="line">            radixBase = radixBase || <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Perform counting sort for each significant digit), starting at 1</span></span><br><span class="line">        <span class="keyword">var</span> significantDigit = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (((maxValue - minValue) / significantDigit) &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'radix sort for digit '</span> + significantDigit);</span><br><span class="line">            array = countingSortForRadix(array, radixBase, significantDigit, minValue);</span><br><span class="line">            <span class="built_in">console</span>.log(array.join());</span><br><span class="line">            significantDigit *= radixBase;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> countingSortForRadix = <span class="function"><span class="keyword">function</span>(<span class="params">array, radixBase, significantDigit, minValue</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i, countsIndex,</span><br><span class="line">            counts = <span class="keyword">new</span> <span class="built_in">Array</span>(radixBase),</span><br><span class="line">            aux = <span class="keyword">new</span> <span class="built_in">Array</span>(radixBase);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; radixBase; i++) &#123;</span><br><span class="line">            counts[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            countsIndex = <span class="built_in">Math</span>.floor(((array[i] - minValue) / significantDigit) % radixBase);</span><br><span class="line">            counts[countsIndex]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; radixBase; i++) &#123;</span><br><span class="line">            counts[i] += counts[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            countsIndex = <span class="built_in">Math</span>.floor(((array[i] - minValue) / significantDigit) % radixBase);</span><br><span class="line">            aux[--counts[countsIndex]] = array[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            array[i] = aux[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线性查找</span></span><br><span class="line">    <span class="keyword">this</span>.sequentialSearch = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (item === array[i])&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.findMaxValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> max = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; array[i])&#123;</span><br><span class="line">                max = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.findMinValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> min = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; array[i])&#123;</span><br><span class="line">                min = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//二分查找</span></span><br><span class="line">    <span class="keyword">this</span>.binarySearch = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.quickSort();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> low = <span class="number">0</span>,</span><br><span class="line">            high = array.length - <span class="number">1</span>,</span><br><span class="line">            mid, element;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high)&#123;</span><br><span class="line">            mid = <span class="built_in">Math</span>.floor((low + high) / <span class="number">2</span>);</span><br><span class="line">            element = array[mid];</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'mid element is '</span> + element);</span><br><span class="line">            <span class="keyword">if</span> (element &lt; item) &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'low is '</span> + low);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element &gt; item) &#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'high is '</span> + high);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'found it'</span>);</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>9. 算法模式</strong></p><p>递归实现斐波那契函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num === <span class="number">1</span> || num === <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fibonacci(num - <span class="number">1</span>) + fibonacci(num - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最少硬币找零问题</p><p>动态规划求解：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MinCoinChange</span>(<span class="params">coins</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> coins = coins; </span><br><span class="line">    <span class="keyword">var</span> cache = &#123;&#125;; </span><br><span class="line">    <span class="keyword">this</span>.makeChange = <span class="function"><span class="keyword">function</span>(<span class="params">amount</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> me = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (!amount) &#123; </span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cache[amount]) &#123; </span><br><span class="line">            <span class="keyword">return</span> cache[amount];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> min = [], newMin, newAmount;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;coins.length; i++)&#123; </span><br><span class="line">            <span class="keyword">var</span> coin = coins[i];</span><br><span class="line">            newAmount = amount - coin; </span><br><span class="line">            <span class="keyword">if</span> (newAmount &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                newMin = me.makeChange(newAmount); </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (newAmount &gt;= <span class="number">0</span> &amp;&amp; (newMin.length &lt; min.length<span class="number">-1</span> || !min.length)</span><br><span class="line">                &amp;&amp; (newMin.length || !newAmount) &#123;</span><br><span class="line">                min = [coin].concat(newMin); </span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'new Min '</span> + min + <span class="string">' for '</span> + amount); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (cache[amount] = min); </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>贪心算法求解：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MinCoinChange</span>(<span class="params">coins</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> coins = coins; </span><br><span class="line">    <span class="keyword">this</span>.makeChange = <span class="function"><span class="keyword">function</span>(<span class="params">amount</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> change = [],</span><br><span class="line">        total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=coins.length; i&gt;=<span class="number">0</span>; i--)&#123; </span><br><span class="line">            <span class="keyword">var</span> coin = coins[i];</span><br><span class="line">            <span class="keyword">while</span> (total + coin &lt;= amount) &#123; </span><br><span class="line">                change.push(coin);</span><br><span class="line">                total += coin; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> change;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minCoinChange = <span class="keyword">new</span> MinCoinChange([<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">25</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(minCoinChange.makeChange(<span class="number">36</span>));</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES5中的继承</title>
      <link href="/2019/03/04/ES5%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
      <url>/2019/03/04/ES5%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<p>面向对象的三大特性是：封装、继承、多态。其中继承是最难理解的，也是最重要的部分。<br>JS中本身没有专门继承的语法，它是使用各种代码的模拟来实现的。即使ES6有了正真的继承语法，其本质也是ES5中继承的语法糖。目前ES5继承最被人津津乐道的就是尼古拉斯的著名书籍《JavaScript高级程序设计》中记录的6中方法。本文也是摘自这本本书的这部分的核心内容，并整理给大家呈现出来。</p><ol><li><p>原型链继承<br> 原型链继承是最为经典的一种继承，其继承方式就是<strong>子类的原型指向父类的实例</strong>。下面我们来看一个这种继承的例子：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.hobbies = [<span class="string">"coding"</span>,<span class="string">"running"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是："</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Man.prototype = <span class="keyword">new</span> Person();<span class="comment">//原型继承</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lufei = <span class="keyword">new</span> Man(<span class="string">"海贼王的男人"</span>);</span><br><span class="line">lufei.sayName();<span class="comment">// 我是：海贼王的男人</span></span><br></pre></td></tr></table></figure><p> 我们可以看到子类的对象<code>lufei</code>已经拥有父类的方法，说明继承成功了。上面最重要的一行代码是第14行，印证了<strong>子类的原型指向父类的实例</strong>。原型继承其实就是利用原型链来实现的，如果在子类中没有找到某个属性和方法就会去子类的原型中去找，如果父类的实例没有又会去父类的原型去找，直到找到Object的原型为止。<br> 原型继承是最简单最长用的一种继承方式，但是它有自己的缺点：</p><blockquote><p><strong>缺点1：父类中引用类型的属性，会被子类共享。</strong><br> 如上例中的hobbies属性，每个子类的实例都指向了同一个hobbies属性。如果某个子类不重写hobbies并且给他添加了一个值，那么所有的没有重写hobbies的子类的这个值都将会改变（同一个对象）。<br><strong>缺点2：创建子类的时候，无法调用父元素的构造函数。</strong><br> 如上例中的<code>this.name = name;</code>在父类中已有相同的代码无法做到复用。</p></blockquote></li><li><p>借用构造函数实现继承<br> 借用构造函数实现的继承是解决原型继承的缺点而出现的，他的核心思想就是<strong>子类通过call（或者apply）调用父类的构造函数</strong>。请看下面的例子：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hobbies = [<span class="string">"coding"</span>,<span class="string">"running"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>); <span class="comment">// 借用构造函数的继承</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lufei = <span class="keyword">new</span> Man();</span><br><span class="line"><span class="keyword">var</span> nami = <span class="keyword">new</span> Man();</span><br><span class="line">lufei.hobbies.push(<span class="string">"eat meat"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(lufei.hobbies); <span class="comment">// ["coding", "running", "eat meat"]</span></span><br><span class="line"><span class="built_in">console</span>.log(nami.hobbies); <span class="comment">// ["coding", "running"]</span></span><br></pre></td></tr></table></figure><p> 右上可知，子类的两个对象<code>lufei</code>和<code>nami</code>都拥有了父类的属性，所以继承成功。我们可以看到子类可以调用父类的构造方法，同时父类的引用属性也不再共享。<br> 这种方法的缺点：</p><blockquote><p><strong>缺点1：父类原型中的属性和方法无法继承。</strong><br><strong>缺点2：对每个子类对象来说，父类中的函数属性都是不同的函数，代码无法复用。</strong></p></blockquote></li><li><p>组合继承<br> 组合继承又称为伪经典继承，他的核心思想就是<strong>原型继承和借用构造函数的继承合二为一</strong>。请看下面的例子：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.hobbies = [<span class="string">"coding"</span>,<span class="string">"running"</span>];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我是："</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>,name); <span class="comment">// 借用构造函数的继承</span></span><br><span class="line">    <span class="comment">//这里可以写其他的子类独有的属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Man.prototype = <span class="keyword">new</span> Person();<span class="comment">// 原型继承部分</span></span><br><span class="line">Man.prototype.constructor = Man;<span class="comment">// 修复构造器的指向</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lufei = <span class="keyword">new</span> Man(<span class="string">"路飞"</span>);</span><br><span class="line"><span class="keyword">var</span> nami = <span class="keyword">new</span> Man(<span class="string">"娜美"</span>);</span><br><span class="line">lufei.hobbies.push(<span class="string">"eat meat"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(lufei.hobbies); <span class="comment">// ["coding", "running", "eat meat"]</span></span><br><span class="line"><span class="built_in">console</span>.log(nami.hobbies); <span class="comment">// ["coding", "running"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//子类拥有父类原型上的方法</span></span><br><span class="line">lufei.sayName(); <span class="comment">// 我是：路飞</span></span><br><span class="line">nami.sayName(); <span class="comment">// 我是：娜美</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类的属性方法可以复用</span></span><br><span class="line"><span class="built_in">console</span>.log(lufei.sayName === nami.sayName);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p> 右上可知，子类的两个对象<code>lufei</code>和<code>nami</code>都拥有了父类的属性，所以继承成功。组合继承是最常用的继承方式之一，但是我们可以看到子类可以调用父类的构造方法，同时父类的引用属性也不再共享。</p><blockquote><p><strong>缺点：调用了两次父类构造函数，比较消耗内存。</strong><br> 一次在第10行，一次再第14行。</p></blockquote></li><li><p>原型式继承<br> 要解决组合继承的缺点，我们不得不先说一下原型式继承，它是道格拉斯提出的一种继承方式，其核心思想就是<strong>借助原型，用已有的对象创建对象。</strong>。请看下面的例子：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>)</span>&#123;<span class="comment">// 通过原型创建对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"人"</span>,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是："</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lufei = object(person);</span><br><span class="line">lufei.name = <span class="string">"路飞"</span>;</span><br><span class="line">lufei.sayName();<span class="comment">// 我是：路飞</span></span><br></pre></td></tr></table></figure><p> 右上可知，子类的对象<code>lufei</code>拥有了父类的方法，继承成功。但是我们每次得自己写一个类似于上面的<code>object</code>方法。ES5考虑到这个问题，把这个方法规范化了，就是大名鼎鼎的<code>Object.create()</code>方法，其本质就是上面的<code>object</code>函数。这个函数接受2个参数，一个是要复制的对象，一个是<code>Object.defineProperties()</code>函数第二个参数相同的结构。所以上面第13行和第14行可以改写为：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lufei = <span class="built_in">Object</span>.create(person,&#123;</span><br><span class="line">    name : &#123;<span class="comment">//这个对象是属性描述符里面那样的对象</span></span><br><span class="line">        value:<span class="string">"路飞"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> 这种方式比较方便，它跳过了创建子类这一步，直接创建了子类对象。</p><blockquote><p><strong>缺点1：子类自己独特的属性或方法，是无法复用的。</strong><br><strong>缺点2：没有子类的概念，直接创建了子类对象。</strong></p></blockquote></li><li><p>寄生式继承<br> 寄生式继承解决了子类对象拥有自己的属性和方法的问题，其核心思想就是<strong>在原型式继承的外面再包装一层，使得返回的对象可以添加自己的属性和方法。</strong>。下面这个例子我们直接使用ES5的<code>Object.create</code>了，你可以理解成原型式继承里面的<code>object</code>函数：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"人"</span>,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是："</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObject</span>(<span class="params">obj</span>)</span>&#123;<span class="comment">// 创建子类对象一个方法</span></span><br><span class="line">    <span class="keyword">var</span> newObj = <span class="built_in">Object</span>.create(obj);<span class="comment">// 原型式继承</span></span><br><span class="line">    newObj.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; <span class="comment">// 这里给每个子对象添加方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"大家好！！！"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... 这里可以添加其他的属性或方法</span></span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lufei = createObject(person);</span><br><span class="line">lufei.name = <span class="string">"路飞"</span>;</span><br><span class="line">lufei.sayName();<span class="comment">// 我是：路飞</span></span><br><span class="line">lufei.sayHello();<span class="comment">// 大家好！！！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nami = createObject(person);</span><br><span class="line">nami.name = <span class="string">"娜美"</span>;</span><br><span class="line">nami.sayName();<span class="comment">// 我是：娜美</span></span><br><span class="line">nami.sayHello();<span class="comment">// 大家好！！！</span></span><br></pre></td></tr></table></figure><p> 由上可知，子类的对象<code>lufei</code>和<code>nami</code>即拥有了父类的方法也拥有了子类自己独特的方法<code>sayHello</code>，继承成功。但是它也是直接创建了子对象的。</p><blockquote><p><strong>缺点：没有子类的概念，直接创建了子类对象。</strong></p></blockquote></li><li><p>寄生组合式继承<br> 寄生组合式过借用构造函数来继承属性，通过原型链的混成形式来继承方法。其核心思想就是<strong>使用寄生式继承来继承父类的原型，然后再将结果指定给子类的原型；子类的构造函数借助构造函数来继承父类。</strong>。请看下面的例子：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prototype = <span class="built_in">Object</span>.create(superType.prototype); <span class="comment">// 寄生式继承来继承父类的原型</span></span><br><span class="line">    prototype.constructor = subType; <span class="comment">// 修复子类构造函数的指向</span></span><br><span class="line">    subType.prototype = prototype; <span class="comment">// 修复子类原型的指向</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hobbies = [<span class="string">"coding"</span>,<span class="string">"running"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>); <span class="comment">// 借助构造函数继承属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(Man, Person);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lufei = <span class="keyword">new</span> Man();</span><br><span class="line"><span class="keyword">var</span> nami = <span class="keyword">new</span> Man();</span><br><span class="line">lufei.hobbies.push(<span class="string">"eat meat"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(lufei.hobbies); <span class="comment">// ["coding", "running", "eat meat"]</span></span><br><span class="line"><span class="built_in">console</span>.log(nami.hobbies); <span class="comment">// ["coding", "running"]</span></span><br></pre></td></tr></table></figure><p> 寄生组合式继承被誉为引用类型最理想的继承方式，也是最重要的一种继承方式。</p><blockquote><p><strong>缺点：除了代码比较多外，没有其他的缺点了！</strong></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型 </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES5面向对象基础</title>
      <link href="/2019/03/03/ES5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/03/03/ES5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>面向对象的知识时JS中的一个比较重要的概念，我们今天学习一下ES5面向对象的基础内容。</p><h2 id="一、-创建对象"><a href="#一、-创建对象" class="headerlink" title="一、 创建对象"></a>一、 创建对象</h2><ol><li>工厂模式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;    </span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">"Orange"</span>);</span><br></pre></td></tr></table></figure></li></ol><p>缺点：无法辨别是一个对象。</p><ol start="2"><li>JSON对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">    name:<span class="string">"Orange"</span>,</span><br><span class="line">    sayName:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>优点：简单。<br>缺点：每次只能创建一个对象，代码无法复用。</p><ol start="3"><li>构造函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Orange"</span>);</span><br><span class="line"></span><br><span class="line">person1.sayName();   <span class="comment">//"Orange"</span></span><br></pre></td></tr></table></figure></li></ol><p>优点：可以创建多个对象，可以辨别是对象。<br>下面我们主要讨论的也正是使用构造方法创建的对象。</p><h2 id="二、-不使用new关键字会发生什么"><a href="#二、-不使用new关键字会发生什么" class="headerlink" title="二、 不使用new关键字会发生什么"></a>二、 不使用new关键字会发生什么</h2><p>不使用new的时候相当于时全局变量window调用该方法，this会绑定在全局变量上。由于没有返回值，结果是undefined。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;<span class="comment">// 不使用new时 非严格模式下绑定在全局变量window上了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = Person(<span class="string">"Orange"</span>);<span class="comment">// 方法的调用</span></span><br><span class="line"><span class="built_in">console</span>.log(person1);<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><h2 id="三、-new一个对象的时候有返回值怎么办"><a href="#三、-new一个对象的时候有返回值怎么办" class="headerlink" title="三、 new一个对象的时候有返回值怎么办"></a>三、 new一个对象的时候有返回值怎么办</h2><p>如果返回的是一个对象，那么new出来的结果就是这个对象；如果返回的是非对象的，那么new返回的与没有return语句一样，是一个该类的实例对象。如果没有new的时候，就比如上面这种情况，那就是方法返回什么结果就是什么了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"Person1"</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">haha</span>:<span class="string">"我是一个新的对象"</span>&#125;;<span class="comment">// 返回一个对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"Person2"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;<span class="comment">// 返回一个非对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person1();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person2();</span><br><span class="line"><span class="built_in">console</span>.log(person1);<span class="comment">// &#123;haha: "我是一个新的对象"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(person2);<span class="comment">// Person2 &#123;name: "Person2"&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="四、-成员方法"><a href="#四、-成员方法" class="headerlink" title="四、 成员方法"></a>四、 成员方法</h2><ol><li><p>给单个对象添加成员方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.name = <span class="string">"Orange"</span>;</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person1.name);<span class="comment">// "Orange"</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.name);<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p>给多个对象添加成员方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;<span class="comment">//所有的对象公用的属性</span></span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">20</span>;<span class="comment">//所有的对象公用的属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Orange"</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"小明"</span>);</span><br><span class="line">person1.age = <span class="number">21</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1.name);<span class="comment">// "Orange"</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.name);<span class="comment">// "小明"</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.age);<span class="comment">// 21</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.age);<span class="comment">// 20</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="五、-私有变量"><a href="#五、-私有变量" class="headerlink" title="五、 私有变量"></a>五、 私有变量</h2><p>构造函数中var声明的变量是私有变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">21</span>;<span class="comment">//这里相当于私有变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person1.age);<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><h2 id="六、-静态方法"><a href="#六、-静态方法" class="headerlink" title="六、 静态方法"></a>六、 静态方法</h2><p>添加到构造函数上的方法是静态方法，添加到构造函数上的变量是静态变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.age = <span class="number">20</span>;<span class="comment">//静态变量</span></span><br><span class="line">Person.name = <span class="string">"骗你的"</span>; <span class="comment">// 这条语句会忽略 因为name是一个特殊的属性 不能修改</span></span><br><span class="line">Person.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="comment">//静态方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"sayName:"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"Orange"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);<span class="comment">// "Orange"</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.name);<span class="comment">// "Person" 这里是类的名称 哈哈</span></span><br><span class="line"><span class="comment">// console.log(person.name);// 这个会报错 静态属性属于类 而不是属于对象 </span></span><br><span class="line"><span class="comment">// person.sayName(); // 这个会报错 静态方法属于类 而不是属于对象</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.age); <span class="comment">// 20</span></span><br><span class="line">Person.sayName();<span class="comment">// sayName:Person</span></span><br></pre></td></tr></table></figure></p><h2 id="七、-原型"><a href="#七、-原型" class="headerlink" title="七、 原型"></a>七、 原型</h2><p>上面说过给多个对象添加成员方法，只要在构造函数中添加<code>this.方法名 = 方法</code>即可，但是这样会出现一个问题就是不同对象的方法是不同的，这样就会增大内存的开销。解决这个问题的办法就是把方法放在函数的外面，然后在函数内部去引用同一个函数。这样解决了这个问题，但是却失去了封装性。解决这个问题的最终办法就是——原型。</p><p>每一构造函数写完以后，引擎会加原型的委托，就比如上面的Person类（函数）<strong>定义</strong>完了以后，引擎会加：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure></p><p>从上面代码可以看出Person加了一个名叫<code>prototype</code>的静态变量，这个变量就是Person的原型。由于对象是无法访问静态变量的，所以浏览器给每一个对象又加了一个<code>__proto__</code>的属性也指向了这个原型。相当于引擎又执行了下面的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.__proto__ = Person.prototype;</span><br></pre></td></tr></table></figure></p><p>我们这里总结一下：<strong><code>对象.__proto__属性</code> 和 <code>构造函数.prototype属性</code> 都指向了该类的原型</strong>。<br>下面我们把这剪不断理还乱的原型画一张图吧：<br><img src="/2019/03/03/ES5面向对象基础/1.png" alt="prototype示意图"></p><p>由上图可知，原型对象有一个<code>constructor</code>的属性指向了构造方法。也就是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.constructor === Person;<span class="comment">// true</span></span><br><span class="line">person.__proto__.constructor === Person;<span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>由上面<code>Person.prototype = new Object();</code>可知<code>Person.prototype</code>其实是Object的对象，既然是对象那么就有<code>__proto__</code>属性指向该对象的原型。也就是说：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype;<span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>其实<code>Object.prototype</code>也是一个对象那么他的原型是什么呢？我们可以打印一下发现他的原型是<code>null</code>，上图也可以看出。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__);<span class="comment">// null</span></span><br></pre></td></tr></table></figure></p><p>说了这么一大堆终于知道了原型是什么了，那么还有一个更重要的东西就是原型链。<br>如果一个对象调用自己没有定义的属性，那么他就会从他们原型中查找，看有没有定义该属性，如果原型中没有就会去原型的原型去寻找，一直找到顶层的Object类的对象（最顶层的null不用找了，肯定没有），这条由原型连起来的链条叫做原型链。</p><p>那我们看一个东西，上面<code>person.constructor</code>是什么呢？其实就是<code>Person</code>函数。因为<code>person</code>对象没有<code>constructor</code>属性，所以去<code>person</code>的原型中找也就是<code>person.__proto__</code>而它里面找到了，指向的就是<code>Person</code>函数。</p><p>我们也可以用原型来定义对象的属性和方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">"Orange"</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">person2.name = <span class="string">"小明"</span>;</span><br><span class="line">person1.sayName();<span class="comment">// "Orange"</span></span><br><span class="line">person2.sayName();<span class="comment">// "小明"</span></span><br></pre></td></tr></table></figure></p><p>我们来看一下这个步骤，<code>person1</code>调用<code>sayName</code>的时候由于<code>person1</code>自己没有<code>sayName</code>这个方法，那么就是去它的原型去找也就是<code>Person.prototype</code>，发现有这个方法，那么就调用，而方法中<code>this.name</code>，由于自己并没有<code>name</code>这样一个属性，也会在原型中找，最后找到了是”Orange”。<code>person2</code>找<code>sayName</code>跟之前的是一样的，但是<code>person2</code>有<code>name</code>这个属性，所以就不需要去原型链中找了，该属性的值是”小明”。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES5对象 </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 原型 </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中属性描述符</title>
      <link href="/2019/03/03/JS%E4%B8%AD%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6/"/>
      <url>/2019/03/03/JS%E4%B8%AD%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p>属性描述符是ES5中的一个重要的概念。它可以对对象做一些特定的高级操作，今天我们就学习一下ES5中的属性描述符。<br>ES5中的属性描述符是由<code>Object类</code>的一个静态方法<code>defineProperty</code>来设置的，该方法接收三个参数，分别是：<strong>属性操作的对象、属性名和一个属性描述符的对象</strong>。我们来看一个简单的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="string">"a"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</span><br><span class="line">    value:<span class="string">"123"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj.a);<span class="comment">//123</span></span><br></pre></td></tr></table></figure></p><p>这个例子中，我们使用属性描述符将对象obj的a属性的值设置为”123”。<br>属性描述符是由第三个参数来决定属性可以做哪些操作，这个对象可以设置以下的值：</p><table><thead><tr><th>描述符的值</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>value</td><td>值</td><td>undefined</td></tr><tr><td>writable</td><td>是否可写</td><td>true</td></tr><tr><td>configurable</td><td>是否可配置</td><td>true</td></tr><tr><td>enumerable</td><td>是否可枚举</td><td>true</td></tr><tr><td>set</td><td>设置属性的函数</td><td>undefined</td></tr><tr><td>get</td><td>获取属性的函数</td><td>undefined</td></tr></tbody></table><p>接下来我们一一简绍上面的这些值，由于<code>value</code>很简单，上面已经做过解释，就不再重复了。</p><ol><li><p>writable<br> writable表示是否可写，如果其值设置为<code>false</code>，那么修改时会静默失败，严格模式下，会报错TypeError。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="string">"a"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</span><br><span class="line">    writable:<span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line">obj.a = <span class="string">"123"</span>;<span class="comment">//由于writable是false，这里会静默失败</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.a);<span class="comment">//a</span></span><br></pre></td></tr></table></figure></li><li><p>configurable<br> configurable表示是否可配置，如果其值设置为<code>false</code>，那么将属性描述符重新设置的时候会报错TypeError（无论是否是在严格模式下）；同时<code>delete</code>该属性的时候会静默失败，严格模式会报错TypeError。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="string">"a"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</span><br><span class="line">    configurable:<span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</span><br><span class="line">    configurable:<span class="literal">true</span>,<span class="comment">// 将configurable为false的重新开启会直接报错</span></span><br><span class="line">    value:<span class="string">"111"</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj.a);</span><br></pre></td></tr></table></figure><p> 下面给出一个delete的例子：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="string">"a"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</span><br><span class="line">    configurable:<span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">delete</span> obj.a;<span class="comment">// 这个地方会静默失败 严格模式下会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.a);<span class="comment">//"a"</span></span><br></pre></td></tr></table></figure><p> configurable有三点需要注意的：</p><p> 2.1 所谓的不可配置是不能修改，如果重新设置相同的属性描述符是不会报错的：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="string">"a"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</span><br><span class="line">    configurable:<span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</span><br><span class="line">    configurable:<span class="literal">false</span><span class="comment">// 这个地方并不会报错 因为属性描述符并没有改变</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj.a);<span class="comment">//"a"</span></span><br></pre></td></tr></table></figure><p> 2.2 如果configurable为false的时候仍然可以把writable从true改成false，但是不能把writable从false修改成true。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="string">"a"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</span><br><span class="line">    configurable:<span class="literal">false</span>,</span><br><span class="line">    writable:<span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</span><br><span class="line">    writable:<span class="literal">false</span> <span class="comment">// writable从true设置为false是可以的</span></span><br><span class="line">&#125;);</span><br><span class="line">obj.a = <span class="string">"b"</span>;<span class="comment">// writable为false 静默失败</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.a);<span class="comment">//"a"</span></span><br></pre></td></tr></table></figure><p> 2.3 如果configurable为false并且writable从true的时候，那么修改value是可以的。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="string">"a"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</span><br><span class="line">    configurable:<span class="literal">false</span>,</span><br><span class="line">    writable:<span class="literal">true</span>,</span><br><span class="line">    value:<span class="string">"111"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</span><br><span class="line">    value:<span class="string">"222"</span> <span class="comment">// value其实是由writable来决定的</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj.a);<span class="comment">//"222"</span></span><br></pre></td></tr></table></figure></li><li><p>enumerable<br> enumerable表示是否可枚举，如果设置为false，那么for-in中获取不到该值。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="string">"a"</span>,</span><br><span class="line">    b:<span class="string">"b"</span>,</span><br><span class="line">    c:<span class="string">"c"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"b"</span>,&#123;</span><br><span class="line">    enumerable:<span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj[key]);<span class="comment">// 依次打印"a" "c"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 通常判断一个属性是否属于一个对象我们可以使用<code>in操作符</code>和<code>hasOwnProperty方法</code>，对于不可枚举的属性，他们返回的都是true，如上面的不可枚举的属性<code>b</code>：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"b"</span> <span class="keyword">in</span> obj);<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">"b"</span>));<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p> 那么如何区分某个属性是不可枚举的呢？可以利用对象的<code>propertyIsEnumerable</code>方法。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.propertyIsEnumerable(<span class="string">"b"</span>));<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p> 如果要获取对象的所有属性（键），那怎么办？可以使用下面两个方法：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj));<span class="comment">// 获取所有可枚举的属性 结果是 ["a", "c"]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(obj));<span class="comment">// 获取所有的属性，不管是否可以枚举 结果是 ["a", "b", "c"]</span></span><br></pre></td></tr></table></figure></li><li><p>set和get<br> set和get通常是方法，分别定义了设置值和获取值是的逻辑，我们这里给出一个例子，当设置了一个数值读取的时候返回这个数值的平方：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</span><br><span class="line">    set : <span class="function"><span class="keyword">function</span> (<span class="params">_a</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._a = _a;<span class="comment">//这个地方必须注意 这里使用的是_a而不是a 因为如果是a的话会陷入死循环</span></span><br><span class="line">    &#125;,</span><br><span class="line">    get : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._a * <span class="keyword">this</span>._a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">obj.a = <span class="number">4</span>;<span class="comment">//这里会调用set方法</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.a);<span class="comment">// 这里会调用get方法 打印16</span></span><br></pre></td></tr></table></figure><p> set和get也可以定义在对象上，而不使用属性描述符，如下：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    set a(_a)&#123;<span class="comment">//这个地方和函数属性的写法有一点点的区别</span></span><br><span class="line">        <span class="keyword">this</span>._a = _a;</span><br><span class="line">    &#125;,</span><br><span class="line">    get a()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._a * <span class="keyword">this</span>._a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.a = <span class="number">4</span>;<span class="comment">//这里会调用set方法</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.a);<span class="comment">// 这里会调用get方法 打印16</span></span><br></pre></td></tr></table></figure><p> 那么问题来了，如果同一次设置属性描述符中既有get和set又有value那么会以哪个为准呢？这种情况下浏览器就会报错，也就是不允许这么做。<br> 如果多次设置同一个属性的属性描述符那么后面的会覆盖前面的。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="number">123</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</span><br><span class="line">    set :<span class="function"><span class="keyword">function</span> (<span class="params">_a</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._a = _a;</span><br><span class="line">    &#125;,</span><br><span class="line">    get :<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._a * <span class="keyword">this</span>._a;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">obj.a = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.a);<span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</span><br><span class="line">    writable:<span class="literal">true</span>,</span><br><span class="line">    value:<span class="number">321</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.a);<span class="comment">// 321</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>补充</strong></p><ol><li><p>在调用<code>Object.defineProperty</code>方法创建一个<strong>新的属性</strong>的时候，如果不指定<code>writable</code>，<code>configurable</code>，<code>enumerable</code>的时候默认值是false，如果只是修改已定义的属性的时候那么就是默认值true。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a:<span class="string">"111"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"a"</span>,&#123;</span><br><span class="line">    value:<span class="string">"a"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"b"</span>,&#123;</span><br><span class="line">    value:<span class="string">"b"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj));<span class="comment">//b是新的 所以是不可枚举的 所以打印["a"]</span></span><br></pre></td></tr></table></figure></li><li><p>获取属性描述符，可以使用<code>Object.getOwnPropertyDescriptor</code>方法。</p><pre><code class="JavaScript"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj,<span class="string">"a"</span>);</code></pre></li><li><p>批量设置多个属性描述符的时候，可以使用<code>Object.defineProperties</code>方法。</p><pre><code class="JavaScript"><span class="built_in">Object</span>.defineProperties(obj,{    a:{<span class="attr">value</span>:<span class="string">"aaa"</span>,<span class="attr">writable</span>:<span class="literal">false</span>},    b:{<span class="attr">value</span>:<span class="string">"bbb"</span>,<span class="attr">writable</span>:<span class="literal">false</span>},});</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 属性描述符 </tag>
            
            <tag> defineProperty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this到底是什么？</title>
      <link href="/2019/02/27/this%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/2019/02/27/this%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p><code>this</code>是JavaScript中的一个重要的概念，它的值并不是由声明的位置来决定的，而是由调用的位置来决定。正是因为这个原因在不同的语境下它的值是不一样的，所以它成了面试官最喜欢考察的内容。</p><p>通常<code>this</code>由下面这四条法则就可以确定：</p><ol><li><p>new绑定，指向创建的对象。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Student(<span class="string">"小明"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s.name);<span class="comment">//小明</span></span><br></pre></td></tr></table></figure><p> 通过<code>new</code>关键字创建的对象，那么构造方法中的<code>this</code>指向该对象。</p></li><li><p>call、apply、bind等显式绑定。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    name : <span class="string">"小李"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    name : <span class="string">"小秋"</span></span><br><span class="line">&#125;;</span><br><span class="line">sayName.call(obj1);<span class="comment">//小李</span></span><br><span class="line">sayName.call(obj2);<span class="comment">//小秋</span></span><br></pre></td></tr></table></figure></li><li><p>拥有上下文对象的隐式绑定。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">"小秋"</span>,</span><br><span class="line">    sayName : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.sayName();<span class="comment">//小秋</span></span><br></pre></td></tr></table></figure></li><li><p>默认绑定：严格模式下绑定<code>undefined</code>，非严格模式下绑定全局变量（浏览器环境下是<code>window</code>）。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"小李"</span>;</span><br><span class="line">sayName();<span class="comment">//小李</span></span><br></pre></td></tr></table></figure></li></ol><p><code>this</code>的绑定也是有优先级的，它的优先级也是按照上面4条从1到4的。没错，你没有看错new绑定比显式绑定的优先级还要高，虽然这种情况并不多见，这里给出一个简单的例子，供大家参考：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">"小李"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> StudentWithBind = Student.bind(obj);<span class="comment">//bind绑定</span></span><br><span class="line"><span class="keyword">var</span> swb = <span class="keyword">new</span> StudentWithBind(<span class="string">"小秋"</span>);<span class="comment">//new绑定</span></span><br><span class="line"><span class="built_in">console</span>.log(swb.name);<span class="comment">//小秋</span></span><br></pre></td></tr></table></figure></p><p>上面这4条规则适用于大量的情况，但是俗话说的好“凡是都有例外”，下面2条特殊情况要格外注意。</p><ol><li><p>显示绑定（call、apply、bind）如果绑定的是<code>null</code>或者<code>undefined</code>，在严格模式下会绑定对应的值，在非严格模式下绑定全局变量（浏览器环境下是<code>window</code>）。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">"小李"</span>,</span><br><span class="line">    sayName :sayName</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"小秋"</span>;</span><br><span class="line">obj.sayName.call(<span class="literal">null</span>);<span class="comment">//小秋</span></span><br><span class="line">sayName.call();<span class="comment">//小秋</span></span><br></pre></td></tr></table></figure><p> 由于绑定<code>null</code>或者<code>undefined</code>在非严格模式下会绑定全局变量<code>window</code>这样会很危险。如果这里非要绑定一个对象但是又不绑定全局变量可以绑定一个空对象就比如<code>{}</code>或者<code>Object.create(null)</code>，两者的区别是后者不会创建<code>Object.prototype</code>这个委托，也就是后者比前者更空。</p></li><li><p>间接引用，本质上是默认绑定。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    name : <span class="string">"小李"</span>,</span><br><span class="line">    sayName : sayName</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    name : <span class="string">"小秋"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"小芹"</span>;</span><br><span class="line">(obj2.sayName = obj1.sayName)();<span class="comment">//"小芹"</span></span><br></pre></td></tr></table></figure><p> JS中每一个表达式都有一个返回值，上面<code>obj2.sayName = obj1.sayName</code>也是表达式，返回值是函数<code>sayName</code>的引用。而把引用括起来是为了保证这是一个整体，后面的括号是函数的调用。也就是说这里相当于是<code>(sayName)()</code>，进一步相当于<code>sayName()</code>，很显然相当于是<code>window</code>来调用的。</p></li><li>箭头函数，根据所处的环境（作用域）来决定。 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sayName = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"小明"</span></span><br><span class="line">    <span class="comment">//立即执行函数 这个地方的this是window</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;<span class="comment">//箭头函数中的this由所处的作用域来决定 也就是window</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"小华"</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">"小芳"</span></span><br><span class="line">&#125;;</span><br><span class="line">sayName();<span class="comment">//小华</span></span><br><span class="line">sayName.call(obj);<span class="comment">//sayName对应的箭头函数所处的作用域已指向window 即使call也不能改变指向 故打印小华</span></span><br></pre></td></tr></table></figure></li></ol><p>其他情况：</p><ol><li><p>HTML事件中的this指向该DOM元素。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"handleClick(this)"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">obj</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        obj.innerHTML = <span class="string">"点击了"</span>;<span class="comment">//按钮的文案会修改为 点击了</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>JQuery获取到的DOM元素，<code>this</code>指向该DOM元素，<code>$(this)</code>是该DOM对象的JQuery封装对象。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#id"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//选中的DOM元素</span></span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="keyword">this</span>));<span class="comment">//选中DOM元素的JQuery封装对象</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用console.log在控制台打印图片</title>
      <link href="/2019/02/21/%E4%BD%BF%E7%94%A8console-log%E5%9C%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%89%93%E5%8D%B0%E5%9B%BE%E7%89%87/"/>
      <url>/2019/02/21/%E4%BD%BF%E7%94%A8console-log%E5%9C%A8%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%89%93%E5%8D%B0%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>在项目的开发中我们经常使用<code>console.log</code>方法在控制台输出数据，看数据是否正确。<code>console</code>是全局变量<code>window</code>（或<code>global</code>）下的一个对象，它给我们提供了很多的方法，我们可以打印一下这个对象，如下：</p><p><img src="/2019/02/21/使用console-log在控制台打印图片/1.png" alt="console对象的方法"></p><p>我们可以看到除了<code>log</code>方法以外还有<code>info</code>、<code>warn</code>、<code>error</code>等方法，类似于常用的日志系统中的不同级别。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"log"</span>);</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">"info"</span>);</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">"warn"</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">"error"</span>);</span><br></pre></td></tr></table></figure></p><p>显示出来的效果在<code>Chrome</code>里面的效果如下:</p><p><img src="/2019/02/21/使用console-log在控制台打印图片/2.png" alt="Chrome下不同级别的打印"></p><p>其中<code>log</code>和<code>info</code>的区别有点不太明显，我们在<code>Firefox</code>下再次打印可以看到<code>info</code>级别的左边有个图标:</p><p><img src="/2019/02/21/使用console-log在控制台打印图片/3.png" alt="Firefox下不同级别的打印"></p><p>除了这几个不同级别的打印外，还有一个使用的比较多方法就是<code>console.table</code>，它可以用表格列出一个对象的属性：</p><p><img src="/2019/02/21/使用console-log在控制台打印图片/4.png" alt="console.table用法"></p><p>最后再简绍一个可以清空控制台的一个方法就是<code>console.clear()</code>，其他的方法大家可以自己试试，还是挺有意思的。</p><p>说了这么多我们回归到最常用的<code>console.log()</code>吧，他可以打印一些数据，但是很多人不知道其实它还可以添加占位符，类似于C语言的<code>printf函数</code>，具体可以使用的占位符如下：</p><table><thead><tr><th style="text-align:center">占位符</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">%s</td><td style="text-align:center">字符串</td></tr><tr><td style="text-align:center">%d 或者 %i</td><td style="text-align:center">整数</td></tr><tr><td style="text-align:center">%f</td><td style="text-align:center">浮点数</td></tr><tr><td style="text-align:center">%o</td><td style="text-align:center">可展开的DOM</td></tr><tr><td style="text-align:center">%O</td><td style="text-align:center">列出DOM的属性</td></tr><tr><td style="text-align:center">%c</td><td style="text-align:center">根据提供的css样式格式化字符串</td></tr></tbody></table><p>我们试一下前三个：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"打印的字符串是：%s"</span>,<span class="string">"JavaScript很简单"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"打印的整数是：%d"</span>,<span class="number">123.456</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"打印的浮点数是：%f"</span>,<span class="number">123.456</span>);</span><br></pre></td></tr></table></figure></p><p>结果如下：</p><p><img src="/2019/02/21/使用console-log在控制台打印图片/5.png" alt="带占位符的打印"></p><p><code>console.log(&quot;%o&quot;,document.body);</code>的结果大致如下：</p><p><img src="/2019/02/21/使用console-log在控制台打印图片/6.png" alt="%o占位符的结果"></p><p><code>console.log(&quot;%O&quot;,document.body);</code>的结果大致如下：</p><p><img src="/2019/02/21/使用console-log在控制台打印图片/7.png" alt="%O占位符的结果"></p><p>所有占位符中最牛逼的当然是<code>%c</code>了，因为他可以添加样式，这样就可以美化我们的打印效果了。先来看个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"%c神奇的console"</span>,<span class="string">"font-size: 24px;font-style: italic;color: brown;"</span>);</span><br></pre></td></tr></table></figure></p><p>结果如下：</p><p><img src="/2019/02/21/使用console-log在控制台打印图片/8.png" alt="%c占位符的结果"></p><p>最后我们回归主题，打印一张图片，思路就是使用<code>background-image</code>来添加一张背景图片。这里需要要注意的是，设置背景以后要有内容，不然还是不会显示（当然也可以添加样式让内容撑开，大家可以试试）。我们这里随便写个内容就比如一个“+”，当然我们还要设置背景图片显示大小，并且让内容透明（不显示内容）。为了方便代码的阅读，样式部分我使用了ES6的模板字符串，具体代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"%c+"</span>,</span><br><span class="line">  <span class="string">`font-size: 1px;</span></span><br><span class="line"><span class="string">  padding: 122px 217px;</span></span><br><span class="line"><span class="string">  background-image: url(http://imgsrc.baidu.com/forum/w=580/sign=780874ff6e380cd7e61ea2e59145ad14/fb20952bd40735fa2ebbc5f695510fb30e2408ea.jpg);</span></span><br><span class="line"><span class="string">  background-size: contain;</span></span><br><span class="line"><span class="string">  background-repeat: no-repeat;</span></span><br><span class="line"><span class="string">  color: transparent;`</span>);</span><br></pre></td></tr></table></figure></p><p>结果如下：</p><p><img src="/2019/02/21/使用console-log在控制台打印图片/9.gif" alt="console.log打印图片"></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> console.log </tag>
            
            <tag> JS API </tag>
            
            <tag> 控制台图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《程序是怎么跑起来的》读书笔记</title>
      <link href="/2019/02/21/%E3%80%8A%E7%A8%8B%E5%BA%8F%E6%98%AF%E6%80%8E%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/02/21/%E3%80%8A%E7%A8%8B%E5%BA%8F%E6%98%AF%E6%80%8E%E4%B9%88%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>最近看了矢泽久雄[日]的另一本书《程序是怎么跑起来的》，同样把大学学到的知识又复习了一遍，主要包括计算机组成原理、操作系统、数字逻辑、数据结构、编程语言等知识。下面是我记录的一些书中的重点：</p><p><img src="/2019/02/21/《程序是怎么跑起来的》读书笔记/1.jpg" alt="《程序是怎么跑起来的》"></p><hr><p>CPU 是英文 Central Processing Unit（中央处理器）的缩写，相当于计算机的大脑，它的内部由数百万至数亿个晶体管构成。</p><p>CPU 和内存是由许多晶体管组成的电子部件，通常称为 IC（Integrated Circuit，集成电路）。从功能方面来看，如图 1-2 所示，CPU 的内部由寄存器、控制器、运算器和时钟四个部分构成，各部分之间由电流信号相互连通。寄存器 可用来暂存指令、数据等处理对象，可以将其看作是内存的一种。</p><p>一个 CPU 内部会有 20～100 个寄存器。控制器 负责把内存上的指令、数据等读入寄存器，并根据指令的执行结果来控制整个计算机。运算器 负责运算从内存读入寄存器的数据。时钟 负责发出 CPU 开始计时的时钟信号。不过，也有些计算机的时钟位于 CPU 的外部。</p><p>通常所说的内存指的是计算机的主存储器（main memory），简称主存。主存通过控制芯片等与 CPU 相连，主要负责存储指令和数据。主存由可读写的元素构成，每个字节（1 字节 = 8 位 ）都带有一个地址编号。CPU 可以通过该地址读取主存中的指令和数据，当然也可以写入数据。但有一点需要注意，主存中存储的指令和数据会随着计算机的关机而自动清除。</p><p>通常我们将汇编语言编写的程序转化成机器语言的过程称为汇编 ；反之，机器语言程序转化成汇编语言程序的过程则称为反汇编 。</p><p>机器语言是指 CPU 能直接解释和执行的语言。</p><p>编译是指将使用高级编程语言编写的程序转换为机器语言的过程，其中，用于转换的程序被称为编译器（compiler）。</p><table><thead><tr><th>寄存器</th><th>功能</th></tr></thead><tbody><tr><td>累加寄存器（accumulator register）</td><td>存储执行运算的数据和运算后的数据</td></tr><tr><td>标志寄存器（flag register）</td><td>存储运算处理后的CPU的状态</td></tr><tr><td>程序计数器（program counter）</td><td>存储下一条指令所在内存的地址</td></tr><tr><td>基址寄存器（base register）</td><td>存储数据内存的起始地址</td></tr><tr><td>变址寄存器（index register）</td><td>存储基址寄存器的相对地址</td></tr><tr><td>通用寄存器（general purpose register）</td><td>存储任意数据</td></tr><tr><td>指令寄存器（instruction register）</td><td>存储指令。CPU内部使用，程序员无法通过程序对该寄存器进行读写操作</td></tr><tr><td>栈寄存器（stack register）</td><td>存储栈区域的起始地址</td></tr></tbody></table><p>储执行运算的数据和运算后的数据 </p><p>CPU 是具有各种功能的寄存器的集合体。其中，程序计数器、累加寄存器、标志寄存器、指令寄存器和栈寄存器都只有一个，其他的寄存器一般有多个。程序计数器和标志寄存器比较特殊。另外，存储指令的指令寄存器等寄存器，由于不需要程序员做多关注。</p><p>操作系统（operating system）是指管理和控制计算机硬件与软件资源的计算机程序。</p><p>程序的流程分为顺序执行、条件分支和循环三种。顺序执行 是指按照地址内容的顺序执行指令。条件分支 是指根据条件执行任意地址的指令。循环 是指重复执行同一地址的指令。</p><p>变址寄存器的值就相当于高级编程语言程序中数组的索引功能。</p><p>CPU 则会把基址寄存器＋变址寄存器的值解释为实际查看的内存地址。变址寄存器的值就相当于高级编程语言程序中数组的索引功能。</p><p>8 位 = 1 字节</p><p>计算机处理信息的最小单位——位 ，就相当于二进制中的一位。位的英文 bit 是二进制数位（binary digit）的缩写。</p><p>字节是最基本的信息计量单位。位是最小单位，字节是基本单位。内存和磁盘都使用字节单位来存储和读写数据，使用位单位则无法读写数据。因此，字节是信息的基本单位。</p><p>用字节单位处理数据时，如果数字小于存储数据的字节数（= 二进制数的位数），那么高位上就用 0 填补。例如，100111 这个 6 位二进制数，用 8 位（= 1 字节）表示时为 00100111，用 16 位（= 2 字节）表示时为 0000000000100111。</p><p>移位运算 指的是将二进制数值的各数位进行左右移位（shift = 移位）的运算。移位有左移（向高位方向）和右移（向低位方向）两种。</p><p>二进制数左移后就会变成原来的 2 倍、4 倍、8 倍……反之，二进制数右移后则会变成原来的 1/2、1/4、1/8……</p><p>进制数中表示负数值时，一般会把最高位作为符号来使用，因此我们把这个最高位称为符号位。符号位是 0 时表示正数 ，符号位 是 1 时表示负数。</p><p>补码，我们需要将二进制数的各数位的数值全部取反6 ，然后再将结果加 1。</p><p>负数用补码表示</p><p>移位后需要在最高位补 0。类似于霓虹灯往右滚动的效果。这就称为逻辑右移。</p><p>将二进制数作为带符号的数值进行运算时，移位后要在最高位填充移位前符号位的值（0 或 1）。这就称为算术右移。</p><p>符号扩充 就是指在保持值不变的前提下将其转换成 16 位和 32 位的二进制数。将 01111111 这个正的 8 位二进制数转换成 16 位二进制数时，很容易就能得出 0000000001111111 这个正确结果，但是像 11111111 这样用补数来表示的数值，该如何处理比较好呢？实际上处理方法非常简单，将其表示成 1111111111111111 就可以了。也就是说，不管是正数还是用补数表示的负数，都只需用符号位的值（0 或者 1）填充高位即可。这就是符号扩充的方法。</p><p>算术运算 是指加减乘除四则运算。逻辑运算 是指对二进制数各数字位的 0 和 1 分别进行处理的运算，包括逻辑非（NOT 运算）、逻辑与（AND 运算）、逻辑或（OR 运算）和逻辑异或（XOR 运算9 ）四种。</p><p>逻辑非 指的是 0 变成 1、1 变成 0 的取反操作。逻辑与 指的是“两个都是 1”时，运算结果为 1，其他情况下运算结果都为 0 的运算。逻辑或 指的是“至少有一方是 1”时，运算结果为 1，其他情况下运算结果都是 0 的运算。逻辑异或 指的是排斥相同数值的运算。“两个数值不同”，也就是说，当“其中一方是 1，另一方是 0”时运算结果是 1，其他情况下结果都是 0。</p><p>有一些十进制数的小数无法转换成二进制数”。例如，十进制数 0.1，就无法用二进制数正确表示，小数点后面即使有几百位也无法表示。</p><p>很多编程语言中都提供了两种表示小数的数据类型，分别是双精度浮点数和单精度浮点数。双精度浮点数类型 用 64 位、单精度浮点数类型 用 32 位来表示全体小数。在 C 语言中，双精度浮点数类型和单精度浮点数类型分别用 double 和 float 来表示。</p><p>浮点数 是指用符号、尾数、基数和指数这四部分来表示的小数。</p><p>符号部分 是指使用一个数据位来表示数值的符号。该数据位是 1 时表示负，为 0 时则表示“正或者 0”</p><p>在二进制数中，我们使用的是“将小数点前面的值固定为 1 的正则表达式 ”。</p><p>指针 也是一种变量，它所表示的不是数据的值，而是存储着数据的内存的地址。通过使用指针，就可以对任意指定地址的数据进行读写。</p><p>数组 是指多个同样数据类型的数据在内存中连续排列的形式。作为数组元素的各个数据会通过连续的编号被区分开来，这个编号称为索引 （index）。</p><p>栈用的是 LIFO（Last Input First Out，后入先出）方式，而队列用的则是 FIFO（First Input First Out，先入先出）方式。</p><p>在数组的各个元素中，除了数据的值之外，通过为其附带上下一个元素的索引，即可实现链表 。</p><p>二叉查找树是指在链表的基础上往数组中追加元素时，考虑到数据的大小关系，将其分成左右两个方向的表现形式。</p><p>内存和磁盘也都被归类为存储部件。不过，利用电流来实现存储的内存，同利用磁效应来实现存储的磁盘，还是有差异的。而从存储容量来看，内存是高速高价，而磁盘则是低速廉价。</p><p>一般把输入装置、输出装置、存储器、运算器和控制器这 5 种部件设备称 为计算机的 5 大部件。</p><p>内存主要是指主内存（负责存储 CPU 中运行的程序指令和数据的内存），磁盘主要是指硬盘。</p><p>存储在磁盘中的程序需要读入到内存后才能运行。</p><p>磁盘缓存 指的是把从磁盘中读出的数据存储到内存空间中的方式。这样一来，当接下来需要读取同一数据时，就不用通过实际的磁盘，而是从磁盘缓存中把内容读出。使用磁盘缓存可以大大改善磁盘数据的访问速度</p><p>虚拟内存 是指把磁盘的一部分作为假想的内存来使用。这与磁盘缓存是假想的磁盘（实际上是内存）相对，虚拟内存是假想的内存（实际上是磁盘）。</p><p>为了实现虚拟内存，就必须把实际内存 （也可称为物理内存 ）的内容，和磁盘上的虚拟内存的内容进行部分置换（swap），并同时运行程序。</p><p>虚拟内存的方法有分页式 和分段式 两种。Windows 采用的是分页式。该方式是指，在不考虑程序构造的情况下，把运行的程序按照一定大小的页（page）进行分割，并以页为单位在内存和磁盘间进行置换。在分页式中，我们把磁盘的内容读出到内存称为 Page In，把内存的内容写入磁盘称为 Page Out。一般情况下，Windows 计算机的页的大小是 4KB。</p><p>为了实现虚拟内存功能，Windows 在磁盘上提供了虚拟内存用的文件（page file，页文件 ）。该文件由 Windows 自动做成和管理。文件的大小也就是虚拟内存的大小，通常是实际内存的相同程度至两倍程度。</p><p>虚拟内存无法彻底解决内存不足的问题。</p><p>DLL （Dynamic Link Library）文件 ，顾名思义，是在程序运行时可以动态加载 Library（函数和数据的集合）的文件。此外，还有一个需要大家注意的地方，那就是多个应用可以共有同一个 DLL 文件。而通过共有同一个 DLL 文件则可以达到节约内存的效果。</p><p>栈清理处理 是指，把不需要的数据从接收和传递函数的参数时使用的内存上的栈区域中清理出去。</p><p>磁盘是通过把其物理表面划分成多个空间来使用的。划分的方式有扇区方式 和可变长方式 两种，前者是指将磁盘划分为固定长度的空间，后者则是指把磁盘划分为长度可变的空间。一般的 Windows 计算机所使用的硬盘和软盘，采用的都是扇区方式。扇区方式中，把磁盘表面分成若干个同心圆的空间就是磁道 ，把磁道按照固定大小（能存储的数据长度相同）划分而成的空间就是扇区。</p><p>扇区是对磁盘进行物理读写的最小单位。Windows 中使用的磁盘，一般 1 个扇区是 512 字节。</p><p>Windows 在逻辑方面（软件方面）对磁盘进行读写的单位是扇区整数倍簇 。根据磁盘容量的不同，1 簇可以是 512 字节（1 簇 = 1 扇区）、1KB（1 簇 = 2 扇区）。</p><p>不管是硬盘还是软盘，不同的文件是不能存储在同一个簇中的，否则就会导致只有一方的文件不能被删除。因此，不管是多么小的文件，都会占用 1 簇的空间。这样一来，所有的文件都会占用 1 簇的整数倍的磁盘空间。</p><p>文件是将数据存储在磁盘等存储媒介中的一种形式。程序文件中存储数据的单位是字节。</p><p>把文件内容用“数据 × 重复次数”的形式来表示的压缩方法称为 RLE（Run Length Encoding，行程长度编码）算法。</p><p>虽然针对相同数据经常连续出现的图像、文件等，RLE 算法可以发挥不错的效果，但它并不适合文本文件的压缩。</p><p>我们把能还原到压缩前状态的压缩称为可逆压缩 ，无法还原到压缩前状态的压缩称为非可逆压缩。</p><p>运行环境 = 操作系统 ＋ 硬件</p><p>CPU 只能解释其自身固有的机器语言。不同的 CPU 能解释的机器语言的种类也是不同的。</p><p>机器语言的程序称为本地代码 （native code）。程序员用 C 语言等编写的程序，在编写阶段仅仅是文本文件。文本文件（排除文字编码的问题）在任何环境下都能显示和编辑。我们称之为源代码 。通过对源代码进行编译，就可以得到本地代码。</p><p>同样机型的计算机，可安装的操作系统类型也会有多种选择。</p><p>BIOS 存储在 ROM 中，是预先内置在计算机主机内部的程序。BIOS 除了键盘、磁盘、显卡等基本控制程序外，还有启动“引导程序”的功能。引导程序 是存储在启动驱动器起始区域的小程序。操作系统的启动驱动器一般是硬盘，不过有时也可以是 CD-ROM 或软盘。 开机后，BIOS 会确认硬件是否正常运行，没有问题的话就会启动引导程序。引导程序的功能是把在硬盘等记录的 OS 加载到内存中运行。虽然启动应用是 OS 的功能，但 OS 并不能自己启动自己，而是通过引导程序来启动。</p><p>Dump 是指把文件的内容，每个字节用 2 位十六进制数来表示的方式。</p><p>能够把 C 语言等高级编程语言编写的源代码转换成本地代码的程 序称为编译器 。每个编写源代码的编程语言都需要其专用的编译器。将 C 语言编写的源代码转换成本地代码的编译器称为 C 编译器。</p><p>编译器首先读入代码的内容，然后再把源代码转换成本地代码。</p><p>读入的源代码还要经过语法解析、句法解析、语义解析等，才能生成本地代码</p><p>此外，还有一种交叉编译器 ，它生成的是和运行环境中的 CPU 不同的 CPU 所使用的本地代码。</p><p>编译器转换源代码后，就会生成本地文件。不过，本地文件是无法直接运行的。为了得到可以运行的 EXE 文件，编译之后还需要进行“链接”处理。</p><p>编译后生成的不是 EXE 文件，而是扩展名为“.obj”的目标文件。</p><p>把多个目标文件结合，生成 1 个 EXE 文件的处理就是链接 ，运行连接的程序就称为链接器 （linkage editor 或连结器）。</p><p>Windows 以函数的形式为应用提供了各种功能。这些形式的函数称为 API （Application Programming Interface，应用程序接口）。</p><p>Windows 中，API 的目标文件，并不是存储在通常的库文件中，而是存储在名为 DLL （Dynamic Link Library）文件 的特殊库文件中。</p><p>无论是 C 语言还是 C++，如果没有在程序中明确释放堆的内存空间，那么即使在处理完毕后，该内存空间仍会一直残留。这个现象称为内存泄露 （memory leak），它是令 C 语言及 C++ 的程序员们十分头疼的一个 bug（程序的错误）。如果内存泄露一直存在的话，就有可能会造成内存不足而导致宕机。这就好比，如果水龙头一直嘀嗒嘀嗒地漏水，那么一晚上的时间水桶就可能会装满并溢出。</p><p>操作系统（Operating System）也称为基础软件。操作系统是计算机运行时不可或缺的控制程序，以及在控制程序下运转的为其他软件运行提供操作环境的软件的统称。另外，在操作系统上运行的应用也称为“应用程序”。</p><p>汇编语言源文件的扩展名，通常用“.asm”来表示。</p><p>栈 是存储临时数据的区域，它的特点是通过 push 指令和 pop 指令进行数据的存储和读出。往栈中存储数据称为“入栈”，从栈中读出数据称为“出栈”。</p><p>IN 指令 通过指定端口号的端口输入数据，并将其存储在 CPU 内部的寄存器中。OUT 指令 则是把 CPU 寄存器中存储的数据，输出到指定端口号的端口。</p><p>I/O 是 Input/Output 的缩写。显示器、键盘等外围设备都有各自专用的 I/O 控制器。I/O 控制器中有用于临时保存输入输出数据的内存。这个内存就是端口 。</p><p>各端口之间通过端口号 进行区分。端口号也称为 I/O 地址 。</p><p>IRQ 是用来暂停当前正在运行的程序，并跳转到其他程序运行的必要机制。该机制称为中断处理 。中断处理在硬件控制中担当着重要角色。因为如果没有中断处理，就有可能出现处理无法顺畅进行的情况</p><p>获取伪随机数的公式。该公式称为线性同余法 。如果把 Ri 作为当前随机数的话，那么下一个出现的随机数 Ri + 1 就可以用下面的公式来获取。<br>R i + 1 = (a × Ri + b ) mod c</p><p>这种周期性是伪随机数的特征，也是为什么不是真随机数的原因。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机通用知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《计算机是怎样跑起来的》读书笔记</title>
      <link href="/2019/02/20/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E6%80%8E%E6%A0%B7%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/02/20/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E6%80%8E%E6%A0%B7%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>最近看了矢泽久雄[日]的《计算机是怎样跑起来的》，把大学学到的知识又复习了一遍，主要包括计算机组成原理、操作系统、编程语言、数据库等知识。下面是我记录的一些书中的重点：</p><p><img src="/2019/02/20/《计算机是怎样跑起来的》读书笔记/1.jpg" alt="《计算机是怎样跑起来的》"></p><hr><p>计算机的三大原则：</p><ol><li>计算机是执行输入、运算、输出的机器</li><li>程序是指令和数据的集合</li><li>计算机的处理方式有时与人们的思维习惯不同</li></ol><p>计算机是执行输入、运算、输出的机器。</p><p>程序是指令和数据的集合。</p><p>指令，就是控制计算机进行输入、运算、输出的命令。</p><p>使用计算机的目的就是为了提高工作效率。</p><p>计算机内部主要由被称为IC的元件组成，虽然在IC家族中有功能各异的各种IC，但在这里希望记住的只有三种：CPU（处理器）、内存以及I/O。CPU是计算机的大脑，在其内部可对数据执行运算并控制内存和I/O。内存用于存储指令和数据。I/O负责把键盘、鼠标、显示等周边设备和主机连接在一起，实现数据的输入和输出。</p><p>在机器语言程序中，虽然都是0和1的组合，但每个组合都是有特定含义的指令或数据。可是对人类来说，如果只看0和1的话，恐怕很难判断各个组合都表示什么 于是就有人发明了一种编程方法，根据表示指令功能的英语单词起一个相似的昵称，并将这个昵称赋予给0和1的组合。这种类似英语单词的昵称叫做“助记符”，使用助记符的编程语言叫做“汇编语言”。</p><p>既然数据的运算是在CPU中进行的，那么在CPU内部就应该有存储数据的地方。这种存储数据的地方叫做“寄存器”。虽然也叫寄存器，但是与I/O的寄存器不同，CPU的寄存器不仅能存储数据，还具备对数据进行运算的能力。CPU带有什么样的寄存器取决于CPU的种类。</p><p>A寄存器也叫做“累加器”，是运算的核心。所以连接到它上面的导线也一定会比其他寄存器多。<br>F寄存器也叫做“标志寄存器”，用于存储运算结果的状态，比如是否发生了进位、数字大小的比较结果等。<br>PC寄存器也叫做“程序指针”，存储着指向CPU接下来要执行的指令的地址。<br>PC寄存器的值会随着滴答滴答的时钟信号自动更新，可以说程序就是依靠不断变化的PC寄存器的值运行起来的。<br>SP寄存器也叫做“栈顶指针”，用于在内存中创建一块称为“栈”的临时数据存储区域</p><p>用汇编语言编写的程序是不能直接运行的，必须先转换成机器语言。机器语言是唯一一种CPU能直接理解的编程语言。</p><p>程序的流程总共有三种：顺序、条件分支、循环。</p><p>结构化程序设计就是“为了把程序编写的具备结构性，仅使用顺序结构、条件分支和循环表示程序的流程即可，而不再使用跳转指令”。</p><p>中断处理是指计算机使程序的流程突然跳转到程序中的特定地方，这样的地方被称为中断处理例程（Rountine）或是中断处理程序（Handler），而这种跳转是通过CPU所具备的硬件功能实现的。</p><p>用两个数中较大的数减去较小的数（步骤），反复进行上述步骤，直到两个数的值相等（步骤的终止）。如果最终这两个数相同，那么这个数就是最大公约数。也就是著名的“辗转相除法”。</p><p>思考算法的时候，要先在纸上用文字或图表描述出解决问题的步骤，而不是立即开始编写代码。</p><p>在一般的个人计算机中，内存内部被分割成了若干个数据存储单元，每个单元可存储8比特的数据（8比特=1字节）。为了区分各个单元，每个单元都被分配了一个编号，这个编号被称为“地址”（门牌号码）。如果一台个人计算机装配有64M字节内存，那么就会有从0到64M（1M=100万）这么多个地址。</p><p>数组是数据结构的基础，只要使用数组就能通过程序实现各种各样的算法以处理大量的数据</p><p>“继承”（Inheritance），“封装”（Encapsulation），“多态”（Polymorphism，也称为多样性和多义性）被称为面向对象编程的三个基本特性。</p><p>继承指的是通过继承已存在的类所拥有的成员而生成新的类。<br>封装指的是在类所拥有的成员中，隐藏掉那些没有必要展示给该类调用者的成员。<br>多态指的是针对同一种消息，不同的对象可以进行不同的操作</p><p>数据库进行的操作的种类通常称为CRUD。CRUD由以下四种操作的英文名称的首字母组成，即记录的插入（Create）、获取（Refer）、更新（Update）、删除（Delete）。</p><p>为了对数据库进行CRUD操作，就必须从应用程序向DBMS发送命令。这里所使用的命令就是SQL语言（Structural Query Language，结构化查询语言）。</p><p>CRUD中的C,R,U,D分别对应着SQL语言中的INSERT（插入）、SELECT（查询）、UPDATE（更新）、DELETE（删除）语句。</p><p>在每块网卡的ROM（Read Only Memory，只读存储器）中都预先烧录一个唯一的MAC地址。网卡制造厂商负责确定这个MAC地址是什么。因为MAC地址是由制造厂商的编号和产品编号两部分组成，所以世界上的每个MAC地址都是独一无二的。</p><p>在因特网的世界中，到处传输的都是附带了IP地址的数据，但能够标识作为数据最终接收者的网卡的，还是MAC地址。于是在计算机中就加入了一种程序，用于实现由IP地址到MAC地址的转换，这种功能被称为ARP（Address Resolution Protocol，地址解析协议）。</p><p>在公开密钥加密技术中，用于加密的密钥可以公开给全世界，因此称为“公钥”，而用于解密的密钥是只有自己才知道的秘密，因此称为“私钥”。</p><p>若立志成为计算机行业的专家，就不能仅仅关注技术了。虽然又懂技术又懂计算机确实令人感到兴奋，但如果只是这样的话，早晚有一天工作会变得没那么有意思。有些人在30岁左右就选择离开计算机行业，不是因为他们追赶不上技术前进的步伐，而是因为觉得工作变得无聊了。专家也好，普通人也罢，只有成熟感才会觉得工作有意义。</p><p>SE（System Engineer系统工程师）也好，程序员也罢，所有和计算机相关的工程师都要有这样一种意识：我们要让计算机技术服务于社会。如果能有这样的决心，就应该能够作为一生的事业和计算机愉快地相处下去。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机通用知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《我的第一本地理启蒙书》读书笔记</title>
      <link href="/2019/02/17/%E3%80%8A%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E5%9C%B0%E7%90%86%E5%90%AF%E8%92%99%E4%B9%A6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/02/17/%E3%80%8A%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E5%9C%B0%E7%90%86%E5%90%AF%E8%92%99%E4%B9%A6%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>这是新年第一篇笔记，祝愿大家新年快乐。<br>作为一年只回去一次家的我，给亲戚的礼物是必不可少的，其中这本《我的第一本地理启蒙书》就是我送给亲戚家小朋友的一本小书。回家坐了将近30个小时的火车的我也是独自把这本书看完了。</p><p><img src="/2019/02/17/《我的第一本地理启蒙书》读书笔记/1.jpg" alt="《我的第一本地理启蒙书》"></p><p>这本书适合小学和初中的小朋友，内容也是挺有意思的，下面是我觉得一些比较重要的部分：</p><p>一、方位有东南西北，还有东北、东南、西北、西南，为什么不叫北东、南东、北西、南西等呢？<br>有种说法是，人们在命名过程中，一般会遵循由易到难，由简单到复杂的原则。日常生活中太阳从东边升起，西边落下，被人用来作为定义的基础，后来又在此基础上衍生出南北两个方向。</p><p>二、为什么指南针不叫指北针？<br>有种说法是因为南方朝阳，代表生机和尊贵，所以大家都叫指南针。</p><p>三、辨别方位的方法：</p><ol><li>使用指南针</li><li>木枝叶稠密的一方是南方</li><li>苔藓稠密的一方是北方（苔藓喜阴）</li><li>年轮稀疏的是南方（朝南长得快）</li><li>雪融化快的是南方</li><li>蚂蚁窝一般在树的南边（南边温暖）</li></ol><p>四、地名常用的命名规则：</p><ol><li>河山是大地的符号，中国很多地名都与河山有关系，通常用河与山为界。<br> 比如河北，河南，以黄河为界。<br> 湖北，湖南，以洞庭湖为界。<br> 南岳衡山附近有衡山县 衡东 衡阳等。<br> 淮河沿岸有淮安 淮北 淮南等</li><li>古人称：“南水北谓之阳，山北水南谓之阴。”也就是北边是阳，南边是阴。<br>就比如，咸阳就是渭水北边（咸有全部的意思）。<br>邵阳，就是邵水的北边。<br>淮阳、汾阳、沈阳、洛阳、汉阳分别是淮河、汾水、沈水、洛河、汉水的北边。<br>江阴、淮阴、汉阴、湘阴分别是长江、淮河、汉水、湘江的南边。</li><li>河流的发源地通常称为源。<br>比如湟源，就是黄河支流湟水的源头。</li><li>位于江河中游的地名通常前面加临，如临沂。</li><li>接近河口的地方，通常后面加个口。如汉口，指汉江流入长江的地方。</li><li>有的地方能政治安定，安居乐业通常会加安、宁、平、定，比如延安。</li><li>人文历史典故也是命名的一个规则。</li></ol><p>五、为什么水总是从西向东？<br>因为水往低处流，我国地势是西面高，东面低。</p><p>六、地球以赤道为南北半球的分界线。</p><p>七、地球上竖着的是经线，横着的是纬线。<br>赤道以北是北纬，南边是南纬，各90度。<br>北极点和南极点是90度，赤道是0度。<br>经线以英国格林尼治天文台为0度（即本初子午线）。<br>本初子午线以东是东经，以西为西经，各180度。<br>东经180度和西经180度在太平洋上重叠。<br>东西半球以西经20度和东经160度来划分（不是0度）。</p><p>八、地球朝着太阳的一面为白天，背着太阳的一面是黑夜。</p><p>九、地球会自转和滚转，自转是绕着地轴转的，是南北极点的连线。但是这个线不是垂直于滚转的平面，从而有了一年四季。</p><p>十、近日点远日点<br>各个星体绕太阳公转的轨道大致是一个椭圆，它的长直径和短直径相差不大，可近似为正圆。太阳就在这个椭圆的一个焦点上，而焦点是不在椭圆中心的，因此星体离太阳的距离，就有时会近一点，有时会远一点。离太阳最近的时候，这一点位置叫做近日点。离太阳最远的时候，这一点位置叫做远日点。<br>1月初，地球离太阳距离最近，为1.471亿千米，这一点就是近日点。<br>7月初地球离太阳最远，为1.52亿千米，这一点就是远日点。<br>虽然近日点在1月并不代表1月是最热的，温度还跟阳光是否直射有关。</p><p>十一、地球五带：北寒带、北温带、热带、南温带、南寒带。</p><p>十二、最后放一张图片，如果顿悟该图片就会明白四季更替、极昼、极夜等地理知识：<br><img src="/2019/02/17/《我的第一本地理启蒙书》读书笔记/2.jpg" alt="地球滚转示意图"></p>]]></content>
      
      
      <categories>
          
          <category> 地理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 地理 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态import来拆分代码后发布问题</title>
      <link href="/2019/01/30/dynamic-import-deploy-issue/"/>
      <url>/2019/01/30/dynamic-import-deploy-issue/</url>
      
        <content type="html"><![CDATA[<p>当使用SPA（单页应用）的时候，为了提高性能，我们经常使用<code>动态import</code>来拆分代码。这种情况发布的时候可能会有这样的问题：</p><p>假如用户在发布前已经进入该应用，当用户在发布后再进入某个引入分片代码的的界面，那么很可能页面静态资源的路径是旧的，而服务器新发布的资源路径是新的（大多数路径不一样是文件名的hash值不同导致的，我们这里也假设是这样情况），那么两个路径不一样，从而导致<code>404</code>的发生。</p><p>我们这里讲一种简单的处理方法：</p><ol><li>设置HTML不缓存</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>给动态引入的JS加上hash值，这一块不懂的可以看<a href="/blog/2019/01/30/dynamic-import-named/" title="webpack中动态import()打包后的文件名称定义">这篇文章</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态import处代码</span></span><br><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "[request]" */</span><span class="string">`../../containers/<span class="subst">$&#123;requestPath&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"><span class="comment">//... 其他代码</span></span><br><span class="line">output: &#123;</span><br><span class="line">    <span class="comment">//... 其他代码</span></span><br><span class="line">    filename: <span class="string">'[name].[hash].js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].[hash].js'</span>,<span class="comment">//这里使用hash,也可以是其他的hash具体按自己的项目来定</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//... 其他代码</span></span><br></pre></td></tr></table></figure><ol start="3"><li>设置缓存头信息</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我这里使用的是koa2做为服务器的 根据使用的服务器来设置响应头信息就可以了</span></span><br><span class="line">app.use(<span class="built_in">require</span>(<span class="string">'koa-static'</span>)(__dirname + <span class="string">'/public'</span>,&#123;</span><br><span class="line">    maxage:<span class="number">1209600000</span><span class="comment">//这个时间根据具体的项目来自己定</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>通过上述步骤就可以了，当用户在发布后再进入某个引入分片代码的的界面，那么页面中的引用是旧的资源路径，由于页面有缓存那么不会报错。当用户新进入页面的时候（比如刷新一下）那么由于<code>HTML</code>文件是不缓存的，它引入的<code>js</code>也是新的路径，而分片路径也是新的，所以界面就不会报错了。</p><p>这里需要注意的一点就是服务端新发布的代码最好可以兼容一下旧的界面，比如旧的界面要报个错什么的。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dynamic import </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack中动态import()打包后的文件名称定义</title>
      <link href="/2019/01/30/dynamic-import-named/"/>
      <url>/2019/01/30/dynamic-import-named/</url>
      
        <content type="html"><![CDATA[<p>动态<code>import()</code>打包出来文件的name是按照<code>0,1,2...</code>依次排列，如<code>0.js</code>、<code>1.js</code>等，有的时候我们希望打包出来的文件名是打包前的文件名称。要实现这，需要经历3个步骤：<br>1.在<code>webpack</code>配置文件中的<code>output</code>中添加<code>chunkFilename</code>。命名规则根据自己的项目来定，其中<code>[name]</code>就是文件名，这一块更详细的说明请<a href="https://www.webpackjs.com/configuration/output/#output-chunkfilename" title="chunkfilename" target="_blank" rel="noopener">点击这里</a>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其他代码...</span></span><br><span class="line">output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'public'</span>),</span><br><span class="line">    filename: <span class="string">'[name].[hash:8].js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].[hash:8].js'</span>,<span class="comment">//动态import文件名</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//其他代码...</span></span><br></pre></td></tr></table></figure></p><p>2.在动态<code>import()</code>代码处添加注释<code>webpackChunkName</code>告诉webpack打包后的chunk的名称（注释中的内容很重要，不能省掉），这里打包以后的name就是MyFile。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "MyFile" */</span><span class="string">`../containers/MyFile`</span>)</span><br></pre></td></tr></table></figure></p><p>3.大多数情况下我们使用动态<code>import()</code>是通过循环来做的，这样我们就不得不引入变量了，使用<code>[request]</code>来告诉webpack，这里的值是根据后面传入的字符串来决定，本例中就是变量<code>pathName</code>的值，具体如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "[request]" */</span><span class="string">`../containers/<span class="subst">$&#123;pathName&#125;</span>`</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dynamic import </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS改变input光标颜色</title>
      <link href="/2019/01/25/caret-color/"/>
      <url>/2019/01/25/caret-color/</url>
      
        <content type="html"><![CDATA[<p>我们可能会有改变input光标颜色的需求，谷歌浏览器的默认光标颜色是黑色的，我们可以看到GitHub上的光标却是白色，那么这个用CSS怎么改变呢?<br><img src="/2019/01/25/caret-color/1.gif" alt="默认的黑色光标"><br><img src="/2019/01/25/caret-color/2.gif" alt="GitHub白色的光标"></p><hr><p>这种效果有两种实现方式：</p><h4 id="1-使用color来实现"><a href="#1-使用color来实现" class="headerlink" title="1.使用color来实现"></a>1.使用color来实现</h4><p>光标的颜色是继承自当前输入框字体的颜色，所以用<code>color</code>属性即可改变：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/2019/01/25/caret-color/3.gif" alt="使用color属性修改"></p><h4 id="2-使用caret-color来实现"><a href="#2-使用caret-color来实现" class="headerlink" title="2.使用caret-color来实现"></a>2.使用caret-color来实现</h4><p>上一种方式已经修改了光标的颜色但是字体的颜色也改变了，如果只想改变光标的颜色而不改变字体的颜色那就使用<code>caret-color</code>属性:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line"><span class="attribute">caret-color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/2019/01/25/caret-color/4.gif" alt="使用caret-color属性修改"></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS语法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
